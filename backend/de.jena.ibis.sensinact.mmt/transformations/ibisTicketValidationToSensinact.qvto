library ibisTicketValidationToSensinact;

import ibisToSensinactLibrary;

modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TICKETVALIDATION uses "https://jena.de/models/ibis/ticketvalidationservice/1.0";
modeltype SENSINACT uses "https://jena.de/models/ibis/sensinact/1.0";
modeltype PROVIDER uses "https://eclipse.org/sensinact/core/provider/1.0";

mapping TICKETVALIDATION::CurrentTariffStopResponse::currentTariffStopToService() : SENSINACT::TicketValidationCurrentTariffStop {
    resource := object SENSINACT::TicketValidationCurrentTariffStopData {
	
    	timestamp := self.currentTariffStopData.timeStamp.getEInstant();
    	serviceName := "TicketValidationService";
    	serviceOperation := "CurrentTariffStopData";
    	
    	stopIndex := self.currentTariffStopData.currentTariffStop.stopIndex.value;
    	stopRef := self.currentTariffStopData.currentTariffStop.stopRef.value;
    	stopName += self.currentTariffStopData.currentTariffStop.stopName.value;
    	stopAlternativeName += self.currentTariffStopData.currentTariffStop.stopAlternativeName.value;
    	platform := self.currentTariffStopData.currentTariffStop.platform.value;
    	arrivalScheduled := self.currentTariffStopData.currentTariffStop.arrivalScheduled.getEInstant();
    	arrivalExpected := self.currentTariffStopData.currentTariffStop.arrivalExpected.getEInstant();
    	departureScheduled := self.currentTariffStopData.currentTariffStop.departureScheduled.getEInstant();
    	departureExpected := self.currentTariffStopData.currentTariffStop.departureExpected.getEInstant();
    	recordedArrivalTime := self.currentTariffStopData.currentTariffStop.recordedArrivalTime.getEInstant();
    	distanceToNextStop := self.currentTariffStopData.currentTariffStop.distanceToNextStop.value;
    	fareZone += self.currentTariffStopData.currentTariffStop.fareZone.value;
    	currentTripRef := self.currentTariffStopData.currentTripRef.value;
    }
}

mapping TICKETVALIDATION::CurrentLineResponse::currentLineToService() : SENSINACT::TicketValidationCurrentLine {
    resource := object SENSINACT::TicketValidationCurrentLineData {
    	
    	timestamp := self.currentLineData.timeStamp.getEInstant();
    	serviceName := "TicketValidationService";
    	serviceOperation := "CurrentLineData";
    	
    	lineRef := self.currentLineData.currentLine.lineRef.value;
    	lineName += self.currentLineData.currentLine.lineName.value;
    	lineShortName += self.currentLineData.currentLine.lineShortName.value;
    	lineNumber := self.currentLineData.currentLine.lineNumber.value;
    	lineCode := self.currentLineData.currentLine.lineCode.value;
    }
}

mapping TICKETVALIDATION::RazziaResponse::razziaToService() : SENSINACT::TicketValidationRazzia {
	var eClass := SENSINACT::TicketValidationRazziaData.oclAsType(ECORE::EClass);
	resource := object SENSINACT::TicketValidationRazziaData {
    	
    	timestamp := self.razziaData.timeStamp.getEInstant();
    	serviceName := "TicketValidationService";
    	serviceOperation := "RazziaData";
    	
    	razziaState := self.razziaData.razziaState.toString();
    }
}

mapping TICKETVALIDATION::VehicleDataResponse::vehicleToService() : SENSINACT::TicketValidationVehicle {
	resource := object SENSINACT::TicketValidationVehicleData {
    	
    	timestamp := self.vehicleData.timeStamp.getEInstant();
    	serviceName := "TicketValidationService";
    	serviceOperation := "VehicleData";
    	
    	vehicleRef := self.vehicleData.vehicleRef.value;
    	routeDeviation := self.vehicleData.routeDeviation.toString();
    	doorState := self.vehicleData.doorOpenState.toString();
    	movingDirectionForward := self.vehicleData.movingDirectionForward.value;
    	vehicleMode := self.vehicleData.vehicleMode.toString();
    	driverNumber := self.vehicleData.driverNumber.value;
    }
}