library ibisToSensinactLibrary;//Blackbox to convert datesimport de.jena.ibis.sensinact.mmt.util.IbisDateTimeToInstantBlackbox;modeltype XML "strict" uses type('http://www.eclipse.org/emf/2003/XMLType');modeltype ECORE "strict" uses ecore('http://www.eclipse.org/emf/2002/Ecore');modeltype COMMON uses "https://jena.de/models/ibis/common/1.0";modeltype PROVIDER uses "https://eclipse.org/sensinact/core/provider/1.0";query COMMON::IBISIPDateTime::getEInstant() : EInstant {	var time : Long := getMillis(self);	return getInstant(time).oclAsType(EInstant);}query COMMON::IBISIPDate::getEInstant() : EInstant {	var time : Long := getMillis(self);	return getInstant(time).oclAsType(EInstant);}query getENow() : EInstant {	return getNow().oclAsType(EInstant);}helper toMetadataEntry(feature : ECORE::EStructuralFeature, friendlyServiceName : String, unit : String, hide : String, type : String): PROVIDER::FeatureMetadata {	var entry := object PROVIDER::FeatureMetadata {		key := feature;		value := toMetadata(friendlyServiceName + "-" + feature.name, unit, hide, type);	};	return entry;	}helper toMetadata(friendlyNameParam : String, unit : String, hide : String, type : String): PROVIDER::ResourceValueMetadata {	var res := object PROVIDER::ResourceValueMetadata {		extra += toMetadataValueMap("friendlyname", friendlyNameParam);		if(unit != null and unit != ""){			extra += toMetadataValueMap("unit", unit);			extra += toMetadataValueMap("sensorthings.unit.name", unit);		};		if(hide.oclIsUndefined().not()){			extra += toMetadataValueMap("sensorthings.hide", hide);		};		if(type.oclIsUndefined().not()){			extra += toMetadataValueMap("sensorthings.datastream.type", type);		};		timestamp := getENow();	};		return res;}helper toMetadataValueMap(theKey : String, theValue : String): PROVIDER::MetadataValueMap {	var entry := object PROVIDER::MetadataValueMap{	   key := theKey;	   value := toMetadataValue(theValue)    };	return entry;}helper toMetadataValue(theValue : String): PROVIDER::MetadataValue {	var entry := object PROVIDER::MetadataValue{		timestamp := getENow();		value := theValue;	};	return entry;}helper toAdmin(name : String) : PROVIDER::Admin {	var admin := object PROVIDER::Admin {		friendlyName := name;	};	return admin;}