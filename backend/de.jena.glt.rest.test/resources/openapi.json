{
	"openapi": "3.0.1",
	"info": {
		"title": "GLT REST API",
		"description": "This API can be used to interact with central building control systems",
		"contact": {
			"email": "rene.pasold@jena.de"
		},
		"version": "1.0"
	},
	"servers": [
		{
			"url": "/rest/v1",
			"description": "REST API v1.0"
		}
	],
	"paths": {
		"/alarms/text/{type}/{id}": {
			"put": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will update alarms text of type to the specified text id.",
				"operationId": "bulkTextUpdate",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "List of alarm ids to update",
					"content": {
						"*/*": {
							"schema": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success, returns changed ids"
					},
					"404": {
						"description": "Alarm does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/alarms/{id}": {
			"get": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will return alarm with specified definition id.",
				"operationId": "getAlarm",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Alarm does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"put": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will update alarm with specified id.",
				"operationId": "updateAlarm",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/AlarmRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Alarm does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will create alarm with specified id.",
				"operationId": "createAlarm",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/AlarmRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"409": {
						"description": "Alarm exists"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/alarms/instructions/{id}": {
			"get": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will return alarm instruction with specified alarm id.",
				"operationId": "getAlarmInstructions",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Alarm id does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"put": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will update instruction for alarm with specified id.",
				"operationId": "updateInstructions",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstructionsPojo"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Alarm does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/alarms": {
			"get": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will return all alarm definition ids.",
				"operationId": "getAlarms",
				"parameters": [
					{
						"name": "expanded",
						"in": "query",
						"schema": {
							"uniqueItems": true,
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "regex",
						"in": "query",
						"schema": {
							"type": "string",
							"default": ""
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/alarms/text/{id}": {
			"get": {
				"tags": [
					"Alarm Definitions"
				],
				"description": "Will return all ids which use the given text id.",
				"operationId": "usage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "expanded",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar/alarm/{alarmId}": {
			"get": {
				"tags": [
					"Calendar"
				],
				"description": "Get calendar events for an alarm [in a range of a given type].",
				"operationId": "getEventsForAlarm",
				"parameters": [
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CalendarEventPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"Calendar"
				],
				"description": "Create a calendar event for an alarm.",
				"operationId": "createEventForAlarm",
				"parameters": [
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CalenderEventRequest"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar/site/{siteId}": {
			"get": {
				"tags": [
					"Calendar"
				],
				"description": "Get calendar events for an alarm [in a range of a given type].",
				"operationId": "getEventsForSite",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeAlarms",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CalendarEventPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"Calendar"
				],
				"description": "Create a calendar event for a site.",
				"operationId": "createEventForSite",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CalenderEventRequest"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar/{id}": {
			"put": {
				"tags": [
					"Calendar"
				],
				"description": "Update a calendar event.",
				"operationId": "updateEvent",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CalenderEventRequest"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"delete": {
				"tags": [
					"Calendar"
				],
				"description": "Delete a calendar event.",
				"operationId": "deleteEvent",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar": {
			"get": {
				"tags": [
					"Calendar"
				],
				"description": "Get calendar events [in a range].",
				"operationId": "getEvents",
				"parameters": [
					{
						"name": "siteIds",
						"in": "query",
						"description": "filter by site",
						"schema": {
							"uniqueItems": true,
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CalendarEventPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar/{time}": {
			"get": {
				"tags": [
					"Calendar"
				],
				"description": "Get calendar events at a given point in time [within a grace period/ms].",
				"operationId": "getEventsAtTime",
				"parameters": [
					{
						"name": "siteIds",
						"in": "query",
						"description": "filter by site",
						"schema": {
							"uniqueItems": true,
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "time",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "grace",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": 1000
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CalendarEventPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar/alarm/{alarmId}/{time}": {
			"get": {
				"tags": [
					"Calendar"
				],
				"description": "Get calendar events for an alarm at a given point in time [within a grace period/ms]",
				"operationId": "getEventsForAlarm_1",
				"parameters": [
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "time",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "grace",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": 1000
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CalendarEventPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/calendar/site/{siteId}/{time}": {
			"get": {
				"tags": [
					"Calendar"
				],
				"description": "Get calendar events for a site at a given point in time [within a grace period/ms]",
				"operationId": "getEventsForSite_1",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "time",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "grace",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": 1000
						}
					},
					{
						"name": "includeAlarms",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CalendarEventPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/{ownerType}/{ownerId}": {
			"get": {
				"tags": [
					"Comments"
				],
				"description": "Get comments for a given owner type (alarm, site ...).",
				"operationId": "getForAlarm",
				"parameters": [
					{
						"name": "ownerType",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "ownerId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CommentPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"Comments"
				],
				"description": "Create a comment for a given comment owner.",
				"operationId": "createCommentForOwner",
				"parameters": [
					{
						"name": "ownerType",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "ownerId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CommentRequest"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/{id}": {
			"put": {
				"tags": [
					"Comments"
				],
				"description": "Update a comment.",
				"operationId": "updateComment",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CommentRequest"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"delete": {
				"tags": [
					"Comments"
				],
				"description": "Delete a comment.",
				"operationId": "deleteComment",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/{ownerType}": {
			"get": {
				"tags": [
					"Comments"
				],
				"description": "Get ids for which comments created in given time range for a given owner type and type.",
				"operationId": "getCommentedOn",
				"parameters": [
					{
						"name": "ownerType",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "integer",
										"format": "int64"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/filter/{offset}-{limit}": {
			"get": {
				"tags": [
					"Comments"
				],
				"description": "Get comments created in given time range for a given owner types and types.",
				"operationId": "getFiltered",
				"parameters": [
					{
						"name": "offset",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 50
						}
					},
					{
						"name": "ownerType",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "ownerId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int64"
							}
						}
					},
					{
						"name": "includeOwnerChildren",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "author",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "status",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CommentPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/filter/authors": {
			"get": {
				"tags": [
					"Comments"
				],
				"description": "Get unique authors of comments created in given time range for a given owner types and types.",
				"operationId": "getFilteredAuthors",
				"parameters": [
					{
						"name": "ownerType",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "ownerId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int64"
							}
						}
					},
					{
						"name": "includeChildren",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "status",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"uniqueItems": true,
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/filter/count": {
			"get": {
				"tags": [
					"Comments"
				],
				"description": "Get number of comments created in given time range for a given owner types and types.",
				"operationId": "getFilteredCount",
				"parameters": [
					{
						"name": "ownerType",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "ownerId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int64"
							}
						}
					},
					{
						"name": "includeChildren",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "author",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "status",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"format": "int64"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/comment/{id}/status": {
			"post": {
				"tags": [
					"Comments"
				],
				"description": "Update a comments status.",
				"operationId": "updateStatus",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"description": "Status name",
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StatusPojo"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/devices/buildings": {
			"get": {
				"tags": [
					"Devices"
				],
				"operationId": "getBuildingNames",
				"parameters": [
					{
						"name": "buildingId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int64"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"additionalProperties": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/devices/devices": {
			"get": {
				"tags": [
					"Devices"
				],
				"operationId": "getDeviceName",
				"parameters": [
					{
						"name": "deviceId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int64"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"additionalProperties": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/devices": {
			"get": {
				"tags": [
					"Devices"
				],
				"description": "Will return a collection of devices with their corresponding status.",
				"operationId": "getDevices",
				"parameters": [
					{
						"name": "flat",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/devices/count": {
			"get": {
				"tags": [
					"Devices"
				],
				"description": "Will return count of devices by status (AVAILABLE, UNAVAILABLE).",
				"operationId": "getDevicesCount",
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"additionalProperties": {
										"type": "integer",
										"format": "int64"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/diag/alarms/mismatched": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Will return alarms with mismatching site id.",
				"operationId": "getAlarmsWithMismatchedSites",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/audit": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Returns audit-log entries.",
				"operationId": "getAuditLog",
				"parameters": [
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 100
						}
					},
					{
						"name": "offset",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ChangeItem"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/audit/count": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Returns number of audit-log entries.",
				"operationId": "getAuditLogCount",
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"format": "int64"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/diag/texts/duplicate": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Will return all texts that are duplicates.",
				"operationId": "getDuplicateTexts",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/csv/fields": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Will return csv fields.",
				"operationId": "getFields",
				"parameters": [
					{
						"name": "importableOnly",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/diag/alarms/undocumented": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Will return alarms that have incomplete information.",
				"operationId": "getUndocumentedAlarms",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/diag/texts/unused": {
			"get": {
				"tags": [
					"Meta Information"
				],
				"description": "Will return all texts that are unused.",
				"operationId": "getUnusedTexts",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/meta/csv": {
			"post": {
				"tags": [
					"Meta Information"
				],
				"description": "Upload metadata in csv format.",
				"operationId": "importFromCsv",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "delimiter",
						"in": "query",
						"schema": {
							"type": "string",
							"default": ","
						}
					},
					{
						"name": "dryRun",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"description": "CSV file content",
					"content": {
						"application/octet-stream": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/datalogs/content/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Datalogs"
				],
				"description": "Will return datalog contents for the site and its given identifier (mostly point ids) within the specified timeframe.",
				"operationId": "getDatalogContent",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"description": "The site_id",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The identifier",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/datalogs/info/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Datalogs"
				],
				"description": "Will return datalog infos for the site and its given identifiers (mostly point ids). Will return all datalogs for all points connected to this site if no point ids are given.",
				"operationId": "getDatalogInfo",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"description": "The site_id",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The identifier",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/datalogs/update/{systemId}": {
			"put": {
				"tags": [
					"Monitoring: Datalogs"
				],
				"description": "Will update datalog for site with specified systemId and optionally specific identifiers.",
				"operationId": "updateDatalogContent",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/points/history/{offset}-{limit}": {
			"get": {
				"tags": [
					"Monitoring: Points"
				],
				"description": "Will return point changes for input filters.",
				"operationId": "getChangelog",
				"parameters": [
					{
						"name": "offset",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 50
						}
					},
					{
						"name": "siteId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "external",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "author",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/points/history/count": {
			"get": {
				"tags": [
					"Monitoring: Points"
				],
				"description": "Will return count of point changes for input filters.",
				"operationId": "getChangelogCount",
				"parameters": [
					{
						"name": "siteId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "external",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "author",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/points/history/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Points"
				],
				"description": "Will return stored point values for site.",
				"operationId": "getPointValueHistory",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "latestOnly",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					},
					{
						"name": "includeComments",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/points/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Points"
				],
				"description": "Will return current point values for site.",
				"operationId": "getPointValues",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "string",
							"enum": [
								"hardware",
								"setpoint",
								"virtual",
								"timeSchedule",
								"unknown"
							]
						}
					},
					{
						"name": "valueType",
						"in": "query",
						"schema": {
							"type": "string",
							"enum": [
								"analog",
								"digital",
								"unknown"
							]
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/points/update/{systemId}": {
			"put": {
				"tags": [
					"Monitoring: Points"
				],
				"description": "Will update points for site with specified systemId and optionally specific identifiers.",
				"operationId": "updatePointValues",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/count": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return active count for given alarm ids.",
				"operationId": "getAlarmCount",
				"parameters": [
					{
						"name": "alarmId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/{siteId}/state/{state}/count": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return count for alarms in state for the given site id. [ON, OFF, UNKNOWN]",
				"operationId": "getAlarmCount_1",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/{siteId}/state/count": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return count for alarms in state for the given site id. ",
				"operationId": "getAlarmCountByState",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/state/count": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all alarm counts for states.",
				"operationId": "getAlarmCountByState_1",
				"parameters": [
					{
						"name": "siteIds",
						"in": "query",
						"description": "filter by site",
						"schema": {
							"uniqueItems": true,
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "summary",
						"in": "query",
						"description": "summary only",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/{siteId}/count": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return count for alarms for the given site id.",
				"operationId": "getAlarmCountForSite",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/state/{state}/count": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all alarm logs for the given state. [ON, OFF, UNKNOWN]",
				"operationId": "getAlarmForStateCount",
				"parameters": [
					{
						"name": "state",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeline/alarm/{alarmId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all alarm logs for the given alarm id including superseded.",
				"operationId": "getAlarmLogTimeline",
				"parameters": [
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 30
						}
					},
					{
						"name": "offset",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeline/alarm/{alarmId}/statistics": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return statistics for alarm logs with the given alarm id.",
				"operationId": "getAlarmLogTimelineStatistics",
				"parameters": [
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "unit",
						"in": "query",
						"schema": {
							"type": "string",
							"default": "month"
						}
					},
					{
						"name": "timezone",
						"in": "query",
						"schema": {
							"type": "string",
							"default": "UTC"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all active alarm logs.",
				"operationId": "getAlarmLogs",
				"parameters": [
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all current alarm logs for the given site id.",
				"operationId": "getAlarmLogs_1",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/state/{state}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all alarm logs for the given state. [ON, OFF, UNKNOWN]",
				"operationId": "getAlarmLogsForState",
				"parameters": [
					{
						"name": "state",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/state": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all alarm logs for the given states. [ON, OFF, UNKNOWN]",
				"operationId": "getAlarmLogsForStates",
				"parameters": [
					{
						"name": "state",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeline/site/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all alarm logs for the given site id including superseded.",
				"operationId": "getAlarmLogsTimeline",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/{siteId}/state/{state}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return alarms in state for the given site id. [ON, OFF, UNKNOWN]",
				"operationId": "getAlarmsForState",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/alarms/{siteId}/state": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return alarms in any of the states for the given site id. [ON, OFF, UNKNOWN]",
				"operationId": "getAlarmsForStates",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"in": "query",
						"description": "filter by alarms in given state type",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/entities/{systemId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will get monitoring setting for site with specified id.",
				"operationId": "getEntityMonitoring",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/entities/{systemId}/{type}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will get monitored identifiers for site with specified id and given entity type.",
				"operationId": "getEntityMonitoring_1",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "type",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"TIMESCHEDULE",
								"DATALOG",
								"ALARM",
								"ANALOG_SETPOINT",
								"ANALOG_HARDWARE",
								"ANALOG_VIRTUAL",
								"DIGITAL_SETPOINT",
								"DIGITAL_HARDWARE",
								"DIGITAL_VIRTUAL"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"put": {
				"tags": [
					"Monitoring"
				],
				"description": "Will update monitoring for site with specified id, entity type and optionally specific identifier.",
				"operationId": "updateEntityMonitoring",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "type",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"TIMESCHEDULE",
								"DATALOG",
								"ALARM",
								"ANALOG_SETPOINT",
								"ANALOG_HARDWARE",
								"ANALOG_VIRTUAL",
								"DIGITAL_SETPOINT",
								"DIGITAL_HARDWARE",
								"DIGITAL_VIRTUAL"
							]
						}
					},
					{
						"name": "identifier",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "name",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "isIncluded",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/logs/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all logs for the given site id.",
				"operationId": "getLog",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "No logs found"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/logs": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all logs.",
				"operationId": "getLogs",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/logs/state/{state}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all logs in a given state.",
				"operationId": "getLogsForState",
				"parameters": [
					{
						"name": "state",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/statistics/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return statistics for alarm ids for the given site id.",
				"operationId": "getStatistics",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/status": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all status logs.",
				"operationId": "getStatusLogs",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"put": {
				"tags": [
					"Monitoring"
				],
				"description": "Will update or insert status log.",
				"operationId": "upsertStatusLog",
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/StatusLogRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/status/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all status logs for the given site id.",
				"operationId": "getStatusLogs_1",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "No status logs found"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeline/status/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all status logs for the given site id including superseded.",
				"operationId": "getStatusLogsTimeline",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64",
							"default": -1
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/tracked/{siteId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return tracked alarm ids for the given site id.",
				"operationId": "getTracked",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/flaky/{siteId}/{alarmId}": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return true if given alarm on given site is flaky.",
				"operationId": "isFlaky",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "from",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "to",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "threshold",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 3
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/logs/state": {
			"get": {
				"tags": [
					"Monitoring"
				],
				"description": "Will return all logs in any of the given states.",
				"operationId": "logsForStates",
				"parameters": [
					{
						"name": "state",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/refresh/{siteId}": {
			"put": {
				"tags": [
					"Monitoring"
				],
				"description": "Update the alarm states of the site with the given id from the GLT's buffer.",
				"operationId": "refreshSite",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"403": {
						"description": "No permission"
					},
					"404": {
						"description": "Not found"
					},
					"500": {
						"description": "Failed"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/state/{siteId}": {
			"put": {
				"tags": [
					"Monitoring"
				],
				"description": "Update the state of the alarm with the given id to the given state.",
				"operationId": "updateAlarmState",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateStateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"400": {
						"description": "Invalid request"
					},
					"404": {
						"description": "Alarm not found"
					},
					"500": {
						"description": "Failed"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/block/history/{offset}-{limit}": {
			"get": {
				"tags": [
					"Monitoring: Time Schedule Blocks"
				],
				"description": "Will return block changes for input filters.",
				"operationId": "getChangelog_1",
				"parameters": [
					{
						"name": "offset",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 50
						}
					},
					{
						"name": "siteId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "external",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "author",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/block/history/count": {
			"get": {
				"tags": [
					"Monitoring: Time Schedule Blocks"
				],
				"description": "Will return count of block changes for input filters.",
				"operationId": "getChangelogCount_1",
				"parameters": [
					{
						"name": "siteId",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "external",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "author",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "from",
						"in": "query",
						"description": "The date to set as the earliest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "1970-01-01T00:00:00Z"
						},
						"example": "2025-01-01T00:00:00.000+00:00"
					},
					{
						"name": "to",
						"in": "query",
						"description": "The date to set as the latest entry to be returned.",
						"schema": {
							"type": "string",
							"format": "date-time",
							"default": "9999-01-01T00:00:00Z"
						},
						"example": "2025-12-31T00:00:00.000+00:00"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/block/history/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Time Schedule Blocks"
				],
				"description": "Will return stored time schedule blocks for site.",
				"operationId": "getTimeScheduleBlockHistory",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "latestOnly",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/block/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Time Schedule Blocks"
				],
				"description": "Will return current time schedule states for site.",
				"operationId": "getTimeScheduleBlocks",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/block/update/{systemId}": {
			"put": {
				"tags": [
					"Monitoring: Time Schedule Blocks"
				],
				"description": "Will update time schedule blocks for site with specified systemId and optionally specific identifiers.",
				"operationId": "updateTimeScheduleBlocks",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/state/history/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Time Schedule States"
				],
				"description": "Will return stored time schedule states for site.",
				"operationId": "getTimeScheduleStateHistory",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "latestOnly",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/state/{systemId}": {
			"get": {
				"tags": [
					"Monitoring: Time Schedule States"
				],
				"description": "Will return current time schedule states for site.",
				"operationId": "getTimeScheduleStates",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/monitoring/timeschedule/state/update/{systemId}": {
			"put": {
				"tags": [
					"Monitoring: Time Schedule States"
				],
				"description": "Will update time schedule states for site with specified systemId and optionally specific identifiers.",
				"operationId": "updateTimeScheduleStates",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/record/point": {
			"post": {
				"tags": [
					"Record / GLTView interoperability"
				],
				"description": "Records a point change",
				"operationId": "point",
				"requestBody": {
					"description": "A point change record",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PointRecord"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"basicAuth": [
						]
					}
				]
			}
		},
		"/record/timeschedule": {
			"post": {
				"tags": [
					"Record / GLTView interoperability"
				],
				"description": "Records a time schedule (block) change",
				"operationId": "timeschedule",
				"requestBody": {
					"description": "A time schedule change record",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TimeScheduleRecord"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"basicAuth": [
						]
					}
				]
			}
		},
		"/conf/{key}": {
			"get": {
				"tags": [
					"Settings / Configuration"
				],
				"description": "Will return all settings.",
				"operationId": "get",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"put": {
				"tags": [
					"Settings / Configuration"
				],
				"description": "Will create or update setting with given key.",
				"operationId": "createOrUpdate",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "value",
					"content": {
						"text/plain": {
							"schema": {
								"type": "string"
							}
						},
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"304": {
						"description": "No change"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"Settings / Configuration"
				],
				"description": "Will delete setting with given key.",
				"operationId": "create",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "value",
					"content": {
						"text/plain": {
							"schema": {
								"type": "string"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"409": {
						"description": "Key exists"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"delete": {
				"tags": [
					"Settings / Configuration"
				],
				"description": "Will delete setting with given key.",
				"operationId": "delete",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/conf": {
			"get": {
				"tags": [
					"Settings / Configuration"
				],
				"description": "Will return setting with given key.",
				"operationId": "getAllSettings",
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/sites/{id}": {
			"get": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will return site with specified id.",
				"operationId": "getSite",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "shallow",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"put": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will update site with specified id.",
				"operationId": "updateSite",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The site data to update with",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SiteRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will create site with specified id.",
				"operationId": "createSite",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of the site, has to be a 3-digit short (leading zeros)",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The site data",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SiteRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"409": {
						"description": "Site exists"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"delete": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will delete site with specified id.",
				"operationId": "deleteSite",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/sites/contacts/{id}": {
			"get": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will return contacts for the site with specified id.",
				"operationId": "getContacts",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/sites/contracts/{id}": {
			"get": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will return contracts for the site with specified id.",
				"operationId": "getContracts",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "Filter by facility type/class with given regular expression",
						"schema": {
							"type": "string",
							"default": ".*"
						}
					},
					{
						"name": "activeOnly",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/sites": {
			"get": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will return all site ids.",
				"operationId": "getSites",
				"parameters": [
					{
						"name": "expanded",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					},
					{
						"name": "excluded",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/sites/facilities/{id}": {
			"get": {
				"tags": [
					"Site Meta Information"
				],
				"description": "Will return tech facilities for the site with specified id.",
				"operationId": "getTechFacilities",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "Filter by facility type/class with given regular expression",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "activeOnly",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/status/auth": {
			"get": {
				"tags": [
					"REST Status"
				],
				"description": "Will return authorization status information regarding the service.",
				"operationId": "getAuthStatus",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/status": {
			"get": {
				"tags": [
					"REST Status"
				],
				"description": "Will return status information regarding the service.",
				"operationId": "getStatus",
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/system/entities": {
			"post": {
				"tags": [
					"System Information"
				],
				"description": "Will return control entity information.",
				"operationId": "getEntities",
				"requestBody": {
					"description": "List of objects describing which control entities should be retrieved",
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/EntityRequest"
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/system/entities/{systemId}/{type}": {
			"get": {
				"tags": [
					"System Information"
				],
				"description": "Will return entities of given type for site optionally filtered by identifier.",
				"operationId": "getEntitiesByType",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "type",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"TIMESCHEDULE",
								"DATALOG",
								"ALARM",
								"ANALOG_SETPOINT",
								"ANALOG_HARDWARE",
								"ANALOG_VIRTUAL",
								"DIGITAL_SETPOINT",
								"DIGITAL_HARDWARE",
								"DIGITAL_VIRTUAL"
							]
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/system/entities/{systemId}/types": {
			"get": {
				"tags": [
					"System Information"
				],
				"description": "Will return entities of given types for site optionally filtered by identifier.",
				"operationId": "getEntitiesByTypes",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "type",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"enum": [
									"TIMESCHEDULE",
									"DATALOG",
									"ALARM",
									"ANALOG_SETPOINT",
									"ANALOG_HARDWARE",
									"ANALOG_VIRTUAL",
									"DIGITAL_SETPOINT",
									"DIGITAL_HARDWARE",
									"DIGITAL_VIRTUAL"
								]
							}
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/system/entities/{systemId}": {
			"get": {
				"tags": [
					"System Information"
				],
				"description": "Will return control entity information for the site.",
				"operationId": "getSystemEntities",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "depth",
						"in": "query",
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/system/entities/{systemId}/{type}/{id}": {
			"get": {
				"tags": [
					"System Information"
				],
				"description": "Will return control entity information for site with specified id.",
				"operationId": "getSystemEntity",
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "type",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Site does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/system/import": {
			"post": {
				"tags": [
					"System Information"
				],
				"description": "Import of systems from external configuration (e.g. Unitron data folder)",
				"operationId": "importSystems",
				"parameters": [
					{
						"name": "cleanUp",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "dryRun",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "skipIp",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					},
					{
						"name": "skipName",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": true
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/texts/cleanup": {
			"put": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will purge texts that are not referenced.",
				"operationId": "cleanupTexts",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
							"admin"
						]
					}
				]
			}
		},
		"/texts/new": {
			"post": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will create specified text.",
				"operationId": "createText",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TextRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/texts/{id}": {
			"get": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will return text with specified id.",
				"operationId": "getText",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Text does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"put": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will update text with specified id.",
				"operationId": "updateText",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TextRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Unchanged"
					},
					"404": {
						"description": "Text does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
							"admin"
						]
					}
				]
			},
			"delete": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will delete specified text.",
				"operationId": "deleteText",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Text does not exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/texts": {
			"get": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will return all text ids.",
				"operationId": "getTextIds",
				"parameters": [
					{
						"name": "expanded",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/texts/of/{type}": {
			"get": {
				"tags": [
					"Text Definitions"
				],
				"description": "Will return all texts of given type.",
				"operationId": "getTexts",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "condition, instruction, cause, consequence, sl24schedule",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expanded",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/groups": {
			"get": {
				"tags": [
					"User Management"
				],
				"description": "Will return all groups.",
				"operationId": "getGroups",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"User Management"
				],
				"description": "Will add group with given name.",
				"operationId": "addGroup",
				"requestBody": {
					"description": "The role name",
					"content": {
						"*/*": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"409": {
						"description": "Role with given name exists"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/groups/{groupName}/members": {
			"put": {
				"tags": [
					"User Management"
				],
				"description": "Will add role to group with given name",
				"operationId": "addMemberToGroup",
				"parameters": [
					{
						"name": "groupName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The role name",
					"content": {
						"*/*": {
							"schema": {
								"type": "string"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Group or role doesn't exist"
					},
					"406": {
						"description": "Not a group"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/roles/{roleName}/properties/{key}": {
			"put": {
				"tags": [
					"User Management"
				],
				"description": "Will add property to role with given name.",
				"operationId": "addPropertyToRole",
				"parameters": [
					{
						"name": "roleName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "value",
					"content": {
						"text/plain": {
							"schema": {
								"type": "string"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"403": {
						"description": "No Permission"
					},
					"404": {
						"description": "Role doesn't exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"delete": {
				"tags": [
					"User Management"
				],
				"description": "Will add property to role with given name",
				"operationId": "removePropertyFromRole",
				"parameters": [
					{
						"name": "roleName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Role doesn't exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/users": {
			"get": {
				"tags": [
					"User Management"
				],
				"description": "Will return all groups.",
				"operationId": "getUsers",
				"responses": {
					"200": {
						"description": "Success"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"post": {
				"tags": [
					"User Management"
				],
				"description": "Will add user with given id or auth.",
				"operationId": "addUser",
				"parameters": [
					{
						"name": "internal",
						"in": "query",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"description": "Representation: id or - in case internal - Basic Auth Header ('Basic &lt;base64&gt;').",
					"content": {
						"text/plain": {
							"schema": {
								"type": "string",
								"default": ""
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Success"
					},
					"409": {
						"description": "Role with given id exists"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin": {
			"get": {
				"tags": [
					"User Management"
				],
				"description": "Will return authorization status information regarding the service.",
				"operationId": "currentRole",
				"responses": {
					"200": {
						"description": "Success"
					},
					"204": {
						"description": "Not logged in"
					},
					"400": {
						"description": "Not a valid user"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/{identifier}": {
			"get": {
				"tags": [
					"User Management"
				],
				"description": "Will return user with given identifier (uid or name depending on discovery).",
				"operationId": "getRole",
				"parameters": [
					{
						"name": "identifier",
						"in": "path",
						"description": "uid or name of role, the latter only if discovery = true",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "mandatory",
						"in": "query",
						"description": "Set to true if an error code should be returned if the role does not exist",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "discovery",
						"in": "query",
						"description": "Set to true if identifier can be something other than the users id.",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"204": {
						"description": "User does not exist (mandatory = false)"
					},
					"404": {
						"description": "User does not exist (mandatory = true)"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/groups/{groupName}/members/{roleName}": {
			"delete": {
				"tags": [
					"User Management"
				],
				"description": "Will remove role from group with given name.",
				"operationId": "removeMemberFromGroup",
				"parameters": [
					{
						"name": "groupName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "roleName",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"404": {
						"description": "Group or role doesn't exist"
					},
					"406": {
						"description": "Not a group"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/useradmin/{name}": {
			"delete": {
				"tags": [
					"User Management"
				],
				"description": "Will add user with given name.",
				"operationId": "removeRole",
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"304": {
						"description": "Role could not be removed"
					},
					"404": {
						"description": "Role with given name doesn't exist"
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/watcher/suspects/{siteId}.{alarmId}": {
			"put": {
				"tags": [
					"Watcher Service"
				],
				"description": "Update a suspect.",
				"operationId": "updateSuspect",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			},
			"delete": {
				"tags": [
					"Watcher Service"
				],
				"description": "Delete a suspect.",
				"operationId": "deleteSuspect",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "alarmId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/watcher/suspects": {
			"get": {
				"tags": [
					"Watcher Service"
				],
				"description": "Will return a collection of alarms, that occur repeatedly as per settings (flaky).",
				"operationId": "getSuspects",
				"parameters": [
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "recognized",
						"in": "query",
						"description": "Also show recognized alarms that are tracked",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/SuspectPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		},
		"/watcher/suspects/{siteId}": {
			"get": {
				"tags": [
					"Watcher Service"
				],
				"description": "Will return a collection of alarms for site, that occur repeatedly as per settings (flaky).",
				"operationId": "getSuspects_1",
				"parameters": [
					{
						"name": "siteId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "filter by alarms with active events of given type, prefix with '-' to remove those alarms instead of listing only those. [e.g. 'snooze', '-snooze']",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "flags",
						"in": "query",
						"description": "filter alarms with given flags [0x01: SL24Ready, 0x02: SL24Relevant, 0x04: SL24RelevantNight, 0x08: Heating, 0x10: Sanitarian, 0x20: Cooling, 0x40: Ventilation, 0x80: MSR, 0x100: Electrical]: included if matching at least 1 bit in each flags parameter!",
						"schema": {
							"type": "array",
							"items": {
								"type": "integer",
								"format": "int32"
							}
						}
					},
					{
						"name": "recognized",
						"in": "query",
						"description": "Also show recognized alarms that are tracked",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"default": {
						"description": "default response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/SuspectPojo"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"bearerAuth": [
						]
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"AlarmRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"prioritySummer": {
						"type": "integer",
						"format": "int32"
					},
					"priorityWinter": {
						"type": "integer",
						"format": "int32"
					},
					"flags": {
						"type": "integer",
						"format": "int32"
					},
					"description": {
						"type": "integer",
						"format": "int32"
					},
					"consequence": {
						"type": "integer",
						"format": "int32"
					},
					"cause": {
						"type": "integer",
						"format": "int32"
					},
					"sl24Schedule": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"AlarmId": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "string"
					},
					"buildingId": {
						"type": "string"
					},
					"alarmId": {
						"type": "string"
					}
				}
			},
			"AlarmPojo": {
				"type": "object",
				"properties": {
					"id": {
						"$ref": "#/components/schemas/AlarmId"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "integer",
						"format": "int32"
					},
					"flags": {
						"type": "integer",
						"format": "int32"
					},
					"consequence": {
						"type": "integer",
						"format": "int32"
					},
					"cause": {
						"type": "integer",
						"format": "int32"
					},
					"sl24schedule": {
						"type": "integer",
						"format": "int32"
					},
					"prioritySummer": {
						"type": "integer",
						"format": "int32"
					},
					"priorityWinter": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"InstructionsPojo": {
				"type": "object",
				"properties": {
					"alarmId": {
						"type": "string"
					},
					"relations": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RelationPojo"
						}
					}
				}
			},
			"RelationPojo": {
				"type": "object",
				"properties": {
					"condition": {
						"type": "integer",
						"format": "int32"
					},
					"instructions": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			},
			"CalenderEventRequest": {
				"type": "object",
				"properties": {
					"from": {
						"type": "string",
						"format": "date-time"
					},
					"to": {
						"type": "string",
						"format": "date-time"
					},
					"note": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				}
			},
			"CalendarEventPojo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"from": {
						"type": "string",
						"format": "date-time"
					},
					"to": {
						"type": "string",
						"format": "date-time"
					},
					"note": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"author": {
						"type": "string"
					},
					"alarmId": {
						"type": "string"
					},
					"siteId": {
						"type": "string"
					}
				}
			},
			"CommentRequest": {
				"type": "object",
				"properties": {
					"content": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				}
			},
			"CommentPojo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"author": {
						"type": "string"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"content": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"ownerId": {
						"type": "integer",
						"format": "int64"
					},
					"ownerType": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/StatusPojo"
					}
				}
			},
			"StatusPojo": {
				"type": "object",
				"properties": {
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"author": {
						"type": "string"
					}
				}
			},
			"GltAlarmLogPojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "string"
					},
					"alarmId": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"ChangeItem": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"source": {
						"type": "string"
					},
					"operation": {
						"type": "string"
					},
					"target": {
						"type": "string"
					},
					"change": {
						"type": "string"
					},
					"author": {
						"type": "string"
					}
				}
			},
			"DatalogContentPojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"valueType": {
						"type": "string",
						"enum": [
							"ANALOG",
							"DIGITAL",
							"UNKNOWN"
						]
					},
					"datalogType": {
						"type": "string",
						"enum": [
							"LEGACY",
							"ROLLING",
							"SINGLE_SHOT",
							"UNKNOWN"
						]
					},
					"pointNumber": {
						"type": "integer",
						"format": "int32"
					},
					"pointName": {
						"type": "string"
					},
					"pointId": {
						"type": "integer",
						"format": "int32"
					},
					"entriesT": {
						"type": "array",
						"items": {
							"type": "string",
							"format": "date-time"
						}
					},
					"entriesV": {
						"type": "array",
						"items": {
							"type": "number"
						}
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"timeController": {
						"type": "string",
						"format": "date-time"
					},
					"counter": {
						"type": "integer",
						"format": "int32"
					},
					"value": {
						"type": "number",
						"format": "float"
					},
					"isUnknown": {
						"type": "boolean"
					},
					"isError": {
						"type": "boolean"
					},
					"comments": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CommentPojo"
						}
					}
				}
			},
			"PointValuePojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"value": {
						"type": "number",
						"format": "float"
					},
					"valuePrev": {
						"type": "number",
						"format": "float"
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"overrideState": {
						"type": "integer",
						"format": "int32"
					},
					"isUnknown": {
						"type": "boolean"
					},
					"comments": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CommentPojo"
						}
					}
				}
			},
			"AlarmLogTimelinePojo": {
				"type": "object",
				"properties": {
					"alarmLogs": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/GltAlarmLogPojo"
						}
					},
					"total": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"StatisticEntry": {
				"type": "object",
				"properties": {
					"timeWindow": {
						"$ref": "#/components/schemas/TimeWindow"
					},
					"values": {
						"type": "object",
						"additionalProperties": {
							"type": "integer",
							"format": "int64"
						}
					}
				}
			},
			"TimeWindow": {
				"type": "object",
				"properties": {
					"timestamp": {
						"type": "integer",
						"format": "int64"
					},
					"identifier": {
						"type": "string"
					},
					"unit": {
						"type": "string",
						"enum": [
							"YEAR",
							"MONTH",
							"WEEK",
							"DAY"
						]
					},
					"zoneId": {
						"type": "string"
					}
				}
			},
			"EntityMonitoringSettingsPojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"identifier": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"included": {
						"type": "boolean"
					},
					"type": {
						"type": "string",
						"enum": [
							"TIMESCHEDULE",
							"DATALOG",
							"ALARM",
							"ANALOG_SETPOINT",
							"ANALOG_HARDWARE",
							"ANALOG_VIRTUAL",
							"DIGITAL_SETPOINT",
							"DIGITAL_HARDWARE",
							"DIGITAL_VIRTUAL"
						]
					}
				}
			},
			"GltLogPojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"latestRingbufferTimestamp": {
						"type": "integer",
						"format": "int64"
					},
					"lastAccessTimeMs": {
						"type": "integer",
						"format": "int64"
					},
					"averageAccessTimeMs": {
						"type": "number",
						"format": "double"
					},
					"timestamp": {
						"type": "integer",
						"format": "int64"
					},
					"stateSince": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"GltStatusLogPojo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int64"
					},
					"siteId": {
						"type": "string"
					},
					"type": {
						"type": "integer",
						"format": "int32"
					},
					"severity": {
						"type": "integer",
						"format": "int32"
					},
					"message": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"UpdateStateRequest": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "string"
					},
					"alarmId": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"severity": {
						"type": "integer",
						"format": "int32"
					},
					"timestamp": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"StatusLogRequest": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int64"
					},
					"siteId": {
						"type": "string"
					},
					"type": {
						"type": "integer",
						"format": "int32"
					},
					"severity": {
						"type": "integer",
						"format": "int32"
					},
					"message": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"TimeScheduleBlockPojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"block": {
						"type": "integer",
						"format": "int32"
					},
					"exceptionStartDay": {
						"type": "integer",
						"format": "int32"
					},
					"exceptionStartMonth": {
						"type": "integer",
						"format": "int32"
					},
					"exceptionEndDay": {
						"type": "integer",
						"format": "int32"
					},
					"exceptionEndMonth": {
						"type": "integer",
						"format": "int32"
					},
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"times": {
						"type": "object",
						"additionalProperties": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"isUnknown": {
						"type": "boolean"
					},
					"comments": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CommentPojo"
						}
					}
				}
			},
			"TimeScheduleStatePojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"value": {
						"type": "number",
						"format": "float"
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"isUnknown": {
						"type": "boolean"
					},
					"comments": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CommentPojo"
						}
					}
				}
			},
			"PointRecord": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"address": {
						"type": "string"
					},
					"newValue": {
						"type": "number",
						"format": "float"
					},
					"oldValue": {
						"type": "number",
						"format": "float"
					},
					"overrideStatus": {
						"type": "integer",
						"format": "int32"
					},
					"note": {
						"type": "string"
					},
					"author": {
						"type": "string"
					}
				}
			},
			"TimeScheduleRecord": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"address": {
						"type": "string"
					},
					"oldValue": {
						"type": "string"
					},
					"newValue": {
						"type": "string"
					},
					"note": {
						"type": "string"
					},
					"author": {
						"type": "string"
					}
				}
			},
			"JsonNode": {
				"type": "object"
			},
			"AddressPojo": {
				"type": "object",
				"properties": {
					"address": {
						"type": "string"
					},
					"community": {
						"type": "string"
					},
					"county": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"district": {
						"type": "string"
					},
					"extended": {
						"type": "string"
					},
					"federalState": {
						"type": "string"
					},
					"location": {
						"type": "string"
					},
					"number": {
						"type": "string"
					},
					"postBox": {
						"type": "string"
					},
					"postCode": {
						"type": "string"
					},
					"street": {
						"type": "string"
					},
					"representation": {
						"type": "string"
					}
				}
			},
			"SitePojo": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"prefix": {
						"type": "string"
					},
					"ip": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"port": {
						"type": "integer",
						"format": "int32"
					},
					"lon": {
						"type": "number",
						"format": "double"
					},
					"lat": {
						"type": "number",
						"format": "double"
					},
					"shallow": {
						"type": "boolean"
					},
					"excluded": {
						"type": "boolean"
					},
					"externalId": {
						"type": "integer",
						"format": "int64"
					},
					"address": {
						"$ref": "#/components/schemas/AddressPojo"
					},
					"source": {
						"type": "string",
						"enum": [
							"INTERNAL",
							"EXTERNAL"
						]
					},
					"children": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/SitePojo"
						}
					},
					"flags": {
						"type": "integer",
						"format": "int32"
					},
					"cylonNetwork": {
						"type": "boolean"
					}
				}
			},
			"SiteRequest": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"port": {
						"type": "integer",
						"format": "int32"
					},
					"externalId": {
						"type": "integer",
						"format": "int64"
					},
					"ip": {
						"type": "string"
					},
					"lon": {
						"type": "number",
						"format": "double"
					},
					"lat": {
						"type": "number",
						"format": "double"
					},
					"excluded": {
						"type": "boolean"
					},
					"flags": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"ContactPojo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"task": {
						"type": "string"
					},
					"additional": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"salutation": {
						"type": "string"
					},
					"shortName": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/AddressPojo"
					},
					"phones": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PhonePojo"
						}
					},
					"emails": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"comments": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"PhonePojo": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"number": {
						"type": "string"
					}
				}
			},
			"ContractPojo": {
				"type": "object",
				"properties": {
					"art": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"displayname": {
						"type": "string"
					},
					"conclusionDate": {
						"type": "string",
						"format": "date-time"
					},
					"comment": {
						"type": "string"
					},
					"contacts": {
						"uniqueItems": true,
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ContactPojo"
						}
					},
					"customerId": {
						"type": "string"
					},
					"end": {
						"type": "string",
						"format": "date-time"
					},
					"number": {
						"type": "string"
					},
					"partner": {
						"$ref": "#/components/schemas/ContactPojo"
					},
					"referee": {
						"$ref": "#/components/schemas/ContactPojo"
					},
					"start": {
						"type": "string",
						"format": "date-time"
					},
					"state": {
						"type": "string"
					},
					"subject": {
						"type": "string"
					},
					"termination": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"TechFacilityPojo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"facilityClass": {
						"type": "string"
					},
					"facilityClassName": {
						"type": "string"
					},
					"room": {
						"type": "string"
					},
					"constructionYear": {
						"type": "integer",
						"format": "int32"
					},
					"launchDate": {
						"type": "string",
						"format": "date-time"
					},
					"contracts": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ContractPojo"
						}
					}
				}
			},
			"EntityPojo": {
				"type": "object",
				"properties": {
					"entity": {
						"type": "string"
					}
				}
			},
			"EntityRequest": {
				"type": "object",
				"properties": {
					"systemId": {
						"type": "integer",
						"format": "int32"
					},
					"type": {
						"type": "string",
						"enum": [
							"POINT",
							"ALARM",
							"DATALOG",
							"FIELDCONTROLLER",
							"COMMSCONTROLLER",
							"TIMESCHEDULE"
						]
					},
					"identifier": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"CylonNetworkPojo": {
				"type": "object",
				"properties": {
					"entity": {
						"type": "string"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"siteId": {
						"type": "integer",
						"format": "int32"
					},
					"directory": {
						"type": "string"
					},
					"ip": {
						"type": "string"
					},
					"port": {
						"type": "integer",
						"format": "int32"
					},
					"count": {
						"type": "integer",
						"format": "int32"
					},
					"children": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/EntityPojo"
						}
					},
					"summary": {
						"type": "object",
						"additionalProperties": {
							"type": "integer",
							"format": "int64"
						}
					}
				}
			},
			"Text": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"TextRequest": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"type": {
						"type": "string"
					}
				}
			},
			"RolePojo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"ROLE",
							"USER",
							"GROUP"
						]
					},
					"groups": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"authorization": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"members": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"properties": {
						"type": "object",
						"additionalProperties": {
							"type": "object"
						}
					}
				}
			},
			"SuspectPojo": {
				"type": "object",
				"properties": {
					"siteId": {
						"type": "string"
					},
					"alarmId": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"timestamp": {
						"type": "integer",
						"format": "int64"
					},
					"severity": {
						"type": "integer",
						"format": "int32"
					},
					"recognized": {
						"type": "string",
						"format": "date-time"
					},
					"by": {
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			},
			"basicAuth": {
				"type": "http",
				"scheme": "Basic"
			}
		}
	}
}
