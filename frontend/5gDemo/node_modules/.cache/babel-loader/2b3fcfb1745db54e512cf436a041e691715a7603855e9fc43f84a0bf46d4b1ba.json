{"ast":null,"code":"import L from 'leaflet';\nimport { Icon } from 'leaflet/src/layer/marker/Icon';\nimport { findRealParent } from 'vue2-leaflet/src/utils/utils.js';\nexport default {\n  props: {\n    marker: {\n      type: Object,\n      default: undefined\n    },\n    alignment: {\n      type: String,\n      default: 'center'\n    },\n    offsetX: {\n      type: Number,\n      default: 0\n    },\n    offsetY: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      leafMarker: undefined\n    };\n  },\n  mounted() {\n    this.leafMarker = L.marker([this.marker.lat, this.marker.lng], {\n      icon: new CustomMarker({\n        html: this.$el\n      })\n    });\n    this.leafMarker.addTo(findRealParent(this.$parent).mapObject);\n    this.computeAlignment(this.alignment);\n  },\n  watch: {\n    alignment(alignment) {\n      this.computeAlignment(alignment);\n    },\n    marker(marker) {\n      this.leafMarker.setLatLng(marker);\n    }\n  },\n  methods: {\n    computeAlignment(alignment) {\n      const div = this.$el;\n      let x = 0;\n      let y = 0;\n      switch (alignment) {\n        case 'top':\n          y -= div.offsetHeight;\n          x -= div.offsetHeight / 2;\n          break;\n        case 'bottom':\n          x = x - div.offsetWidth / 2;\n          break;\n        case 'left':\n          x = x - div.offsetWidth;\n          y = y - div.offsetHeight / 2;\n          break;\n        case 'right':\n          y = y - div.offsetHeight / 2;\n          break;\n        case 'center':\n          x -= div.offsetWidth / 2;\n          y -= div.offsetHeight / 2;\n          break;\n        case 'topleft':\n          x = -div.offsetWidth;\n          y = -div.offsetHeight;\n          break;\n        case 'topright':\n          y = y - div.offsetHeight;\n          break;\n        case 'bottomleft':\n          x = x - div.offsetWidth;\n          break;\n        case 'bottomright':\n          break;\n        default:\n          throw new Error('Invalid alignment type of custom marker!');\n      }\n      div.style.left = x + this.offsetX + 'px';\n      div.style.top = y + this.offsetY + 'px';\n    }\n  },\n  beforeDestroy() {\n    if (this.leafMarker) {\n      this.leafMarker.remove();\n    }\n  }\n};\nexport var CustomMarker = Icon.extend({\n  options: {},\n  createIcon: function () {\n    const div = document.createElement('div');\n    div.appendChild(this.options.html);\n    return div;\n  }\n});","map":{"version":3,"mappings":"AAMA;AACA;AACA;AAEA;EACAA;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAC;IACA;IACAE;MACAH;MACAC;IACA;IACAG;MACAJ;MACAC;IACA;EACA;EACAI;IACA;MACAC;IACA;EACA;EACAC;IACA;MACAC;QAAAC;MAAA;IACA;IACA;IACA;EACA;EACAC;IACAR;MACA;IACA;IACAH;MACA;IACA;EACA;EACAY;IACAC;MACA;MACA;MACA;MACA;QACA;UACAC;UACAC;UACA;QACA;UACAA;UACA;QACA;UACAA;UACAD;UACA;QACA;UACAA;UACA;QACA;UACAC;UACAD;UACA;QACA;UACAC;UACAD;UACA;QACA;UACAA;UACA;QACA;UACAC;UACA;QACA;UACA;QACA;UACA;MAAA;MAEAC;MACAA;IACA;EACA;EACAC;IACA;MACA;IACA;EACA;AACA;AAEA;EACAC;EACAC;IACA;IACAH;IACA;EACA;AACA","names":["props","marker","type","default","alignment","offsetX","offsetY","data","leafMarker","mounted","icon","html","watch","methods","computeAlignment","y","x","div","beforeDestroy","options","createIcon"],"sourceRoot":"node_modules/vue-leaflet-custom-marker","sources":["vue-leaflet-custom-marker.vue"],"sourcesContent":["<template>\n  <div class=\"marker-wrapper\">\n    <slot />\n  </div>\n</template>\n<script>\nimport L from 'leaflet'\nimport { Icon } from 'leaflet/src/layer/marker/Icon'\nimport { findRealParent } from 'vue2-leaflet/src/utils/utils.js'\n\nexport default {\n  props: {\n    marker: {\n      type: Object,\n      default: undefined\n    },\n    alignment: {\n      type: String,\n      default: 'center'\n    },\n    offsetX: {\n      type: Number,\n      default: 0\n    },\n    offsetY: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      leafMarker: undefined\n    }\n  },\n  mounted () {\n    this.leafMarker = L.marker([this.marker.lat, this.marker.lng], {\n      icon: new CustomMarker({ html: this.$el })\n    })\n    this.leafMarker.addTo(findRealParent(this.$parent).mapObject)\n    this.computeAlignment(this.alignment)\n  },\n  watch: {\n    alignment (alignment) {\n      this.computeAlignment(alignment)\n    },\n    marker (marker) {\n      this.leafMarker.setLatLng(marker)\n    }\n  },\n  methods: {\n    computeAlignment (alignment) {\n      const div = this.$el\n      let x = 0\n      let y = 0\n      switch (alignment) {\n        case 'top':\n          y -= div.offsetHeight\n          x -= div.offsetHeight / 2\n          break\n        case 'bottom':\n          x = x - div.offsetWidth / 2\n          break\n        case 'left':\n          x = x - div.offsetWidth\n          y = y - div.offsetHeight / 2\n          break\n        case 'right':\n          y = y - div.offsetHeight / 2\n          break\n        case 'center':\n          x -= div.offsetWidth / 2\n          y -= div.offsetHeight / 2\n          break\n        case 'topleft':\n          x = -div.offsetWidth\n          y = -div.offsetHeight\n          break\n        case 'topright':\n          y = y - div.offsetHeight\n          break\n        case 'bottomleft':\n          x = x - div.offsetWidth\n          break\n        case 'bottomright':\n          break\n        default:\n          throw new Error('Invalid alignment type of custom marker!')\n      }\n      div.style.left = x + this.offsetX + 'px'\n      div.style.top = y + this.offsetY + 'px'\n    }\n  },\n  beforeDestroy () {\n    if (this.leafMarker) {\n      this.leafMarker.remove()\n    }\n  }\n}\n\nexport var CustomMarker = Icon.extend({\n  options: {},\n  createIcon: function () {\n    const div = document.createElement('div')\n    div.appendChild(this.options.html)\n    return div\n  }\n})\n</script>\n<style scoped>\n.marker-wrapper {\n  position: absolute;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}