{"version":3,"file":"js/app.89488626.js","mappings":"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","sources":["webpack://sensor_thing_api_map/./src/App.vue","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue","webpack://sensor_thing_api_map/src/components/Modal/InfoBox.vue","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue?654c","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue?7875","webpack://sensor_thing_api_map/src/App.vue","webpack://sensor_thing_api_map/./src/App.vue?0751","webpack://sensor_thing_api_map/./src/App.vue?0e40","webpack://sensor_thing_api_map/./src/views/Map.vue","webpack://sensor_thing_api_map/./openapi/client/base.ts","webpack://sensor_thing_api_map/./openapi/client/common.ts","webpack://sensor_thing_api_map/./openapi/client/api.ts","webpack://sensor_thing_api_map/./openapi/client/configuration.ts","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue","webpack://sensor_thing_api_map/./src/components/Location.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue","webpack://sensor_thing_api_map/src/components/Thing.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue?2ce9","webpack://sensor_thing_api_map/./src/components/Thing.vue?050e","webpack://sensor_thing_api_map/src/components/Location.vue","webpack://sensor_thing_api_map/./src/components/Location.vue?b980","webpack://sensor_thing_api_map/./src/components/Location.vue?7275","webpack://sensor_thing_api_map/./src/components/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/Observations.vue","webpack://sensor_thing_api_map/./src/config/base.ts","webpack://sensor_thing_api_map/src/components/Observations.vue","webpack://sensor_thing_api_map/./src/components/Observations.vue?9a96","webpack://sensor_thing_api_map/./src/components/Observations.vue?a087","webpack://sensor_thing_api_map/src/components/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?9199","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?f6d9","webpack://sensor_thing_api_map/src/components/PropertiesView/Properties.vue","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?91bf","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?3e6e","webpack://sensor_thing_api_map/src/views/Map.vue","webpack://sensor_thing_api_map/./src/views/Map.vue?21bd","webpack://sensor_thing_api_map/./src/views/Map.vue?a06f","webpack://sensor_thing_api_map/./src/components/Tree.vue","webpack://sensor_thing_api_map/src/components/Tree.vue","webpack://sensor_thing_api_map/./src/components/Tree.vue?8e00","webpack://sensor_thing_api_map/./src/components/Tree.vue?d009","webpack://sensor_thing_api_map/./src/views/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/StreamTree.vue","webpack://sensor_thing_api_map/./src/helper/DatastreamGroups.ts","webpack://sensor_thing_api_map/./src/helper/SVGPaths.ts","webpack://sensor_thing_api_map/src/components/StreamTree.vue","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?a6f9","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?0bbc","webpack://sensor_thing_api_map/./src/components/Datapoint.vue","webpack://sensor_thing_api_map/src/components/Datapoint.vue","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?1558","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?a94e","webpack://sensor_thing_api_map/./src/components/MqttList.vue","webpack://sensor_thing_api_map/src/components/MqttList.vue","webpack://sensor_thing_api_map/./src/components/MqttList.vue?fd5c","webpack://sensor_thing_api_map/./src/components/MqttList.vue?099c","webpack://sensor_thing_api_map/src/views/Datastreams.vue","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?a5b5","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?3cb3","webpack://sensor_thing_api_map/./src/router/index.ts","webpack://sensor_thing_api_map/./src/i18n.ts","webpack://sensor_thing_api_map/./src/store/ObsStore.ts","webpack://sensor_thing_api_map/./src/store/SimpleStore.ts","webpack://sensor_thing_api_map/./src/main.ts","webpack://sensor_thing_api_map/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://sensor_thing_api_map/webpack/bootstrap","webpack://sensor_thing_api_map/webpack/runtime/chunk loaded","webpack://sensor_thing_api_map/webpack/runtime/compat get default export","webpack://sensor_thing_api_map/webpack/runtime/define property getters","webpack://sensor_thing_api_map/webpack/runtime/get javascript chunk filename","webpack://sensor_thing_api_map/webpack/runtime/global","webpack://sensor_thing_api_map/webpack/runtime/hasOwnProperty shorthand","webpack://sensor_thing_api_map/webpack/runtime/make namespace object","webpack://sensor_thing_api_map/webpack/runtime/node module decorator","webpack://sensor_thing_api_map/webpack/runtime/publicPath","webpack://sensor_thing_api_map/webpack/runtime/jsonp chunk loading","webpack://sensor_thing_api_map/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view'),(_vm.showInfoBox)?_c('InfoBox',{attrs:{\"infoUri\":_vm.infoUri||''}}):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('b-modal',{attrs:{\"has-modal-card\":\"\",\"trap-focus\":\"\",\"destroy-on-hide\":true,\"aria-role\":\"dialog\",\"aria-label\":\"Example Modal\",\"close-button-aria-label\":\"Close\",\"aria-modal\":\"\"},model:{value:(_vm.active),callback:function ($$v) {_vm.active=$$v},expression:\"active\"}},[_c('div',{staticClass:\"card\",staticStyle:{\"width\":\"auto\"}},[_c('div',{staticClass:\"card-content\"},[(_vm.infoUri)?_c('iframe',{attrs:{\"src\":_vm.infoUri,\"name\":\"InfoIFrame\",\"title\":\"infobox\",\"id\":\"infoFrame\"}}):_vm._e()])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\nCopyright (c) 2023 Contributors to the  Eclipse Foundation.\nThis program and the accompanying materials are made\navailable under the terms of the Eclipse Public License 2.0\nwhich is available at https://www.eclipse.org/legal/epl-2.0/\nSPDX-License-Identifier: EPL-2.0\n\nContributors: Smart City Jena\n\n-->\n<template>\n\n  <b-modal\n    v-model=\"active\"\n    has-modal-card\n    trap-focus\n    :destroy-on-hide=\"true\"\n    aria-role=\"dialog\"\n    aria-label=\"Example Modal\"\n    close-button-aria-label=\"Close\"\n    aria-modal>\n\n\n    <div class=\"card\" style=\"width: auto\">\n      <div class=\"card-content\">\n        <iframe v-if=\"infoUri\" :src=\"infoUri\" name=\"InfoIFrame\" title=\"infobox\" id=\"infoFrame\"></iframe>\n      </div>\n    </div>\n\n  </b-modal>\n\n\n</template>\n<script lang=\"ts\">\n\nimport {Vue, Component, Prop} from \"vue-property-decorator\";\n\n@Component\nexport default class InfoBox extends Vue {\n  @Prop({default: () => ''}) readonly infoUri: string | undefined;\n  private active = true;\n\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#infoFrame {\n  width: 800px;\n  height: 600px;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InfoBox.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InfoBox.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./InfoBox.vue?vue&type=template&id=ad1a9aca&scoped=true\"\nimport script from \"./InfoBox.vue?vue&type=script&lang=ts\"\nexport * from \"./InfoBox.vue?vue&type=script&lang=ts\"\nimport style0 from \"./InfoBox.vue?vue&type=style&index=0&id=ad1a9aca&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ad1a9aca\",\n  null\n  \n)\n\nexport default component.exports","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n<template>\n  <div id=\"app\">\n    <router-view/>\n    <InfoBox v-if=\"showInfoBox\" :infoUri=\"infoUri||''\"></InfoBox>\n  </div>\n\n</template>\n\n<style lang=\"scss\">\n#app {\n  /*font-family: Avenir, Helvetica, Arial, sans-serif;*/\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n\n  a {\n    font-weight: bold;\n    color: #2c3e50;\n\n    &.router-link-exact-active {\n      color: #42b983;\n    }\n  }\n}\n</style>\n\n<script lang=\"ts\">\n\nimport {Vue} from \"vue-property-decorator\";\nimport axios from \"axios\";\nimport Component from \"vue-class-component\";\nimport InfoBox from \"@/components/Modal/InfoBox.vue\";\n\n@Component({\n  components:{\n    InfoBox\n  }\n})\nexport default class App extends Vue {\n\n  private showInfoBox = false;\n  private infoUri = null;\n\n  async mounted() {\n    try {\n      const base = window.location.protocol + '//' + window.location.host;\n      const config = (await axios.get(`config/config.json`)).data;\n      if (config && config.INFO_CHECK_URI && config.INFO_CHECK_URI) {\n        this.infoUri = config.INFO_BASE_URI;\n        this.showInfoBox = (await axios.get(config.INFO_CHECK_URI)).status == 200\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n}\n</script>\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=57c49c0e\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=57c49c0e&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\"},[_c('div',{staticClass:\"url rim colspan2\"},[_c('b-field',[_c('b-input',{model:{value:(_vm.baseurl),callback:function ($$v) {_vm.baseurl=$$v},expression:\"baseurl\"}}),_c('b-button',{attrs:{\"type\":\"is-primary\",\"outlined\":\"\"},on:{\"click\":function($event){return _vm.connect()}}},[_vm._v(\"Connect\")])],1)],1),_c('div',{staticClass:\"map_holder rim\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution}}),_vm._l((_vm.points),function(point){return _c('l-polygon',{key:point['@iot.id'],attrs:{\"lat-lngs\":_vm.pol(point.location)},on:{\"click\":function($event){return _vm.markerWasClicked(point)}}},[_c('l-marker',{attrs:{\"lat-lng\":_vm.res(point.location.features[0].geometry.coordinates[0])}},[_c('l-icon',{attrs:{\"class-name\":\"custom-div-icon\"}},[_c('div',{staticClass:\"marker-pin\",class:{'selected':point['@iot.id']==_vm.selected}},[_c('i',{staticClass:\"mdi mdi-radio-tower\"})])])],1)],1)})],2)],1),_c('div',{staticClass:\"sidebar_holder rim\"},[_c('router-view',{attrs:{\"id\":\"sidebar\"},on:{\"TreeSelect\":(data)=>_vm.treeData=data}})],1),_c('div',{staticClass:\"propertie_holder rim\"},[_c('PropertiesC',{attrs:{\"data\":_vm.treeData}})],1),_c('div',{staticClass:\"corner\"})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://sensors.bgs.ac.uk/FROST-Server\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Datastream\n */\nexport interface Datastream {\n    /**\n     * The Id of the datastream\n     * @type {number}\n     * @memberof Datastream\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Datastream\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Datastream\n     */\n    'Observations'?: Array<Observation>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastream\n     */\n    'Observations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {ObservedProperty}\n     * @memberof Datastream\n     */\n    'ObservedProperty'?: ObservedProperty;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'ObservedProperty@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Sensor}\n     * @memberof Datastream\n     */\n    'Sensor'?: Sensor;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Sensor@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Thing}\n     * @memberof Datastream\n     */\n    'Thing'?: Thing;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Thing@iot.navigationLink'?: string;\n    /**\n     * A description of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'description'?: string;\n    /**\n     * The label or name of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'name'?: string;\n    /**\n     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observationType'?: string;\n    /**\n     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observedArea'?: string;\n    /**\n     * The range of phenomenon times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'phenomenonTime'?: string;\n    /**\n     * \n     * @type {DatastreamProperties}\n     * @memberof Datastream\n     */\n    'properties'?: DatastreamProperties;\n    /**\n     * The range of result times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'resultTime'?: string;\n    /**\n     * \n     * @type {DatastreamUnitOfMeasurement}\n     * @memberof Datastream\n     */\n    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;\n}\n/**\n * \n * @export\n * @interface DatastreamProperties\n */\nexport interface DatastreamProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface DatastreamUnitOfMeasurement\n */\nexport interface DatastreamUnitOfMeasurement {\n    /**\n     * The full name of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'name'?: string;\n    /**\n     * The symbol of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'symbol'?: string;\n    /**\n     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'defintion'?: string;\n}\n/**\n * \n * @export\n * @interface Datastreams\n */\nexport interface Datastreams {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastreams\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastreams\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Datastreams\n     */\n    'value'?: Array<Datastream>;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterest\n */\nexport interface FeatureOfInterest {\n    /**\n     * The Id of the feature of interest\n     * @type {number}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'feature\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'encodingType'?: string;\n    /**\n     * The detailed description of the feature of interest, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'feature'?: string;\n    /**\n     * The label or name of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {FeatureOfInterestProperties}\n     * @memberof FeatureOfInterest\n     */\n    'properties'?: FeatureOfInterestProperties;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterestProperties\n */\nexport interface FeatureOfInterestProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the feature of interest type, set to \\'SEN_LOC\\' (Sensor Location) or \\'BOREHOLE\\'\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'type'?: string;\n    /**\n     * The elevation (Z) of the sensor location (type \\'SEN_LOC\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the sensor location is effective (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'to_date'?: string;\n    /**\n     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sobi_bgs_id'?: number;\n    /**\n     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'borehole_id'?: number;\n    /**\n     * The drilled length of the borehole in metres (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'drilled_length'?: number;\n    /**\n     * An alternative name by which the borehole is known (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference'?: string;\n    /**\n     * Indicates the source of the \\'reference\\' property (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference_type'?: string;\n    /**\n     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'publish_yn'?: string;\n}\n/**\n * \n * @export\n * @interface FeaturesOfInterest\n */\nexport interface FeaturesOfInterest {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<FeatureOfInterest>}\n     * @memberof FeaturesOfInterest\n     */\n    'value'?: Array<FeatureOfInterest>;\n}\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * The Id of the location\n     * @type {number}\n     * @memberof Location\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Location\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Location\n     */\n    'Things'?: Array<Thing>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Location\n     */\n    'Things@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.nextLink'?: string;\n    /**\n     * A description of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'location\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'encodingType'?: string;\n    /**\n     * The location, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'location'?: string;\n    /**\n     * The label or name of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {LocationProperties}\n     * @memberof Location\n     */\n    'properties'?: LocationProperties;\n}\n/**\n * \n * @export\n * @interface LocationProperties\n */\nexport interface LocationProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The name of the site to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'site'?: string;\n    /**\n     * The name of the observatory to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'observatory'?: string;\n    /**\n     * The elevation (Z) of the location\n     * @type {number}\n     * @memberof LocationProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the location is effective\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the location is no longer effective, where it is not set the location is still active\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'to_date'?: string;\n    /**\n     * Any additional information about the location where available\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'comments'?: string;\n    /**\n     * A flag to indicate whether the location is the active location for a thing (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this location can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Locations\n */\nexport interface Locations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Locations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Locations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Locations\n     */\n    'value'?: Array<Location>;\n}\n/**\n * \n * @export\n * @interface Observation\n */\nexport interface Observation {\n    /**\n     * The Id of the observation\n     * @type {number}\n     * @memberof Observation\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Observation\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {ObservationParameters}\n     * @memberof Observation\n     */\n    'parameters'?: ObservationParameters;\n    /**\n     * The time when the observation happened\n     * @type {string}\n     * @memberof Observation\n     */\n    'phenomenonTime'?: string;\n    /**\n     * The estimated value of the observed property\n     * @type {string}\n     * @memberof Observation\n     */\n    'result'?: string;\n    /**\n     * A description of the quality of the result\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultQuality'?: string;\n    /**\n     * The time the result was generated\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultTime'?: string;\n    /**\n     * The time period during which the result can be used\n     * @type {string}\n     * @memberof Observation\n     */\n    'validTime'?: string;\n}\n/**\n * \n * @export\n * @interface ObservationParameters\n */\nexport interface ObservationParameters {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Observations\n */\nexport interface Observations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Observations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Observations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Observations\n     */\n    'value'?: Array<Observation>;\n}\n/**\n * \n * @export\n * @interface ObservedProperties\n */\nexport interface ObservedProperties {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof ObservedProperties\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof ObservedProperties\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<ObservedProperty>}\n     * @memberof ObservedProperties\n     */\n    'value'?: Array<ObservedProperty>;\n}\n/**\n * \n * @export\n * @interface ObservedProperty\n */\nexport interface ObservedProperty {\n    /**\n     * The Id of the observed property\n     * @type {number}\n     * @memberof ObservedProperty\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'definition'?: string;\n    /**\n     * A description of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'description'?: string;\n    /**\n     * The label or name of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ObservedPropertyProperties}\n     * @memberof ObservedProperty\n     */\n    'properties'?: ObservedPropertyProperties;\n}\n/**\n * \n * @export\n * @interface ObservedPropertyProperties\n */\nexport interface ObservedPropertyProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the observed property (Measured or Calculated)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of the formula used to derive values for the observed property (data type \\'Calculated\\' only)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'formula'?: string;\n    /**\n     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensor\n */\nexport interface Sensor {\n    /**\n     * The Id of the sensor type\n     * @type {number}\n     * @memberof Sensor\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Sensor\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'metadata\\' property\n     * @type {string}\n     * @memberof Sensor\n     */\n    'encodingType'?: string;\n    /**\n     * A detailed description of the sensor type (style based on \\'encodingType\\' property)\n     * @type {string}\n     * @memberof Sensor\n     */\n    'metadata'?: string;\n    /**\n     * The label or name of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {SensorProperties}\n     * @memberof Sensor\n     */\n    'properties'?: SensorProperties;\n}\n/**\n * \n * @export\n * @interface SensorProperties\n */\nexport interface SensorProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'complex_data_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensors\n */\nexport interface Sensors {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Sensors\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Sensors\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Sensor>}\n     * @memberof Sensors\n     */\n    'value'?: Array<Sensor>;\n}\n/**\n * \n * @export\n * @interface Thing\n */\nexport interface Thing {\n    /**\n     * The Id of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.id'?: string;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Thing\n     */\n    'Datastreams'?: Array<Datastream>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Datastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Thing\n     */\n    'Locations'?: Array<Location>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Locations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.nextLink'?: string;\n    /**\n     * A description of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'description'?: string;\n    /**\n     * The label or name of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ThingProperties}\n     * @memberof Thing\n     */\n    'properties'?: ThingProperties;\n}\n/**\n * \n * @export\n * @interface ThingProperties\n */\nexport interface ThingProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the type of thing, set to \\'SENSOR\\'\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'type'?: string;\n    /**\n     * The serial number of the physical sensor currently installed if known\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'serial_no'?: string;\n    /**\n     * Indicates how data from the thing is captured (Telemetered, Manual)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_capture'?: string;\n    /**\n     * The earliest observation date for which data from the thing will be available in the API\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'observation_start_date'?: string;\n    /**\n     * The elevation (Z) of the thing\\'s datum\n     * @type {number}\n     * @memberof ThingProperties\n     */\n    'datum_z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the \\'datum_z\\' value\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_z_crs'?: string;\n    /**\n     * The label or name for the thing\\'s datum\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_name'?: string;\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'borehole_reference'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Things\n */\nexport interface Things {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Things\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Things\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Things\n     */\n    'value'?: Array<Thing>;\n}\n\n/**\n * DatastreamsApi - axios parameter creator\n * @export\n */\nexport const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Datastreams`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DatastreamsApi - functional programming interface\n * @export\n */\nexport const DatastreamsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DatastreamsApi - factory interface\n * @export\n */\nexport const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DatastreamsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DatastreamsApi - interface\n * @export\n * @interface DatastreamsApi\n */\nexport interface DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n}\n\n/**\n * DatastreamsApi - object-oriented interface\n * @export\n * @class DatastreamsApi\n * @extends {BaseAPI}\n */\nexport class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * FeaturesOfInterestApi - axios parameter creator\n * @export\n */\nexport const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/FeaturesOfInterest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - functional programming interface\n * @export\n */\nexport const FeaturesOfInterestApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - factory interface\n * @export\n */\nexport const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = FeaturesOfInterestApiFp(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {\n            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeaturesOfInterestApi - interface\n * @export\n * @interface FeaturesOfInterestApi\n */\nexport interface FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;\n\n}\n\n/**\n * FeaturesOfInterestApi - object-oriented interface\n * @export\n * @class FeaturesOfInterestApi\n * @extends {BaseAPI}\n */\nexport class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LocationsApi - axios parameter creator\n * @export\n */\nexport const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})/Things`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Locations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LocationsApi - functional programming interface\n * @export\n */\nexport const LocationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LocationsApi - factory interface\n * @export\n */\nexport const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LocationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {\n            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LocationsApi - interface\n * @export\n * @interface LocationsApi\n */\nexport interface LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n}\n\n/**\n * LocationsApi - object-oriented interface\n * @export\n * @class LocationsApi\n * @extends {BaseAPI}\n */\nexport class LocationsApi extends BaseAPI implements LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservationsApi - axios parameter creator\n * @export\n */\nexport const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Observations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservationsApi - functional programming interface\n * @export\n */\nexport const ObservationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservationsApi - factory interface\n * @export\n */\nexport const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {\n            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservationsApi - interface\n * @export\n * @interface ObservationsApi\n */\nexport interface ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n}\n\n/**\n * ObservationsApi - object-oriented interface\n * @export\n * @class ObservationsApi\n * @extends {BaseAPI}\n */\nexport class ObservationsApi extends BaseAPI implements ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservedPropertiesApi - axios parameter creator\n * @export\n */\nexport const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/ObservedProperties`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - functional programming interface\n * @export\n */\nexport const ObservedPropertiesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - factory interface\n * @export\n */\nexport const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservedPropertiesApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {\n            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservedPropertiesApi - interface\n * @export\n * @interface ObservedPropertiesApi\n */\nexport interface ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;\n\n}\n\n/**\n * ObservedPropertiesApi - object-oriented interface\n * @export\n * @class ObservedPropertiesApi\n * @extends {BaseAPI}\n */\nexport class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SensorsApi - axios parameter creator\n * @export\n */\nexport const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Sensors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SensorsApi - functional programming interface\n * @export\n */\nexport const SensorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SensorsApi - factory interface\n * @export\n */\nexport const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SensorsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {\n            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SensorsApi - interface\n * @export\n * @interface SensorsApi\n */\nexport interface SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;\n\n}\n\n/**\n * SensorsApi - object-oriented interface\n * @export\n * @class SensorsApi\n * @extends {BaseAPI}\n */\nexport class SensorsApi extends BaseAPI implements SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ThingsApi - axios parameter creator\n * @export\n */\nexport const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Things`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ThingsApi - functional programming interface\n * @export\n */\nexport const ThingsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ThingsApi - factory interface\n * @export\n */\nexport const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ThingsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ThingsApi - interface\n * @export\n * @interface ThingsApi\n */\nexport interface ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n}\n\n/**\n * ThingsApi - object-oriented interface\n * @export\n * @class ThingsApi\n * @extends {BaseAPI}\n */\nexport class ThingsApi extends BaseAPI implements ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return (_vm.data && _vm.data.data)?_c('div',{staticClass:\"plane is-vertical\"},[(_vm.data.type === 'FMM_LOC')?_c('Location',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_THING')?_c('Thing',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_DATASTREAM')?_c('Datastreams',{attrs:{\"data\":_vm.data.data}}):_vm._e()],1):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Location\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('encodingType'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.encodingType))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('location'))+\": \")]),(_vm.data.location)?_c('div',[_vm._v(\"[\"+_vm._s(_vm.data.location.coordinates.join(';'))+\"]\")]):_vm._e()])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Thing\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))])])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n\n<template>\n  <div class=\"t1\">\n    <b-loading :active=\"loading\" :can-cancel=\"false\" :is-full-page=\"false\"></b-loading>\n    <div v-if=\"data\">\n      <b-tabs v-model=\"activeTab\" class=\"nopad\">\n        <b-tab-item label=\"Thing\">\n          <div class=\"dtable\">\n            <perfect-scrollbar>\n              <div class=\"cap\">{{this.$i18n.t('name')}}: </div>\n              <div>{{data.name}}</div>\n              <div class=\"cap\">{{this.$i18n.t('description')}}: </div>\n              <div>{{data.description}}</div>\n            </perfect-scrollbar>\n          </div>\n        </b-tab-item>\n\n        <b-tab-item :label=\"this.$i18n.t('properties').toString()\">\n          <div class=\"dtable\">\n            <perfect-scrollbar>\n              <div class=\"item\" v-for=\"(value,key) in data.properties\" :key=\"key\">\n                <div class=\"key cap\">{{key}}:</div>\n                <div class=\"value\">{{value}}</div>\n              </div>\n            </perfect-scrollbar>\n          </div>\n        </b-tab-item>\n\n      </b-tabs>\n\n\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport { Thing} from \"../../openapi/client\";\n@Component\nexport default class ThingC extends Vue{\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data: Thing | undefined;\n\n\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n\n.cap{\n  font-style: italic;\n  font-weight: bold;\n\n}\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Thing.vue?vue&type=template&id=6e3cf614&scoped=true\"\nimport script from \"./Thing.vue?vue&type=script&lang=ts\"\nexport * from \"./Thing.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Thing.vue?vue&type=style&index=0&id=6e3cf614&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6e3cf614\",\n  null\n  \n)\n\nexport default component.exports","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n\n<template>\n  <div class=\"t1\">\n      <b-loading :active=\"loading\" :can-cancel=\"false\" :is-full-page=\"false\"></b-loading>\n      <div v-if=\"data\">\n        <b-tabs v-model=\"activeTab\" class=\"nopad\">\n          <b-tab-item label=\"Location\">\n\n            <div class=\"dtable\">\n              <perfect-scrollbar>\n                <div class=\"cap\">{{this.$i18n.t('description')}}: </div>\n                <div>{{data.description}}</div>\n                <div class=\"cap\">{{this.$i18n.t('encodingType')}}: </div>\n                <div>{{data.encodingType}}</div>\n\n                <div class=\"cap\">{{this.$i18n.t('name')}}: </div>\n                <div>{{data.name}}</div>\n\n\n                <div class=\"cap\">{{this.$i18n.t('location')}}: </div>\n                <div v-if=\"data.location\">[{{data.location.coordinates.join(';')}}]</div>\n              </perfect-scrollbar>\n            </div>\n\n          </b-tab-item>\n\n          <b-tab-item :label=\"this.$i18n.t('properties').toString()\">\n\n            <div class=\"dtable\">\n              <perfect-scrollbar>\n              <div class=\"item\" v-for=\"(value,key) in data.properties\" :key=\"key\">\n                <div class=\"key cap\">{{key}}:</div>\n                <div class=\"value\">{{value}}</div>\n              </div>\n            </perfect-scrollbar>\n            </div>\n\n          </b-tab-item>\n\n        </b-tabs>\n\n\n      </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport ThingsC from \"@/components/Thing.vue\";\n@Component({components:{\n    ThingsC\n  }})\nexport default class LocationC extends Vue{\n\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data:unknown;\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n.plane{\n\n  overflow-y: auto;\n}\n.cap{\n  font-style: italic;\n  font-weight: bold;\n\n}\n.pad{\n  padding: 0 10px;\n}\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Location.vue?vue&type=template&id=08085692&scoped=true\"\nimport script from \"./Location.vue?vue&type=script&lang=ts\"\nexport * from \"./Location.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Location.vue?vue&type=style&index=0&id=08085692&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"08085692\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",attrs:{\"id\":\"light\"},model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Datastream\"}},[(_vm.data)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.noprops),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Eigenschaften\"}},[(_vm.data.properties)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Observations\"}},[(_vm.activeTab===2)?_c('Observations',{attrs:{\"id\":_vm.data['@iot.id'],\"title\":_vm.data.name}}):_vm._e()],1)],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('div',{staticClass:\"chart\"},[_c('Bar',{staticStyle:{\"{width\":\"100%\",\"height\":\"250px}\"},attrs:{\"data\":_vm.chartdata,\"options\":_vm.chartOptions,\"css-classes\":\"chart\",\"responsive\":\"\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\nconst config= {\n  //baseUrl:window.location.origin+'/sensinact/rest',\n  //baseUrl:'http://localhost:8080/sensinact/rest',\n  baseUrl:'https://5g.data-in-motion.biz/sensinact/rest',\n\n  //baseUrl:'http://192.168.178.12:8080/sensinact/rest',\n  //baseUrl: 'https://udp-5g-broker.nomad-dmz.jena.de/sensinact/rest'\n};\n\nexport default config;\nexport function setBaseUrl(url:string){\n  config.baseUrl = url;\n}\nexport function getBaseUrl(){\n  return config.baseUrl;\n}\n\n","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n\n<template>\n  <div class=\"t1\">\n    <b-loading :active=\"loading\" :can-cancel=\"false\" :is-full-page=\"false\"></b-loading>\n    <div class=\"chart\">\n      <Bar  :data=\"chartdata\"  :options=\"chartOptions\" style=\"{width: 100%;height: 250px}\" css-classes=\"chart\" responsive/>\n    </div>\n  </div>\n</template>\nresponsive\n<script lang=\"ts\">\nimport 'chartjs-adapter-moment';\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Configuration, DatastreamsApi, Observations} from \"../../openapi/client\";\n\nimport { Bar } from 'vue-chartjs'\nimport {Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, TimeScale} from 'chart.js'\nimport moment from \"moment\";\nimport {getBaseUrl} from \"@/config/base\";\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale,TimeScale)\n\n@Component({components:{Bar}})\nexport default class ObservationsC extends Vue{\n  private loading = false;\n  @Prop() readonly id: string | undefined;\n  @Prop({default:()=>''}) readonly title: string | undefined ;\n  private observations:Observations|null = null;\n  private chartOptions:any ={\n    maxBarThickness: 2, // number (pixels)\n    barThickness: 'flex',\n    plugins:{\n      legend: {\n        display: true\n      }\n    },\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        'x': {\n          type: 'time',\n          time: {\n            displayFormats: {\n              'millisecond': 'MMM DD',\n              'second': 'MMM DD',\n              'minute': 'MMM DD',\n              'hour': 'MMM DD',\n              'day': 'MMM DD',\n              'week': 'MMM DD',\n              'month': 'MMM DD',\n              'quarter': 'MMM DD',\n              'year': 'MMM DD',\n            }\n          },\n          /*ticks: {\n            // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n            callback: function (val: any, index: any): any {\n              // Hide every 2nd tick label\n              //@ts-ignore\n              return index % 2 === 0 ? this.getLabelForValue(val) : '';\n            }\n          }*/\n        }\n      }\n  }\n  @Watch('id')\n  dataChanged(newD:any){\n    this.loadData()\n  }\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    this.loading = true;\n    try{\n      //@ts-ignore\n      this.observations = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()})).v11DatastreamsEntityIdObservationsGet(this.id!)).data;\n      console.log(this.observations)\n    }catch (e){\n      console.log(e);\n    }finally {\n      this.loading = false;\n    }\n  }\n  get chartdata(){\n    if(this.observations){\n      return {\n        labels: this.observations.value?.map(e=>moment(e.resultTime,\"YYYY-MM-DD'T'HH:mm:ss.SSSZZ\")),\n        datasets: [\n          {\n            label: this.title,\n            backgroundColor: 'rgb(36,97,162)',\n            data: this.observations.value?.map(e=>e.result)\n          }\n        ]\n      }\n    }else{\n      return {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            backgroundColor: 'rgba(36,97,162,0.81)',\n            data:  [],\n          }\n        ]\n      }\n    }\n  }\n\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n.plane{\n  position: absolute;\n  right: 15px;\n  top: 15px;\n  bottom: 15px;\n  width: 350px;\n  z-index: 500;\n  background: #ffffffc7;\n  border-radius: 24px;\n  box-shadow: 0px 0px 12px -6px #0000008c;\n}\n.cap{\n  font-style: italic;\n  font-weight: bold;\n\n}\n.chart{\n  height:250px;\n  width:100%;\n}\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Observations.vue?vue&type=template&id=03038043&scoped=true\"\nimport script from \"./Observations.vue?vue&type=script&lang=ts\"\nexport * from \"./Observations.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Observations.vue?vue&type=style&index=0&id=03038043&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"03038043\",\n  null\n  \n)\n\nexport default component.exports","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n<template>\n  <div class=\"t1\">\n    <b-loading :active=\"loading\" :can-cancel=\"false\" :is-full-page=\"false\"></b-loading>\n    <div v-if=\"data\">\n\n      <b-tabs v-model=\"activeTab\" class=\"nopad\" id=\"light\">\n        <b-tab-item label=\"Datastream\">\n          <div class=\"dtable\" v-if=\"data\">\n            <perfect-scrollbar>\n            <div class=\"item\" v-for=\"(value,key) in noprops\"  :key=\"key\">\n              <div class=\"key cap\">{{key}}:</div>\n              <div class=\"value\">{{value}}</div>\n            </div>\n            </perfect-scrollbar>\n\n\n          </div>\n        </b-tab-item>\n\n        <b-tab-item label=\"Eigenschaften\">\n          <div class=\"dtable\" v-if=\"data.properties\">\n            <perfect-scrollbar>\n            <div class=\"item\" v-for=\"(value,key) in data.properties\" :key=\"key\">\n              <div class=\"key cap\">{{key}}:</div>\n              <div class=\"value\">{{value}}</div>\n            </div>\n            </perfect-scrollbar>\n\n\n          </div>\n\n        </b-tab-item>\n        <b-tab-item label=\"Observations\">\n            <Observations v-if=\"activeTab===2\" :id=\"data['@iot.id']\" :title=\"data.name\"></Observations>\n        </b-tab-item>\n      </b-tabs>\n\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Datastream} from \"../../openapi/client\";\nimport Observations from \"@/components/Observations.vue\";\n@Component({\n  components: {Observations}\n})\nexport default class DatastreamsC extends Vue{\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data: Datastream | undefined;\n\n  @Watch('data')\n  dataChanged(newD:unknown){\n    console.log(newD)\n  }\n  get noprops(){\n    let ret:any = {};\n    for (const [key,atr] of Object.entries(this.data as object)){\n      if(key!=='properties')\n        ret[key]=atr;\n    }\n    return ret;\n  }\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n.plane{\n  position: absolute;\n  right: 15px;\n  top: 15px;\n  bottom: 15px;\n  width: 350px;\n  z-index: 500;\n  background: #ffffffc7;\n  border-radius: 24px;\n  box-shadow: 0px 0px 12px -6px #0000008c;\n}\n.cap{\n  font-style: italic;\n  font-weight: bold;\n\n}\n\n\n</style>\n<style lang=\"scss\">\n#light{\n    .tabs ul{\n      border-bottom-color: hsl(0deg 0% 35.43%);\n    }\n    nav a {\n      font-weight: 200;\n      color: #8b8b8b;\n      border-bottom-color: hsl(0deg 0% 35.43%);\n    }\n    nav .is-active a{\n      border-bottom-color: hsl(0, 1%, 70%);\n      span{\n        color: #fcfcfc!important;\n      }\n    }\n\n\n\n\n}\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=5c8bdc26&scoped=true\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=5c8bdc26&prod&scoped=true&lang=scss\"\nimport style1 from \"./Datastreams.vue?vue&type=style&index=1&id=5c8bdc26&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5c8bdc26\",\n  null\n  \n)\n\nexport default component.exports","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors:  Markus Hochstein\n-->\n\n<template>\n  <div class=\"plane is-vertical\" v-if=\"data && data.data\">\n    <Location v-if=\"data.type === 'FMM_LOC'\" :data=\"data.data\"></Location>\n    <Thing v-if=\"data.type === 'FMM_THING'\" :data=\"data.data\"></Thing>\n    <Datastreams v-if=\"data.type === 'FMM_DATASTREAM'\" :data=\"data.data\"></Datastreams>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport Location from \"@/components/Location.vue\";\nimport Thing from \"@/components/Thing.vue\";\nimport Datastreams from \"@/components/Datastreams.vue\";\n\n@Component({\n  components: {Datastreams, Location, Thing}\n})\nexport default class PropertiesC extends Vue {\n  @Prop() readonly data: any;\n\n  @Watch('data') data_changed(new_data: any) {\n    console.log('new data')\n    console.log(new_data)\n  }\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n.plane {\n  height: 100%;\n  width: 100%;\n  z-index: 500;\n  background: transparent;\n  border-radius: 2px;\n  overflow-y: auto;\n  text-align: left;\n  color: #d8d8d8;\n  position: relative;\n}\n\n.tabs a {\n  font-weight: 300;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Properties.vue?vue&type=template&id=2d8f8719&scoped=true\"\nimport script from \"./Properties.vue?vue&type=script&lang=ts\"\nexport * from \"./Properties.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Properties.vue?vue&type=style&index=0&id=2d8f8719&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2d8f8719\",\n  null\n  \n)\n\nexport default component.exports","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n\n-->\n\n<template>\n\n\n  <div class=\"grid\">\n    <div class=\"url rim colspan2\">\n      <b-field>\n        <b-input v-model=\"baseurl\"></b-input>\n        <b-button type=\"is-primary\" outlined @click=\"connect()\">Connect</b-button>\n      </b-field>\n    </div>\n    <div class=\"map_holder rim\">\n      <l-map id=\"map\" :zoom=\"zoom\" :center=\"center\">\n        <l-tile-layer :url=\"url\" :attribution=\"attribution\"></l-tile-layer>\n        <!--<l-marker  v-if=\"point.location\":key=\"point['@iot.id']\" :lat-lng=\"res(point.location.coordinates)\"\n                  @click=\"markerWasClicked(point)\">\n          <l-icon\n\n            class-name=\"custom-div-icon\"\n          >\n            <div class='marker-pin' :class=\"{'selected':point['@iot.id']==selected}\">\n\n              <i class='mdi mdi-radio-tower'></i>\n            </div>\n          </l-icon>\n\n        </l-marker>-->\n        <l-polygon v-for=\"point in points\" :lat-lngs=\"pol(point.location)\" :key=\"point['@iot.id']\" @click=\"markerWasClicked(point)\">\n          <l-marker :lat-lng=\"res(point.location.features[0].geometry.coordinates[0])\"\n                     >\n            <l-icon\n\n              class-name=\"custom-div-icon\"\n            >\n              <div class='marker-pin' :class=\"{'selected':point['@iot.id']==selected}\">\n\n                <i class='mdi mdi-radio-tower'></i>\n              </div>\n            </l-icon>\n\n          </l-marker>\n        </l-polygon>\n\n      </l-map>\n    </div>\n    <div class=\"sidebar_holder rim\">\n      <router-view id=\"sidebar\" @TreeSelect=\"(data)=>treeData=data\"></router-view>\n    </div>\n    <div class=\"propertie_holder rim\">\n      <PropertiesC :data=\"treeData\"></PropertiesC>\n    </div>\n    <div class=\"corner\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LPolygon, LTileLayer} from \"vue2-leaflet\";\nimport {LocationsApi, Location, Locations, Configuration} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\nimport {BASE_PATH} from \"../../openapi/client/base\";\nimport {getBaseUrl, setBaseUrl} from \"@/config/base\";\n\n@Component({\n  components: {\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LPolygon\n  }\n})\nexport default class Map extends Vue {\n  private url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  private attribution =\n    '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom = 10;\n\n  private center = [50.93115286, 11.60392726];\n  private markerLatLng = [55.8382551745062, -4.20119980206699]\n  private points: Array<Location> | undefined = [];\n  private selected: Location | null = {'@iot.id': undefined};\n  private treeData: unknown = null;\n  //private baseurl:string = 'https://sensors.bgs.ac.uk/FROST-Server';\n  private baseurl:string = 'http://localhost:8080/sensinact/rest';\n\n\n  async mounted() {\n    //await this.load();\n  }\n\n  async load() {\n    this.points = ((await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsGet()).data as Locations)?.value;\n  }\n\n  res(arr: any) {\n    return [arr[1], arr[0]]\n  }\n  pol(location:any){\n    return location.features[0].geometry.coordinates;\n  }\n  connect(){\n    console.log('connect')\n    setBaseUrl(this.baseurl)\n    console.log(getBaseUrl())\n    this.load();\n  }\n  markerWasClicked(point: Location) {\n\n    this.$router.push('/details/location/' + point[\"@iot.id\"])\n    //this.$route.params\n  }\n\n  @Watch('$route.params', {immediate: true})\n  params_chanded(params: any) {\n    this.selected = params.id;\n  }\n\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"@/scss/general.scss\";\n\n#map {\n  /*position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;*/\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr 350px;\n  grid-template-rows: 55px 1fr 350px;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background: #272727;\n}\n\n.rim {\n  padding: 5px;\n}\n\n.sidebar_holder {\n  grid-row: span 2;\n}\n\n.marker-pin {\n  width: 30px;\n  height: 30px;\n  border-radius: 50% 50% 50% 0;\n  background: #fffcfc;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: 50%;\n  top: 50%;\n  margin: -15px 0 0 -15px;\n  box-shadow: -8px 15px 15px 0px rgb(0 0 0 / 10%)\n}\n\n.marker-pin.selected {\n  background: $primary;\n\n  i {\n    color: #fff;\n  }\n}\n\n// to draw white circle\n.marker-pin::after {\n  content: \"\";\n  width: 24px;\n  height: 24px;\n  margin: 3px 0 0 -12px;\n  //background: #fff;\n  position: absolute;\n  border-radius: 50%;\n  transform: rotate(-45deg);\n  //box-shadow: inset 0px 0px 3px 0px #00000078;\n}\n\n// to align icon\n.custom-div-icon i {\n  position: absolute;\n  width: 22px;\n  font-size: 22px;\n  left: 0;\n  right: 0;\n  margin: -1px 3px;\n  text-align: center;\n  color: $primary;\n  transform: rotate(45deg);\n}\n\n.custom-div-icon .marker-pin.selected i {\n  color: #fff;\n}\n.colspan2{\n  grid-column: 1 / 3;\n}\n\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=5d9700d4&scoped=true\"\nimport script from \"./Map.vue?vue&type=script&lang=ts\"\nexport * from \"./Map.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Map.vue?vue&type=style&index=0&id=5d9700d4&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5d9700d4\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('perfect-scrollbar',[_c('v-treeview',{attrs:{\"treeTypes\":_vm.treeTypes,\"openAll\":_vm.openAll,\"contextItems\":_vm.contextItems},on:{\"selected\":_vm.selected,\"contextSelected\":_vm.contextSelected},model:{value:(_vm.treeData),callback:function ($$v) {_vm.treeData=$$v},expression:\"treeData\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n\n<template>\n  <div class=\"plane tree\">\n    <b-loading :active=\"loading\" :can-cancel=\"false\" :is-full-page=\"false\"></b-loading>\n    <perfect-scrollbar>\n      <v-treeview v-model=\"treeData\" :treeTypes=\"treeTypes\" @selected=\"selected\" :openAll=\"openAll\" :contextItems=\"contextItems\" @contextSelected=\"contextSelected\"></v-treeview>\n\n\n      </perfect-scrollbar>\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Configuration,\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\nimport {getBaseUrl} from \"@/config/base\";\n@Component({components:{\n    ThingsC,\n    VTreeview\n  }})\nexport default class TreeC extends Vue{\n\n  private loading = false;\n  private location:Location|null = null;\n  private openAll = true;\n  private treeTypes = [\n    {\n      type: \"#\",\n      max_children: 6,\n      max_depth: 25,\n      valid_children: [\n        \"FMM_THINGS\",\n        \"FMM_LOC\",\n        \"FMM_THING\",\n        \"FMM_DATASTREAMS\",\n        \"FMM_DATASTREAM\",\n        \"FMM_OBSERVATION\"\n      ]\n    },\n    {\n      type: \"FMM_THINGS\",\n      icon: \"fa-regular fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THING']\n    },\n    {\n      type: \"FMM_LOC\",\n      icon: \"fa-regular fa-map\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THINGS']\n    },\n    {\n      type: \"FMM_THING\",\n      icon: \"fa-solid fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAMS\"]\n    },\n    {\n      type: \"FMM_DATASTREAMS\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAM\"]\n    },\n    {\n      type: \"FMM_DATASTREAM\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_OBSERVATION\"]\n    },\n    {\n      type: \"FMM_OBSERVATION\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"FMM_PARENT_IN_LAW\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"Basic\",\n      icon: \"far fa-hospital\",\n      valid_children: [\"Top-up\"]\n    },\n    {\n      type: \"Top-up\",\n      icon: \"far fa-plus-square\",\n      valid_children: []\n    }\n  ];\n  private treeData:any = [];\n  private contextItems:any = [];\n  private selectedNode:any = null\n\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    try{\n      this.treeData = [];\n      this.loading = true;\n      //@ts-ignore\n      this.location = (await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsEntityIdGet(this.$route.params.id)).data;\n      console.log(this.location)\n      this.treeData.push({\n        id: Math.random()*100000, text: \"Location \"+this.location.name, type: \"FMM_LOC\", count: 0,\n        children: [\n          {id: Math.random()*100000, text: \"THINGS\", type: \"FMM_THINGS\", children:[]}\n        ]\n      },)\n\n    }catch (e){\n      console.log(e);\n      this.$router.push({name:'Map'})\n    }\n    finally{\n      this.loading = false;\n    }\n  }\n  @Watch('$route.params.id')\n  id_changed(){\n    this.loadData()\n  }\n  async selected(node:any){\n    this.selectedNode = node;\n    switch(node.model.type){\n      case 'FMM_LOC':\n        this.$emit('TreeSelect',{type:'FMM_LOC',data:this.location})\n        break;\n      case 'FMM_THINGS':\n          this.$emit('TreeSelect',{type:'FMM_THINGS',data:null})\n          node.model.children=[];\n          (await this.getThingsTree()).forEach((child:unknown)=>{\n            node.addNode(child)\n          })\n        break;\n      case 'FMM_THING':{\n        this.$emit('TreeSelect',{type:'FMM_THING',data: node.model._data})\n        node.model.children=[]\n        const datastreams: unknown[] = await this.getDatascreamsTree(node.model._data['@iot.id']);\n        const datastreamsNode:any = {id: Math.random()*100000, text:'DATASTREAMS', type: \"FMM_DATASTREAMS\", children: []}\n        datastreams.forEach((child:unknown)=>{\n          datastreamsNode.children.push(child);\n        })\n        node.addNode(datastreamsNode)\n        break;\n      }\n      case 'FMM_DATASTREAMS':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAMS',data:null});\n        break;\n      case 'FMM_DATASTREAM':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAM',data: node.model._data});\n        /*node.model.children=[]\n        const observations:Object[] = await this.getObservationTree(node.model._data['@iot.id'])\n        node.children = [];\n        observations.forEach((child:Object)=>{\n          node.addNode(child)\n        })*/\n        break;\n    }\n  }\n  async getThingsTree(): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const things = (await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsEntityIdThingsGet(this.$route.params.id)).data as Things\n    this.loading = false;\n    let ret:unknown[] = [];\n    things.value?.forEach((thing:Thing)=>{\n      let node = {id: Math.random()*100000, text:  (thing as Thing).name, type: \"FMM_THING\", children: [],_data:thing}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  async getDatascreamsTree(id:string): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const datastreams = (await new ThingsApi(new Configuration({basePath:getBaseUrl()})).v11ThingsEntityIdDatastreamsGet(id)).data as Datastreams\n    this.loading = false;\n    let ret:unknown[] = [];\n    datastreams.value?.forEach((datastream:Datastream)=>{\n      let node = {id: Math.random()*100000, text:  (datastream as Datastream).name, type: \"FMM_DATASTREAM\", children: [],_data:datastream}\n      ret.push(node);\n    });\n    return ret;\n  }\n  async getObservationTree(id:string): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const observations = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()})).v11DatastreamsEntityIdObservationsGet(id)).data as Observations\n    this.loading = false;\n    let ret:unknown[] = [];\n    observations.value?.forEach((observation:Observation)=>{\n      let node = {id: Math.random()*100000, text:  (observation as Observation)[\"@iot.id\"], type: \"FMM_OBSERVATION\", children: [],_data:observation}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  getTypeRule(type:any) {\n    var typeRule = this.treeTypes.filter(t => t.type == type)[0];\n    return typeRule;\n  }\n  contextSelected(command:any) {\n    switch (command) {\n      case \"Create Basic\":\n        this.selectedNode.addNode({\n          text: \"New Basic Plan\",\n          type: \"Basic\",\n          children: []\n        });\n        break;\n      case \"Create Top-up\":\n        this.selectedNode.addNode({\n          text: \"New Top-up\",\n          type: \"Top-up\",\n          children: []\n        });\n        break;\n      case \"Rename\":\n        this.selectedNode.editName();\n        break;\n      case \"Remove\":\n        break;\n    }\n  }\n\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n\n.plane{\n  height: 100%;\n  z-index: 500;\n  background: #3a3a3a;\n  border-radius: 2px;\n  overflow-y: auto;\n  text-align: left;\n  color: #d8d8d8;\n  position: relative;\n}\n.cap{\n  font-style: italic;\n  font-weight: bold;\n\n}\n.pad{\n  padding: 0 10px;\n}\n</style>\n<style lang=\"scss\">\n@import \"./../scss/general\";\nul .tree-node{\n  white-space: nowrap;\n}\nul .tree-node :hover::before {\n  background: rgba(135, 147, 161, 0.27) !important;\n}\nul .tree-node input[type=radio]:checked+label:before{\n  background: #4099ff3d !important;\n}\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Tree.vue?vue&type=template&id=e5df6f26&scoped=true\"\nimport script from \"./Tree.vue?vue&type=script&lang=ts\"\nexport * from \"./Tree.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Tree.vue?vue&type=style&index=0&id=e5df6f26&prod&scoped=true&lang=scss\"\nimport style1 from \"./Tree.vue?vue&type=style&index=1&id=e5df6f26&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e5df6f26\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\",attrs:{\"id\":\"app\"}},[_vm._m(0),_c('div',{staticClass:\"map_holder\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center,\"max-zoom\":21},on:{\"click\":_vm.deselect,\"update:center\":_vm.updateCenter,\"update:zoom\":_vm.updateZoom}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution,\"options\":{maxNativeZoom:19,\n      maxZoom:25}}}),_vm._l((_vm.viewports),function(viewport,key){return [( _vm.$route.query.enabledTraficLights && _vm.$route.query.enabledTraficLights.includes('ViewPort_'+key.toString()))?_c('l-geo-json',{key:key,attrs:{\"geojson\":viewport,\"options\":{'pointToLayer':_vm.pointToLayer},\"options-style\":_vm.styleP}}):_vm._e()]}),_vm._l((_vm.observationsGeoJsonMqtt),function(geoJsonTragicLight,key){return [( _vm.$route.query.enabledTraficLights && _vm.$route.query.enabledTraficLights.includes('TrafiCam_'+key.toString()))?_c('l-geo-json',{key:key,attrs:{\"geojson\":geoJsonTragicLight,\"options\":{'pointToLayer':_vm.pointToLayer},\"options-style\":_vm.styleP}}):_vm._e()]}),_vm._l((_vm.geojson),function(features){return _c('l-geo-json',{key:features['@iot.id']+'_area',attrs:{\"geojson\":features.location,\"options-style\":_vm.style(features['@iot.id'])}})}),(_vm.centerPoints && _vm.centerPoints.length>0)?_c('v-marker-cluster',{ref:\"clusterRef2\",attrs:{\"options\":{spiderfyDistanceMultiplier:3.2,animate:true,animateAddingMarkers:true,zoomToBoundsOnClick:false,disableClusteringAtZoom:18}}},[_vm._l((_vm.centerPoints),function(point){return [(point.location.geometry)?_c('custom-marker',{key:point['@iot.id']+'markr',attrs:{\"marker\":_vm.ret(point.location.geometry.coordinates),\"lat-lng\":_vm.ret(point.location.geometry.coordinates)},nativeOn:{\"click\":function($event){return ((ev)=>{ev.stopImmediatePropagation();_vm.markerWasClicked(point)}).apply(null, arguments)}}},[(point['@iot.id'].split('~').reverse()[0]!=='color')?_c('div',{staticClass:\"marker-pin\",class:{'selected':point===_vm.selected}},[(point['@iot.id'].split('~').reverse()[0]!='color')?_c('div',{staticClass:\"round\"},[(_vm.getPath(point['@iot.id'].split('~').reverse()[0]))?_c('svg-icon',{staticClass:\"marker_svg\",attrs:{\"type\":\"mdi\",\"size\":24,\"path\":_vm.getPath(point['@iot.id'].split('~').reverse()[0])}}):(point['@iot.id'].split('~').reverse()[0])?_c('div',{staticClass:\"svg_icon dark\",class:point['@iot.id'].split('~').reverse()[0]}):_vm._e()],1):_vm._e()]):_vm._e(),_c('div',{staticClass:\"marker-value\",class:point['@iot.id'].split('~').reverse()[0],on:{\"click\":(ev)=>{ev.stopImmediatePropagation();_vm.markerWasClicked(point)}}},[_c('Datapoint',{attrs:{\"id\":point['@iot.id'],\"unit\":'',\"is-bool\":point['@iot.id'].split('~').reverse()[0]=='conflict'}})],1)]):_vm._e()]})],2):_vm._e()],2)],1),_c('div',{staticClass:\"sidebar_holder absolute\"},[_c('perfect-scrollbar',[_c('StreamTree',{ref:\"streamTree\",on:{\"selection\":_vm.select}}),_c('MqttList',{attrs:{\"items\":_vm.mqtt_items}})],1)],1),(_vm.selected!==null)?_c('div',{staticClass:\"propertie_holder absolute\"},[_c('b-button',{staticClass:\"absbtn\",attrs:{\"type\":\"is-text\",\"rounded\":\"\",\"size\":\"is-small\",\"icon-right\":\"close\"},on:{\"click\":_vm.deselect}}),_c('PropertiesC',{attrs:{\"data\":_vm.selectedData}})],1):_vm._e()])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"url colspan2 titlebar\"},[_c('div',{staticClass:\"logo\"},[_c('div',{staticClass:\"white triangle\"}),_c('div',{staticClass:\"small logo smart_city_project\",attrs:{\"id\":\"logo\"}})])])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('div',{staticClass:\"tree\"},_vm._l((_vm.treeData),function(leaf){return _c('div',{key:leaf.key,staticClass:\"leaf\",class:[{'active': leaf.active},leaf.text]},[_c('div',{staticClass:\"cat_icon\",on:{\"click\":function($event){return _vm.selected(leaf)}}},[(_vm.getPath([leaf.text]))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath([leaf.text]),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:[leaf.text]}),_c('b-tag',{attrs:{\"rounded\":\"\",\"type\":\"is-primary\"}},[_vm._v(_vm._s(leaf._data.length))])],1),_c('div',{staticClass:\"stitle\",on:{\"click\":function($event){return _vm.selected(leaf)}}},[_vm._v(\" \"+_vm._s(_vm.$t('prop.' + leaf.text))+\" \")]),_c('div',{staticClass:\"chevron\",on:{\"click\":function($event){leaf.childs_shown = !leaf.childs_shown}}},[(!leaf.childs_shown)?_c('i',{staticClass:\"mdi mdi-chevron-down\"}):_c('i',{staticClass:\"mdi mdi-chevron-up\"})]),(leaf.childs_shown)?_c('div',{staticClass:\"childs\"},_vm._l((leaf.children),function(child){return _c('div',{key:child.key,staticClass:\"leaf\",class:[{'active': child.active},child.text],on:{\"click\":function($event){return _vm.selected(child)}}},[_c('div',{staticClass:\"cat_icon\"},[(_vm.getPath([leaf.text]))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath([leaf.text]),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:[leaf.text]})],1),_vm._v(\" \"+_vm._s(child.text)+\" \")])}),0):_vm._e()])}),0)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\nimport {Datastream, Datastreams, Thing} from \"../../openapi/client\";\nimport config from '@/config/mqtt.json';\nexport default function groupByName(datastreams:Datastreams){\n  const ret:any = {}\n\n  datastreams.value?.forEach((datastream:Datastream)=>{\n    if(datastream.name) {\n      if (!ret[datastream.name]) {\n        ret[datastream.name] = [];\n      }\n      ret[datastream.name].push(datastream);\n    }\n  })\n  return ret;\n}\n\nexport function groupByCategory(datastreams:Array<Datastream>|Array<Thing>|undefined){\n  const ret:any = {}\n  let type = \"uncategorized\";\n  console.log(datastreams)\n  if(datastreams){\n        datastreams.forEach((datastream:Datastream|Thing)=>{\n      //@ts-ignore\n          if(datastream.properties && datastream.properties['sensorthings.datastream.type']){\n            //@ts-ignore\n            type = datastream.properties[\"sensorthings.datastream.type\"].toString();\n          }\n          if(datastream['@iot.id'] && datastream['@iot.id']?.toString().split('~').length>2){\n            type = datastream['@iot.id']?.toString().split('~')[2];\n          }\n          if(datastream.name && !config.DatastreamExclude.includes(type)) {\n            if (!ret[type]) {\n              ret[type] = [];\n            }\n\n              ret[type].push(datastream);\n\n\n          }\n\n\n        })\n  }\n  return ret;\n}\nexport function groupByCategoryAndThing(datastreams:Array<Datastream>,things?:Array<Thing>){\n  const ret:any = {}\n  let type = \"uncategorized\";\n  console.log(datastreams)\n  if(datastreams){\n    datastreams.forEach((datastream:Datastream)=>{\n      //@ts-ignore\n      if(datastream.properties && datastream.properties['sensorthings.datastream.type']){\n        //@ts-ignore\n        type = datastream.properties[\"sensorthings.datastream.type\"].toString();\n      }\n      if(datastream['@iot.id'] && datastream['@iot.id']?.toString().split('~').length>2){\n        type = datastream['@iot.id']?.toString().split('~')[2];\n      }\n      if(datastream.name && !config.DatastreamExclude.includes(type)) {\n        if (!ret[type]) {\n          ret[type] = [];\n        }\n\n        ret[type].push(datastream);\n\n\n      }\n\n\n    })\n  }\n  return ret;\n}\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport {\n  mdiBattery40, mdiCamcorder,\n  mdiCloudPercent,\n  mdiGauge,\n  mdiGrain, mdiHazardLights,\n  mdiThermometerLow,\n  mdiTrafficLight,\n  mdiWeatherDust\n} from \"@mdi/js\";\nimport {mdiCamera, mdiCameraControl} from \"@mdi/js/commonjs/mdi\";\n\nexport function getPath(id: string) {\n  switch (id) {\n    case 'tlc':\n      return mdiTrafficLight\n    case 'color':\n      return mdiTrafficLight\n    case 'battery':\n      return mdiBattery40\n    case 'PM_2_5':\n    case 'PM_10':\n    case 'PM_1':\n      return mdiGrain\n    case 'air_pressure':\n      return mdiGauge\n    case 'air_humidity':\n      return mdiCloudPercent\n    case 'air_qi':\n      return mdiWeatherDust\n    case 'air_temprature':\n      return mdiThermometerLow\n    case 'temperature':\n      return mdiThermometerLow\n    case 'traficam':\n      return mdiCamera\n    case 'traficam_observedArea':\n      return mdiCamera\n    case 'viewport':\n      return mdiCamera\n    case 'ViewPort':\n      return mdiCameraControl\n    case 'conflict':\n      return mdiHazardLights\n    case 'TrafiCam':\n      return mdiCamera\n    default:\n      return null\n  }\n}\n","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n\n<template>\n  <div class=\"plane tree\">\n    <b-loading :active=\"loading\" :can-cancel=\"false\" :is-full-page=\"false\"></b-loading>\n\n      <div class=\"tree\">\n        <div class=\"leaf\" v-for=\"leaf in treeData\"  :class=\"[{'active': leaf.active},leaf.text]\"\n              :key=\"leaf.key\">\n          <div class=\"cat_icon\" @click=\"selected(leaf)\">\n            <svg-icon type=\"mdi\" v-if=\"getPath([leaf.text])\" :path=\"getPath([leaf.text])\" :size=\"35\" class=\"svg_icon2\"></svg-icon>\n            <div class=\"svg_icon\" v-else :class=\"[leaf.text]\"></div>\n            <b-tag rounded type=\"is-primary\">{{ leaf._data.length }}</b-tag>\n          </div>\n          <div class=\"stitle\" @click=\"selected(leaf)\">\n          {{ $t('prop.' + leaf.text) }}\n          </div>\n          <div class=\"chevron\" @click=\"leaf.childs_shown = !leaf.childs_shown\">\n            <i class=\"mdi mdi-chevron-down\" v-if=\"!leaf.childs_shown\"></i>\n            <i class=\"mdi mdi-chevron-up\" v-else></i>\n          </div>\n          <div class=\"childs\" v-if=\"leaf.childs_shown\">\n              <div class=\"leaf\" v-for=\"child in leaf.children\" @click=\"selected(child)\" :class=\"[{'active': child.active},child.text]\"\n                   :key=\"child.key\">\n                <div class=\"cat_icon\">\n                  <svg-icon type=\"mdi\" v-if=\"getPath([leaf.text])\" :path=\"getPath([leaf.text])\" :size=\"35\" class=\"svg_icon2\"></svg-icon>\n                  <div class=\"svg_icon\" v-else :class=\"[leaf.text]\"></div>\n\n                </div>\n\n                {{  child.text }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Configuration,\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location, Locations,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\nimport {getBaseUrl} from \"@/config/base\";\nimport groupByName, {groupByCategory, groupByCategoryAndThing} from \"@/helper/DatastreamGroups\";\n//@ts-ignore\nimport SvgIcon from '@jamescoyle/vue-icon';\n\nimport { getPath } from \"@/helper/SVGPaths\";\n\n@Component({\n  components: {\n    VTreeview,\n    SvgIcon\n  }\n})\nexport default class StreamTreeC extends Vue {\n\n\n   private loading = false;\n\n\n  private treeData: any = [];\n\n  private selectedNodesKeys: any = {};\n  private oldEnabledCategories = '';\n\n  @Watch('$route.query') query_changed_out(new_query_params:any){\n    this.query_changed(new_query_params)\n  }\n\n\n  query_changed(new_query_params: any,force=false) {\n    if ( (force || this.oldEnabledCategories!=new_query_params.enabledCategories)) {\n      let array_of_key_to_select = new_query_params.enabledCategories.split(',');\n      this.treeData.forEach((node: any) => {\n        if (array_of_key_to_select.includes(node.key)) {\n          this.selectedNodesKeys[node.key] = node._data;\n          node.active = true;\n        }\n      })\n      let emit: any = [];\n      for (let key in this.selectedNodesKeys) {\n        emit = emit.concat(this.selectedNodesKeys[key])\n      }\n      this.oldEnabledCategories = new_query_params.enabledCategories;\n      this.$emit('selection', emit)\n    }\n  }\n\n  mounted() {\n    //this.getDatascreamsTree()\n    //this.query_changed(this.$route.query)\n\n  }\n\n  getPath(id:string){\n    return getPath(id[0])\n  }\n\n  async selected(node: any) {\n\n    if(node.children){\n      if (node.active) {\n        for (let child of node.children) {\n          delete this.selectedNodesKeys[child.key];\n          child.active = false;\n        }\n        node.active = false;\n      }\n      else {\n          for(let child of node.children){\n            this.selectedNodesKeys[child.key] = child._data;\n            child.active = true;\n          }\n        node.active = true;\n      }\n\n    }else{\n      if (node.active) {\n        delete this.selectedNodesKeys[node.key];\n        node.active = false;\n      } else {\n        this.selectedNodesKeys[node.key] = node._data;\n        node.active = true;\n      }\n    }\n\n\n    /*let emit:any = [];\n    for(let key in this.selectedNodesKeys){\n      console.log(this.selectedNodesKeys[key])\n      emit = emit.concat(this.selectedNodesKeys[key])\n    }\n    console.log(emit)\n    console.log(Object.keys(this.selectedNodesKeys).join(','))*/\n\n    let query:any = {};\n    try{\n      //query = this.$route.query;\n      /*if(this.$route.query.enabledCategories){\n        query['enabledCategories'] = this.$route.query.enabledCategories\n      }*/\n      if(this.$route.query.coord){\n        query['coord'] = this.$route.query.coord\n      }\n      if(this.$route.query.zoom){\n        query['zoom'] = this.$route.query.zoom\n      }\n      if(this.$route.query.enabledTraficLights){\n        query['enabledTraficLights'] = this.$route.query.enabledTraficLights\n      }\n\n      query['enabledCategories'] = Object.keys(this.selectedNodesKeys).join(',');\n      //query['time'] = Math.random()\n    }\n    catch (e){\n      console.log(e)\n    }\n\n\n    this.$router.replace({\n      name: 'datastreams',\n      query: {...query}\n    }).catch(err => {\n      //console.log(err)\n    })\n    /*this.$router.replace({\n      name: 'datastreams',\n      query: {enabledCategories: Object.keys(this.selectedNodesKeys).join(',')}\n    })*/\n    //this.$emit('selection', emit)\n\n  }\n\n\n  async getDatascreamsTree(datastreams: Array<Datastream>,things?:Array<Thing>) {\n\n\n\n    let ret: unknown[] = [];\n    //let groups = groupByCategory(datastreams)\n    let groups = groupByCategoryAndThing(datastreams,things)\n    for (const [key, value] of Object.entries(groups)) {\n\n      const v = value as Array<Datastream>;\n      let node = {\n        id: Math.random() * 100000,\n        text: key,\n        type: \"FMM_DATASTREAM\",\n        children: v.map((entry:Datastream)=>{\n          const spl:string[] = ((entry[\"@iot.id\"]??'~')as string).split('~');\n          return {\n          id: Math.random() * 100000,\n          text: spl[0]+'~'+spl[1]??'',\n          type: \"FMM_THING\",\n          _data: entry,\n          key:entry[\"@iot.id\"],\n          active: false\n        }}),\n        _data: value,\n        key: key,\n        active: false,\n        childs_shown:true\n      }\n      ret.push(node);\n    }\n    this.treeData = ret;\n    this.query_changed(this.$route.query,true);\n  }\n  async getDatascreamsTreeThings(things: Array<Thing>|undefined) {\n    this.loading = true;\n\n    this.loading = false;\n    let ret: unknown[] = [];\n    let groups = groupByCategory(things)\n    for (const [key, value] of Object.entries(groups)) {\n\n\n      let node = {\n        id: Math.random() * 100000,\n        text: key,\n        type: \"FMM_DATASTREAM\",\n        children: [],\n        _data: value,\n        key: key,\n        active: false\n      }\n      ret.push(node);\n    }\n    this.treeData = ret;\n    this.query_changed(this.$route.query,true);\n  }\n  get isactive() {\n    return Object.keys(this.selectedNodesKeys)\n  }\n\n}\n\n\n</script>\n\n<style scoped lang=\"scss\">\n\n.plane {\n  /*height: 100%;*/\n  z-index: 500;\n  background: #3a3a3a;\n  border-radius: 2px;\n  overflow-y: hidden;\n  text-align: left;\n  color: #d8d8d8;\n  position: relative;\n}\n\n.cap {\n  font-style: italic;\n  font-weight: bold;\n\n}\n\n.pad {\n  padding: 0 10px;\n}\n\n.leaf {\n  padding-left: 15px;\n  display: grid;\n  grid-template-columns: 50px 1fr 50px;\n  grid-template-rows: 45px;\n  align-items: center;\n  cursor: pointer;\n\n  .childs{\n    grid-column: 1 / 3;\n  }\n  &.active {\n    //background: #1b346fc7;\n    background: rgb(27, 52, 111);\n    background: linear-gradient(90deg, rgba(27, 52, 111, 0.78) 0%, rgba(27, 52, 111, 0) 100%);\n  }\n}\n\n.cat_icon {\n  width: 40px;\n  height: 40px;\n  position: relative;\n\n  border-radius: 4px;\n  border: 1px solid #999;\n\n  .mdi {\n    font-size: 25px;\n  }\n\n  .tag {\n    position: absolute;\n    right: -7px;\n    bottom: -6px;\n    color: #bbb;\n    background: transparent;\n  }\n\n  .svg_icon {\n\n    height: 24px;\n    width: 24px;\n    margin: 7px 2px;\n\n  }\n}\n</style>\n<style lang=\"scss\">\n@import \"./../scss/general\";\n\nul .tree-node {\n  white-space: nowrap;\n}\n\nul .tree-node :hover::before {\n  background: rgba(135, 147, 161, 0.27) !important;\n}\n\nul .tree-node input[type=radio]:checked + label:before {\n  background: #4099ff3d !important;\n}\n\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreamTree.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreamTree.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./StreamTree.vue?vue&type=template&id=7c94b058&scoped=true\"\nimport script from \"./StreamTree.vue?vue&type=script&lang=ts\"\nexport * from \"./StreamTree.vue?vue&type=script&lang=ts\"\nimport style0 from \"./StreamTree.vue?vue&type=style&index=0&id=7c94b058&prod&scoped=true&lang=scss\"\nimport style1 from \"./StreamTree.vue?vue&type=style&index=1&id=7c94b058&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7c94b058\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return (_vm.isBool)?_c('div',{staticClass:\"datapoint\",class:{'is_set':_vm.data,'unset':!_vm.data}},[(_vm.data)?_c('span',[_vm._v(\"!\")]):_vm._e()]):_c('div',{staticClass:\"datapoint\"},[_vm._v(\" \"+_vm._s(_vm.data)+\" \"+_vm._s(_vm.unit)+\" \")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n-->\n\n<template>\n  <div class=\"datapoint\" v-if=\"isBool\" :class=\"{'is_set':data,'unset':!data}\">\n        <span v-if=\"data\">!</span>\n  </div>\n  <div class=\"datapoint\" v-else>\n    {{data}} {{unit}}\n  </div>\n</template>\n<script lang=\"ts\">\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\n\n@Component\nexport default class Datapoint extends Vue{\n  private data = ''\n  @Prop({default:()=>''}) readonly unit:any\n  @Prop() readonly id:any\n  @Prop() readonly isBool!:boolean;\n  mounted(){\n    /*setInterval(()=>{\n      console.log(this.obs)\n    },1000)*/\n  }\n  @Watch('$sstore.obs.state.obs') handler(data:any){\n    //console.log(this.$sstore.obs.state.obs[this.id]);\n    if(this.$sstore.obs.state.obs && this.$sstore.obs.state.obs[this.id] && this.$sstore.obs.state.obs[this.id].result){\n\n      this.data = this.$sstore.obs.state.obs[this.id].result;\n      console.log(this.data);\n    }else{\n      this.data = '';\n    }\n  }\n\n}\n\n</script>\n<style lang=\"scss\" scoped>\n.datapoint{\n  white-space: nowrap;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datapoint.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datapoint.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Datapoint.vue?vue&type=template&id=4b1969ca&scoped=true\"\nimport script from \"./Datapoint.vue?vue&type=script&lang=ts\"\nexport * from \"./Datapoint.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Datapoint.vue?vue&type=style&index=0&id=4b1969ca&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4b1969ca\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"mqtttree plane\"},_vm._l((_vm.categories),function(cat){return _c('div',{key:cat.name,staticClass:\"leaf\"},[_c('div',{staticClass:\"cat_icon\",on:{\"click\":function($event){return _vm.selected(cat)}}},[(_vm.getPath(cat.name))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath(cat.name),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:cat})],1),_c('div',{staticClass:\"stitle\",on:{\"click\":function($event){return _vm.selected(cat)}}},[_vm._v(\" \"+_vm._s(_vm.$t('prop.' + cat.name))+\" \")]),_c('div',{staticClass:\"chevron\",on:{\"click\":function($event){cat.childs_shown = !cat.childs_shown}}},[(!cat.childs_shown)?_c('i',{staticClass:\"mdi mdi-chevron-down\"}):_c('i',{staticClass:\"mdi mdi-chevron-up\"})]),(cat.childs_shown)?_c('div',{staticClass:\"childs\"},_vm._l((_vm.itemsByCategory(cat.name)),function(child){return _c('div',{key:child.id,staticClass:\"leaf\",class:[{'active': child.active},child.name],on:{\"click\":function($event){return _vm.selected(child)}}},[_c('div',{staticClass:\"cat_icon\"},[(_vm.getPath(cat.name))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath(cat.name),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:cat.name})],1),_vm._v(\" \"+_vm._s(child.name)+\" \")])}),0):_vm._e()])}),0)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<script lang=\"ts\">\nimport {Vue, Component, Prop, VModel, Watch} from 'vue-property-decorator';\nimport { getPath } from \"@/helper/SVGPaths\";\n//@ts-ignore\nimport SvgIcon from '@jamescoyle/vue-icon';\n\nexport interface MqttListitem{\n  name:string\n  id:string\n  cat:string\n  active:boolean\n}\n\n@Component({\n  methods: {getPath},\n  components:{\n    SvgIcon\n  }\n\n})\nexport default class MqttList extends Vue {\n  @Prop()items:MqttListitem[]|undefined;\n  private listItems:MqttListitem[] = [];\n\n  @Watch('items')\n  items_changed(nv:MqttListitem[]){\n    nv.forEach((el)=>{\n      if(!this.listItems.map(e=>e.id).includes(el.id)){\n        this.listItems.push(el);\n      }\n    });\n  }\n\n  get categories(){\n    return [...new Set(this.listItems?.map(e=>e.cat))].map(cat=>{ // as  unique Array\n      return {\n        name:cat,\n        active:true,\n        childs_shown:true\n      }\n    })\n  }\n  get itemsByCategory() {\n    return (cat:string)=>{\n      return this.listItems?.filter(e=>(e.cat==cat))\n  }}\n  selected(o:any){\n    let items = this.listItems?.find(e=>e.id==o.id)\n    if(items){\n      items.active = !o.active;\n    }\n    const enabledTraficLights = this.listItems?.filter(e=>e.active).map(e=>e.cat+'_'+e.name).join(',');\n    //query['time'] = Math.random()\n    const query = {...this.$route.query};\n    query['enabledTraficLights'] =enabledTraficLights;\n    this.$router.replace({\n                           name: 'datastreams',\n                           query: query,\n                           replace:true\n                         }).catch(err => {\n\n    console.log(err)\n  })\n  }\n}\n</script>\n\n<template>\n  <div class=\"mqtttree plane\">\n    <div class=\"leaf\" v-for=\"cat in categories\"\n         :key=\"cat.name\">\n\n      <div class=\"cat_icon\" @click=\"selected(cat)\">\n        <svg-icon type=\"mdi\" v-if=\"getPath(cat.name)\" :path=\"getPath(cat.name)\" :size=\"35\" class=\"svg_icon2\"></svg-icon>\n        <div class=\"svg_icon\" v-else :class=\"cat\"></div>\n\n      </div>\n      <div class=\"stitle\" @click=\"selected(cat)\">\n        {{ $t('prop.' + cat.name) }}\n      </div>\n      <div class=\"chevron\" @click=\"cat.childs_shown = !cat.childs_shown\">\n        <i class=\"mdi mdi-chevron-down\" v-if=\"!cat.childs_shown\"></i>\n        <i class=\"mdi mdi-chevron-up\" v-else></i>\n      </div>\n      <div class=\"childs\" v-if=\"cat.childs_shown\">\n        <div class=\"leaf\" v-for=\"child in itemsByCategory(cat.name)\" @click=\"selected(child)\" :class=\"[{'active': child.active},child.name]\"\n             :key=\"child.id\">\n          <div class=\"cat_icon\">\n            <svg-icon type=\"mdi\" v-if=\"getPath(cat.name)\" :path=\"getPath(cat.name)\" :size=\"35\" class=\"svg_icon2\"></svg-icon>\n            <div class=\"svg_icon\" v-else :class=\"cat.name\"></div>\n\n          </div>\n\n          {{  child.name }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n\n.plane {\n  /*height: 100%;*/\n  z-index: 500;\n  background: #3a3a3a;\n  border-radius: 2px;\n  overflow-y: hidden;\n  text-align: left;\n  color: #d8d8d8;\n  position: relative;\n}\n.leaf {\n  padding-left: 15px;\n  display: grid;\n  grid-template-columns: 50px 1fr 50px;\n  grid-template-rows: 45px;\n  align-items: center;\n  cursor: pointer;\n\n  .childs{\n    grid-column: 1 / 3;\n  }\n  &.active {\n    //background: #1b346fc7;\n    background: rgb(27, 52, 111);\n    background: linear-gradient(90deg, rgba(27, 52, 111, 0.78) 0%, rgba(27, 52, 111, 0) 100%);\n  }\n}\n\n.cat_icon {\n  width: 40px;\n  height: 40px;\n  position: relative;\n\n  border-radius: 4px;\n  border: 1px solid #999;\n\n  .mdi {\n    font-size: 25px;\n  }\n\n  .tag {\n    position: absolute;\n    right: -7px;\n    bottom: -6px;\n    color: #bbb;\n    background: transparent;\n  }\n\n  .svg_icon {\n\n    height: 24px;\n    width: 24px;\n    margin: 7px 2px;\n\n  }\n  .cat_icon {\n    width: 40px;\n    height: 40px;\n    position: relative;\n\n    border-radius: 4px;\n    border: 1px solid #999;\n\n    .mdi {\n      font-size: 25px;\n    }\n\n    .tag {\n      position: absolute;\n      right: -7px;\n      bottom: -6px;\n      color: #bbb;\n      background: transparent;\n    }\n\n    .svg_icon {\n\n      height: 24px;\n      width: 24px;\n      margin: 7px 2px;\n\n    }\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MqttList.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MqttList.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./MqttList.vue?vue&type=template&id=8e0e24ee&scoped=true\"\nimport script from \"./MqttList.vue?vue&type=script&lang=ts\"\nexport * from \"./MqttList.vue?vue&type=script&lang=ts\"\nimport style0 from \"./MqttList.vue?vue&type=style&index=0&id=8e0e24ee&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8e0e24ee\",\n  null\n  \n)\n\nexport default component.exports","<!--\n  Copyright (c) 2023 Contributors to the  Eclipse Foundation.\n\n  This program and the accompanying materials are made\n  available under the terms of the Eclipse Public License 2.0\n  which is available at https://www.eclipse.org/legal/epl-2.0/\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Contributors: Markus Hochstein\n\n-->\n\n<template>\n\n\n  <div class=\"grid\" id=\"app\">\n    <div class=\"url colspan2 titlebar\">\n      <div class=\"logo\">\n        <div class=\"white triangle\"></div>\n        <div class=\"small logo smart_city_project\" id=\"logo\"></div>\n\n      </div>\n      <!--<b-field>\n        <b-input v-model=\"baseurl\"></b-input>\n        <b-button  outlined @click=\"connect()\">Connect</b-button>\n      </b-field>-->\n    </div>\n    <div class=\"map_holder\">\n      <l-map id=\"map\" :zoom=\"zoom\" :center=\"center\" @click=\"deselect\" @update:center=\"updateCenter\" @update:zoom=\"updateZoom\" :max-zoom=\"21\">\n        <l-tile-layer :url=\"url\" :attribution=\"attribution\" :options=\"{maxNativeZoom:19,\n        maxZoom:25}\"></l-tile-layer>\n\n        <template  v-for=\"(viewport,key) in viewports\">\n        <l-geo-json  :geojson=\"viewport\" :options=\"{'pointToLayer':pointToLayer}\" v-bind:key=\"key\"\n                     :options-style=\"styleP\"\n                     v-if=\" $route.query.enabledTraficLights && $route.query.enabledTraficLights.includes('ViewPort_'+key.toString())\"\n                     ></l-geo-json>\n        </template>\n\n        <template  v-for=\"(geoJsonTragicLight,key) in observationsGeoJsonMqtt\">\n          <l-geo-json  :geojson=\"geoJsonTragicLight\" :options=\"{'pointToLayer':pointToLayer}\" v-bind:key=\"key\"\n                       :options-style=\"styleP\"\n                       v-if=\" $route.query.enabledTraficLights && $route.query.enabledTraficLights.includes('TrafiCam_'+key.toString())\"></l-geo-json>\n        </template>\n\n\n\n       <l-geo-json v-for=\"features in geojson\"  :geojson=\"features.location\" :key=\"features['@iot.id']+'_area'\"  :options-style=\"style(features['@iot.id'])\"></l-geo-json>\n\n\n        <v-marker-cluster :options=\"{spiderfyDistanceMultiplier:3.2,animate:true,animateAddingMarkers:true,zoomToBoundsOnClick:false,disableClusteringAtZoom:18}\"\n                          ref=\"clusterRef2\" v-if=\"centerPoints && centerPoints.length>0\">\n\n          <template v-for=\"point in centerPoints\" >\n          <custom-marker @click.native=\"(ev)=>{ev.stopImmediatePropagation();markerWasClicked(point)}\" :key=\"point['@iot.id']+'markr'\"\n                         :marker=\"ret(point.location.geometry.coordinates)\"\n                         :lat-lng=\"ret(point.location.geometry.coordinates)\" v-if=\"point.location.geometry\">\n\n\n           <!-- <div class='marker-pin' :class=\"{'selected':point===selected}\">-->\n             <!-- <div class=\"round\">-->\n            <div class='marker-pin' :class=\"{'selected':point===selected}\"  v-if=\"point['@iot.id'].split('~').reverse()[0]!=='color'\">\n              <div class=\"round\" v-if=\"point['@iot.id'].split('~').reverse()[0]!='color'\">\n                <svg-icon type=\"mdi\"\n                          :size=\"24\"\n                          v-if=\"getPath(point['@iot.id'].split('~').reverse()[0])\"\n                          :path=\"getPath(point['@iot.id'].split('~').reverse()[0])\"\n                          class=\"marker_svg\"></svg-icon>\n                <div class=\"svg_icon dark\"\n                     :class=\"point['@iot.id'].split('~').reverse()[0]\"\n                     v-else-if=\"point['@iot.id'].split('~').reverse()[0]\">\n                </div>\n\n              </div>\n            </div>\n                <div class=\"marker-value\" @click=\"(ev)=>{ev.stopImmediatePropagation();markerWasClicked(point)}\" :class=\"point['@iot.id'].split('~').reverse()[0]\">\n\n\n                  <Datapoint :id=\"point['@iot.id']\" :unit=\"''\" :is-bool=\"point['@iot.id'].split('~').reverse()[0]=='conflict'\"></Datapoint>\n\n\n                </div>\n              <!--</div>-->\n          <!--  </div>-->\n\n\n\n\n\n\n\n          </custom-marker>\n          </template>\n        </v-marker-cluster>\n\n      </l-map>\n\n\n    </div>\n    <div class=\"sidebar_holder absolute\">\n\n      <perfect-scrollbar>\n        <StreamTree ref=\"streamTree\" @selection=\"select\"></StreamTree>\n        <MqttList :items=\"mqtt_items\" ></MqttList>\n      </perfect-scrollbar>\n\n\n    </div>\n    <div class=\"propertie_holder absolute\" v-if=\"selected!==null\">\n      <b-button class=\"absbtn\" type=\"is-text\" rounded size=\"is-small\"\n                icon-right=\"close\" @click=\"deselect\">\n      </b-button>\n      <PropertiesC :data=\"selectedData\"></PropertiesC>\n    </div>\n\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LTileLayer, LWMSTileLayer,LGeoJson} from \"vue2-leaflet\";\nimport {\n  LocationsApi,\n  Location,\n  Locations,\n  Configuration,\n  Datastream,\n  ThingsApi,\n  DatastreamsApi,\n  ObservationsApi, Observations, Datastreams, Things, Thing\n} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\nimport {BASE_PATH} from \"../../openapi/client/base\";\nimport {getBaseUrl, setBaseUrl} from \"@/config/base\";\nimport StreamTree from \"@/components/StreamTree.vue\";\nimport {AxiosResponse} from \"axios\";\n//@ts-ignore\n\nimport Vue2LeafletMarkercluster from \"vue2-leaflet-markercluster/Vue2LeafletMarkercluster.vue\";\n//@ts-ignore\nimport CustomMarker from 'vue-leaflet-custom-marker';\nimport Datapoint from \"@/components/Datapoint.vue\";\nimport { getPath } from \"@/helper/SVGPaths\";\n//@ts-ignore\nimport SvgIcon from '@jamescoyle/vue-icon';\n\nimport L from \"leaflet\";\n\nimport * as turf from '@turf/turf'\nimport conf from '@/config/mqtt.json';\nimport MqttList from \"@/components/MqttList.vue\";\n\nexport interface LocationsPlus {\n  dsid: String | undefined\n}\n\n@Component({\n  components: {\n    Datapoint,\n    StreamTree,\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LGeoJson,\n    LWMSTileLayer,\n    'v-marker-cluster': Vue2LeafletMarkercluster,\n    CustomMarker,\n    SvgIcon,MqttList\n\n  }\n})\nexport default class DatastreamsV extends Vue {\n  //private url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  private url = 'https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png'\n  //private url = 'https://map.jena.de/wms/kartenportal';\n  private attribution =\n    '&copy; <a href=\"https://www.stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom: number = 14;\n\n  private center = [50.93115286, 11.60392726];\n  private markerLatLng = [55.8382551745062, -4.20119980206699]\n  private locations: Array<Location> | undefined = [];\n  private selected: Location | null = null;\n  private obs: any = {};\n  private treeData: unknown = null;\n  //private baseurl:string = 'https://sensors.bgs.ac.uk/FROST-Server';\n  private baseurl: string = getBaseUrl();\n  private datastreams: Array<Datastream> | null = null;\n  private things: Array<Thing> | undefined = [];\n  private datastreamsbyID: { [key: string]: Datastream } = {};\n  private timer: any = null;\n  private selectedData: any = null;\n  private mqtt: Worker | null = null;\n  campoints = null;\n  observationsGeoJsonMqtt = null;\n  viewports = null;\n  observationsGeoJsonMqttConfig = null;\n  private mqttmenu = {};\n  private mqtt_items = {};\n  async mounted() {\n\n    this.mqtt = new Worker(new URL(\"@/worker/mqtt.ts\", import.meta.url));\n    this.mqtt.postMessage('connect');\n    this.mqtt.postMessage('subscribe');\n    this.mqtt.onmessage = (evt)=>{\n\n      let types:any = {};\n      let MqttItems:any = [];\n      /*Object.values(evt.data.features).forEach((feature:any)=>{\n        if(feature.properties && feature.properties.thing){\n          types[feature.properties.thing]=1;\n        }\n      })*/\n      Object.keys(evt.data.features).forEach((r:any)=>{\n        MqttItems.push({name:r,id:'TrafiCam_'+r,cat:'TrafiCam',active:false})\n      })\n      Object.keys(evt.data.configs).forEach((r:any)=>{\n        MqttItems.push({name:r,id:'ViewPort_'+r,cat:'ViewPort',active:false})\n      })\n      this.mqtt_items = MqttItems;\n      for( const [key, value] of Object.entries(evt.data.features)){\n        evt.data.features[key].features = Object.values(evt.data.features[key].features);\n      }\n      for( const [key, value] of Object.entries(evt.data.configs)){\n        evt.data.configs[key].features = Object.values(evt.data.configs[key].features);\n      }\n      this.viewports = evt.data.configs;\n      this.observationsGeoJsonMqtt = evt.data.features;\n\n      /*this.observationsGeoJsonMqtt =  {\n        type: \"FeatureCollection\",\n        features: Object.values(evt.data.features)\n      }as any*/\n      /*this.observationsGeoJsonMqttConfig =  {\n        type: \"FeatureCollection\",\n        features: Object.values(evt.data.configs)\n      }as any\n      this.campoints=  {\n        type: \"FeatureCollection\",\n        features: Object.values(evt.data.cams)\n      }as any\n      this.mqttmenu = {cams:evt.data.cams,configs:evt.data.configs};\n      */\n\n      //console.log(this.mqttmenu)\n\n    }\n    //this.SetobservationsGeoJsonMqtt();\n    let query = this.$route.query;\n    if (this.$route.query.zoom) {\n      try {\n        let zoom = parseInt(this.$route.query.zoom as string);\n        if (zoom > 1 && zoom < 19) {\n          this.zoom = zoom;\n        }\n      } catch (e) {\n        //parse Error\n      }\n\n    }\n    if (this.$route.query.coord) {\n      try {\n        let splitArr = (this.$route.query.coord as string).split(',');\n        let lat = parseFloat(splitArr[0]);\n        let lng = parseFloat(splitArr[1]);\n        if (lat > -90 && lat < 90 && lng > -180 && lng < 180) {\n          this.center = [lat, lng];\n        }\n      } catch (e) {\n        //parse Error\n      }\n\n    }\n    await this.load();\n  }\n\n  async load() {\n    console.log('load');\n    ///@ts-ignore\n    this.datastreams = (await new DatastreamsApi(new Configuration({basePath: getBaseUrl()}))\n      .v11DatastreamsGet()).data.value as Array<Datastream>;\n\n    //@ts-ignore\n    //this.datastreams = dataStreamMock.value as Array<Datastream>;\n\n    this.things = (await new ThingsApi(new Configuration({basePath: getBaseUrl()}))\n      .v11ThingsGet()).data.value;\n\n    // (this.$refs.streamTree as StreamTree).getDatascreamsTreeThings(this.things);\n\n    if (!this.datastreams) {\n      this.datastreams=[];\n    }\n    this.datastreams = this.datastreams.map(datastream=>{\n      if(datastream.observedArea && ['Polygon'].includes((datastream.observedArea as any).type)){\n        let geometry = datastream.observedArea;\n        (datastream.observedArea as any) = {\n          type:\"Feature\",\n          properties:{},\n          geometry:geometry\n        }\n      }\n      return datastream;\n    }) as Datastream[];\n\n      (this.$refs.streamTree as StreamTree).getDatascreamsTree(this.datastreams,this.things);\n      for (let datastream of this.datastreams) {\n        //@ts-ignore\n        this.datastreamsbyID[datastream[\"@iot.id\"]] = datastream;\n      }\n    }\n\n\n\n  deselect() {\n    this.selected = null;\n    //@ts-ignore\n    this.selectedData = null;\n  }\n\n  res(arr: any) {\n    return [arr[1], arr[0]]\n  }\n\n  ret(arr: any) {\n    return {\n      lat: arr[1],\n      lng: arr[0]\n    }\n  }\n\n  rev(arr: any) {\n    return {\n      lat: arr[0],\n      lng: arr[1]\n    }\n  }\n\n  connect() {\n    setBaseUrl(this.baseurl)\n    this.load();\n\n  }\n\n  checkFeatureCollectionRaw(point: any) {\n    if (!point.type) return false;\n    if (point.type !== 'FeatureCollection') return false;\n\n    return true;\n  }\n\n  checkFeatureCollection(point: any) {\n    if (!point.location) return false;\n    if (!point.location.type) return false;\n    if (! ['FeatureCollection','Point','LineString','Polygon','MultiPoint','MultiLineString','MultiPolygon','Feature'].includes(point.location.type)) return false;\n\n    return true;\n  }\n\n  checkPoint(point: any) {\n    if (!point.location) return false;\n    if (!point.location.latitude) return false;\n    if (!point.location.longitude) return false;\n\n\n    return true;\n  }\n\n\n  get geojson() {\n\n    if (!this.locations || this.locations.length==0) return [];\n    const map = this.locations.filter(this.checkFeatureCollection);\n    console.log(map)\n    return map;\n  }\n\n  get observationsGeoJson() {\n    try {\n      let ret = Object.values(this.$sstore.obs.state.obs).filter((e: any) => {\n        return this.checkFeatureCollectionRaw(e.result);\n      });\n      if (!ret) return [];\n      return ret;\n    } catch (r) {\n      console.log(r);\n      return []\n    }\n  }\n\n  get points() {\n    if (!this.locations) return [];\n    let map = this.locations.filter(this.checkPoint);\n    return map;\n  }\n\n  get centerPoints() {\n\n      return this.geojson.map(e => {\n        let f = {...e};\n\n        try {\n          if(e.location){\n            if((e.location as any).type=='FeatureCollection'){\n              (e.location! as any).properties={} as any;\n            }\n\n            //@ts-ignore\n            //if(e.location.features)\n            //f.location = turf.center(e.location.features[0]);\n            f.location = turf.center(e.location);\n            console.log(f)\n          }\n        } catch (err) {\n          console.log(err);\n\n        }\n        return f;\n      })\n\n  }\n\n\n  markerWasClicked(point: Location & LocationsPlus) {\n    this.selected = point;\n    //@ts-ignore\n    this.selectedData = {data: this.datastreamsbyID[point['@iot.id']], type: 'FMM_DATASTREAM'}\n  }\n\n\n  async select(model: Datastream[]) {\n    console.log('model')\n    console.log(model)\n    this.locations = [];\n    let proms: Promise<any>[] = [];\n    model.forEach((datastream: Datastream) => {\n      if (datastream && datastream[\"@iot.id\"]) {\n        if (datastream.observedArea) {\n          //@ts-ignore\n\n          let loctype = {...datastream} as any;\n          loctype.observedArea['properties'] = {\"@iot.id\": datastream[\"@iot.id\"]}\n          loctype[\"@iot.id\"] = datastream[\"@iot.id\"];\n          loctype['location'] = {\n            type: \"FeatureCollection\",\n            features: [loctype.observedArea],\n          };\n          this.locations?.push(loctype);\n        } else {\n\n\n          //@ts-ignore\n          proms.push(new Promise(async (res, rej) => {\n            try {\n              //@ts-ignore\n              let result = await new ThingsApi(new Configuration({basePath: getBaseUrl()})).v11ThingsEntityIdLocationsGet((datastream[\"@iot.id\"].toString().split('~')[0]));\n              if (result.data && result.data.value && result.data.value[0]) {\n                //@ts-ignore\n                (result.data.value[0] as LocationsPlus)['@iot.id'] = datastream[\"@iot.id\"];\n              }\n              res(result);\n            } catch (e) {\n              rej(e)\n            }\n          }));\n        }\n      }\n    })\n    let thingsLoaction: AxiosResponse<Locations & LocationsPlus>[] = await Promise.all(proms);\n\n    this.locations = this.locations.concat(\n      thingsLoaction.map((e: AxiosResponse<Locations & LocationsPlus>) => {\n      return (e.data.value![0])\n    })\n    );\n    console.log('setPoints');\n\n    //this.locations.push({\"@iot.id\": \"karl\"} as Location)\n\n    try{\n      this.$sstore.obs.setPoints(this.locations);\n      this.$sstore.obs.getDataForPoints();\n      if (this.locations.length > 0) {\n        this.$sstore.obs.settimer();\n      } else {\n        this.$sstore.obs.clearTimer();\n      }\n    }catch (e){\n      console.log(e);\n    }\n\n    if(this.$refs.clusterRef2){\n      //@ts-ignore\n      this.$refs.clusterRef2!.mapObject.refreshClusters();\n    }\n\n\n\n\n  }\n\n  beforeDestroy() {\n    this.$sstore.obs.clearTimer();\n  }\n\n  getPath(id: string) {\n    return getPath(id)\n  }\n\n  updateCenter(center: any) {\n    let query: any = {}\n    if (this.$route.query.enabledCategories) {\n      query['enabledCategories'] = this.$route.query.enabledCategories\n    }\n    if(this.$route.query.enabledTraficLights){\n      query['enabledTraficLights'] = this.$route.query.enabledTraficLights\n    }\n    if (this.$route.query.coord) {\n      query['zoom'] = this.$route.query.zoom\n    }\n    query['coord'] = center['lat'] + ',' + center['lng']\n\n    this.$router.replace({\n      name: 'datastreams',\n      query: query\n    }).catch(err => {\n    })\n\n  }\n\n  updateZoom(zoom: any) {\n    let query: any = {}\n    if (this.$route.query.enabledCategories) {\n      query['enabledCategories'] = this.$route.query.enabledCategories\n    }\n    if (this.$route.query.coord) {\n      query['coord'] = this.$route.query.coord\n    }\n    if(this.$route.query.enabledTraficLights){\n      query['enabledTraficLights'] = this.$route.query.enabledTraficLights\n    }\n    query['zoom'] = zoom\n\n    this.$router.replace({\n      name: 'datastreams',\n      query: query\n    }).catch(err => {\n    })\n  }\n\n  swapCoords(coords: any) {\n    //                    latitude , longitude, altitude\n    //return new L.LatLng(coords[1], coords[0], coords[2]); //Normal behavior\n    return new L.LatLng(coords[0], coords[1], coords[2]);\n  }\n\n   style(featureid:any) {\n\n\n    if(featureid.split('~').reverse()[0]=='conflict' && this.$sstore.obs.state.obs[featureid]){\n      console.log(this.$sstore.obs.state.obs[featureid]);\n      if(this.$sstore.obs.state.obs[featureid].result){\n        return (feature: any) => {\n          return {\n            weight: 2,\n            color: \"rgba(253,193,0,0.6)\",\n            opacity: 1,\n            fillColor: 'rgba(253,193,0,0.6)',\n            fillOpacity: 0.8\n          };\n        };\n      }else {\n        return {\n          weight: 2,\n          color: \"rgba(222,220,220,0)\",\n          opacity: 1,\n          fillColor: '#cccccc',\n          fillOpacity: 0.8\n        };\n      }\n    }\n    //console.log(featureid)\n    return (feature: any) => {\n      return {\n        weight: 2,\n        color: \"#ECEFF1\",\n        opacity: 1,\n        fillColor: '#ccc',\n        fillOpacity: 0.8\n      };\n    };\n  }\n\n  get pointToLayer() {\n    return (feature: any, latlng: any) => {\n\n      let div = document.createElement(\"div\");\n      let inner = document.createElement(\"div\");\n      let icon = document.createElement(\"div\");\n      icon.classList.add('icon');\n      div.classList.add('marker');\n      inner.classList.add('inner');\n      div.append(inner);\n      div.append(icon);\n      if (feature.properties.heading) {\n\n        const deg = (feature.properties.heading ?? 0) - 45;\n        inner.style.webkitTransform = 'rotate(' + deg + 'deg)';\n        //div.style.mozTransform    = 'rotate('+deg+'deg)';\n        //div.style.msTransform     = 'rotate('+deg+'deg)';\n        //div.style.oTransform      = 'rotate('+deg+'deg)';\n        inner.style.transform = 'rotate(' + deg + 'deg)';\n      }\n      if(feature.properties.type){\n        inner.classList.add('type_'+feature.properties.type);\n        let innerHTML = feature.properties.type;\n        switch (feature.properties.type){\n          case '0':\n            innerHTML = '<i class=\"mdi  mdi-walk\"> </i>'\n            break;\n\n          case '1':\n          case '2':\n          case '3':\n            innerHTML = '<i class=\"mdi mdi-bike\"> </i>'\n            break;\n          case '5':\n          case '6':\n            innerHTML = '<i class=\"mdi mdi-car-side\"> </i>'\n            break;\n          case '7':\n            innerHTML = '<i class=\"mdi mdi-van-passenger\"> </i>'\n            break;\n          case '10':\n          case '11':\n          case '12':\n            innerHTML = '<i class=\"mdi mdi-truck\"> </i>'\n            break;\n          case '14':\n            innerHTML = '<i class=\"mdi mdi-bus-side\"> </i>'\n            break;\n\n\n        }\n        icon.innerHTML = innerHTML;\n      }\n\n      return new L.Marker(latlng, {\n        icon:\n          L.divIcon({className: 'my-div-icon', html: div})\n      });\n    }\n  }\n\n  get styleP() {\n\n    return (feature: any) => {\n      return {\n        weight: 2,\n        color: \"#ECEFF1\",\n        opacity: 1,\n        fillColor: '#ccc',\n        fillOpacity: 0.8\n      };\n    };\n  }\n\n  get styleC() {\n\n    return (feature: any) => {\n      return {\n        weight: 2,\n        color: \"#8c8c8c\",\n\n        opacity: 1,\n        fillColor: '#e3e3e3',\n        fillOpacity: 0.5\n      };\n    };\n  }\n  get camPointsSytle() {\n\n    return (feature: any, latlng: any) => {\n      let wrapper = document.createElement(\"div\");\n      let div = document.createElement(\"div\");\n      let inner = document.createElement(\"div\");\n      let icon = document.createElement(\"div\");\n      wrapper.classList.add('marker-wrapper','extSytle');\n      icon.classList.add('icon');\n      div.classList.add('marker-pin');\n      inner.classList.add('inner','type_cam','round');\n      icon.innerHTML = '<i class=\"mdi  mdi-camera-wireless\"> </i>';\n      div.append(inner);\n      inner.append(icon);\n      wrapper.append(div);\n\n      return new L.Marker(latlng, {\n        icon:\n          L.divIcon({className: 'my-div-icon', html: wrapper})\n      });\n    };\n  }\n\n  SetobservationsGeoJsonMqtt() {\n\n\n  }\n  tooltip =  (feature:any, layer:any)=> {\n    //console.log(feature)\n    layer.bindTooltip(feature.properties.id, {\n      direction: \"left\",\n      permanent: true,\n      className: 'labelstyle'\n    });\n    //layer.bindPopup(\"My popup content\");\n  }\n\n  get isSelected(){\n    return (point:any)=> {\n      const arr = point['@iot.id'].splitt('~');\n      return\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"@/scss/general.scss\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.css\";\n@import \"~leaflet.markercluster/dist/MarkerCluster.Default.css\";\n\n#map {\n  /*position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;*/\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 55px 1fr;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background: #272727;\n}\n\n.rim {\n  padding: 5px;\n}\n\n.sidebar_holder {\n  bottom: 0;\n  left: 0;\n  width: 350px;\n  top: 55px;\n  z-index: 5;\n  background: #3a3a3af7;\n  box-shadow: 5px 6px 5px #0000003d;\n\n  .plane {\n    padding: 25px 0px 5px 0px;\n    background: transparent;\n  }\n}\n\n.marker-pin {\n  width: 40px;\n  height: 40px;\n  border-radius: 50% 50% 50% 0;\n  background: #002770;\n  position: absolute;\n  transform: rotate(-45deg);\n  left: 50%;\n  top: 50%;\n  margin: -15px 0 0 -15px;\n  box-shadow: -8px 15px 15px 0px rgb(0 0 0 / 43%);\n\n\n}\n\n.marker-pin.selected {\n  .round {\n    background: $bs-blue;\n  }\n\n  .svg_icon {\n    &.dark {\n      background: #fcfcfc;\n    }\n  }\n\n}\n\n// to draw white circle\n.marker-pin::after {\n  content: \"\";\n  width: 24px;\n  height: 24px;\n  margin: 3px 0 0 -12px;\n  //background: #fff;\n  position: absolute;\n  border-radius: 50%;\n  transform: rotate(-45deg);\n  //box-shadow: inset 0px 0px 3px 0px #00000078;\n}\n\n// to align icon\n.custom-div-icon i {\n  position: absolute;\n  width: 22px;\n  font-size: 22px;\n  left: 0;\n  right: 0;\n  margin: -1px 3px;\n  text-align: center;\n  color: $primary;\n  transform: rotate(45deg);\n}\n\n.custom-div-icon .marker-pin.selected i {\n  color: #fff;\n}\n\n.colspan2 {\n  grid-column: 1 / 3;\n}\n\n.marker-value {\n  position: absolute;\n  left: 12px;\n  border: 1px solid #ccc;\n  top: -10px;\n  background: #fff;\n  padding: 4px;\n  border-radius: 21px;\n  /* box-shadow: 3px 14px 15px 0px rgba(0, 0, 0, 0.43); */\n  font-size: 16px;\n  &.color{\n\n    left: -35px;\n    top: -1px;\n    transform: rotate(-90deg);\n  }\n  &.conflict {\n    border:none;\n    padding:0;\n    .is_set{\n      //animation: blinker 2s step-start infinite;\n    border-radius:100%;\n\n      width:24px;\n      font-weight:500;\n    //border: 1px dashed #bdbdbd;\n    background: #e4a53b;\n\n    }\n\n\n    /* box-shadow: 3px 14px 15px 0px rgba(0, 0, 0, 0.43); */\n\n  }\n  &.viewport{\n    display:none;\n  }\n}\n\n.round {\n  width: 34px;\n  height: 34px;\n  border-radius: 100%;\n  transform: rotate(45deg);\n  margin: 3px;\n  background: #ffffff;\n  display: flex;\n  font-size: 21px;\n  flex-direction: row;\n  align-content: center;\n  justify-content: center;\n  align-items: center;\n}\n\n#logo {\n  width: 237px;\n  height: 97px;\n  position: absolute;\n  left: 3px;\n  top: -20px;\n  background-size: 138px;\n  background-position: 0px;\n}\n\n#claim {\n  width: 131px;\n  height: 97px;\n  position: absolute;\n  left: 49px;\n  top: -50px;\n  background-size: 240px;\n  background-position: -109px;\n}\n\n.logo {\n  overflow: hidden;\n  height: 56px;\n  width: 214px;\n  position: relative;\n}\n\n.titlebar {\n\n  background: $bs-blue;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  justify-content: flex-start;\n  align-items: center;\n  box-shadow: 0px 12px 14px #00000059;\n  z-index: 7;\n  position: relative;\n}\n\n.map_holder {\n  z-index: 5;\n  position: relative;\n}\n\n.propertie_holder {\n  bottom: 0;\n  left: 350px;\n  /* width: 350px; */\n  height: 351px;\n  right: 0;\n  z-index: 6;\n  background: rgba(58, 58, 58, 0.968627451);\n  box-shadow: 5px 6px 5px rgba(0, 0, 0, 0.2392156863);\n}\n\n.svg_icon {\n  width: 24px;\n  height: 24px;\n\n  &.dark {\n    background: #363636;\n  }\n\n}\n\n.absbtn {\n  position: absolute;\n  right: 0;\n  top: 5px;\n  z-index: 1141;\n}\n.marker_svg{\n  color:#333;\n}\n</style>\n<style lang=\"scss\">\n.extSytle{\n\n\n  .round {\n    width: 34px;\n    height: 34px;\n    border-radius: 100%;\n    transform: rotate(45deg);\n    margin: 3px;\n    background: #ffffff;\n    display: flex;\n    font-size: 21px;\n    flex-direction: row;\n    align-content: center;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .marker-pin {\n    width: 40px;\n    height: 40px;\n    border-radius: 50% 50% 50% 0;\n    background: #002770;\n    position: absolute;\n    transform: rotate(-45deg);\n    left: 50%;\n    top: 50%;\n    margin: -15px 0 0 -15px;\n    box-shadow: -8px 15px 15px 0px rgb(0 0 0 / 43%);\n\n\n  }\n\n  .marker-pin.selected {\n    .round {\n      background: #002770;\n    }\n\n    .svg_icon {\n      &.dark {\n        background: #fcfcfc;\n      }\n    }\n\n  }\n\n  // to draw white circle\n  .marker-pin::after {\n    content: \"\";\n    width: 24px;\n    height: 24px;\n    margin: 3px 0 0 -12px;\n    //background: #fff;\n    position: absolute;\n    border-radius: 50%;\n    transform: rotate(-45deg);\n    //box-shadow: inset 0px 0px 3px 0px #00000078;\n  }\n}\n@keyframes blinker {\n  50% {\n    opacity: 0;\n  }\n}\n#app {\n  .marker-cluster {\n    background-color: rgb(27 52 111 / 19%);\n\n    div {\n      background-color: rgb(27 52 111 / 100%);\n      color: #fcfcfc;\n    }\n  }\n}\n.marker{\n\n  //box-shadow: 5px 3px 9px rgba(0, 0, 0, 0.2980392157);\n  //width: 25px;\n  box-shadow: 5px 3px 6px -1px rgb(0 0 0 / 45%);\n  height: 25px;\n  /* background: transparent; */\n  border-radius: 100%;\n  .inner{\n    width:25px;\n    height: 25px;\n    background: #2058a2;\n    border-top-left-radius: 100%;\n    border-bottom-left-radius: 100%;\n    border-bottom-right-radius: 100%;\n\n    &.type_cam{ //Pad\n      background: rgba(126, 194, 243);\n      border-radius: 0;\n    }\n\n    &.type_0{ //Pad\n      background: #2058a2;\n    }\n    &.type_1, &.type_2, &.type_3{ //bike\n      background: #6820a2;\n    }\n    &.type_4, &.type_5, &.type_6, &.type_7{ //car\n      background: #20a29e;\n    }\n    &.type_8, &.type_9, &.type_10, &.type_11,&.type_12{ //car\n      background: #a24720;\n    }\n  }\n  .icon{\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #fff;\n    font-size: 21px;\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=613e94dc&scoped=true\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=613e94dc&prod&scoped=true&lang=scss\"\nimport style1 from \"./Datastreams.vue?vue&type=style&index=1&id=613e94dc&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"613e94dc\",\n  null\n  \n)\n\nexport default component.exports","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport Vue from 'vue'\nimport VueRouter, { RouteConfig } from 'vue-router'\nimport Map from \"@/views/Map.vue\";\nimport Tree from \"@/components/Tree.vue\";\nimport DatastreamsV from \"@/views/Datastreams.vue\";\n\nVue.use(VueRouter)\n\nconst routes: Array<RouteConfig> = [\n  {\n    path: '/details',\n    name: 'map',\n    component: Map,\n    children:[{\n      path: 'location/:id',\n      component: Tree,\n    }]\n  },\n  {\n    path: '/',\n    name: 'datastreams',\n    component: DatastreamsV,\n  }\n]\n\nconst router = new VueRouter({\n  mode: 'hash',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport VueI18n from \"vue-i18n\";\nimport TranslationDE from \"@/locales/de/translation.json\";\n\nimport Vue from \"vue\";\n\nVue.use(VueI18n);\nconst i18n:VueI18n = new VueI18n({\n    locale: 'de', // set locale\n    messages:{\n        de:TranslationDE,\n    },\n\n});\nexport default i18n;\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport {SimpleStore} from \"@/store/SimpleStore\";\nimport {Vue} from \"vue-property-decorator\";\n\n\n\nexport default class ObsStore implements SimpleStore {\n\n  private worker = new Worker(new URL(\"@/worker/obs.ts\", import.meta.url));\n  constructor(...args:any) {\n    this.worker.postMessage({command:'start'})\n    this.worker.onmessage = (ev)=>{\n      //console.log('msg in')\n      this.state.obs = ev.data.obs;\n    }\n  }\n  public state = Vue.observable({\n    obs: {},\n  });\n\n\n\n\n\n  setPoints(points:any){\n    this.worker.postMessage({command:'setPoints',payload:points})\n  }\n\n  update(): any {\n  }\n\n}\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\n\n/*export interface simpleStoreIF{\n    toolname: ToolnameStore,\n    toolImage: ToolImageStore,\n    strokes: StokesStore,\n    counters: CounterStore,\n    headImage: HeadImageStore\n}*/\nimport ObsStore from \"@/store/ObsStore\";\n\n\nexport interface simpleStoreIF{\n    [index: string]: SimpleStore;\n}\n\n\n\nexport const simpleStore:simpleStoreIF = {\n    obs:new ObsStore()\n\n};\n\nexport default {\n    install(Vue:any, options:any) {\n        Vue.prototype.$sstore = simpleStore;\n    },\n    update(){\n      for (let key in simpleStore){\n          simpleStore[key].update();\n      }\n    }\n\n};\n\n\nexport interface SimpleStore {\n    state: any\n\n    update():any\n\n}\n","/*********************************************************************\n * Copyright (c) YYYY Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport 'leaflet/dist/leaflet.css';\nimport {Icon} from \"leaflet\";\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\nimport i18n from \"@/i18n\";\nimport VueI18n from \"vue-i18n\";\n// @ts-ignore\nimport VueTreeList from 'vue-tree-list';\nimport './scss/general.scss';\nimport '@mdi/font/css/materialdesignicons.css'\nimport PerfectScrollbar from \"vue2-perfect-scrollbar\";\nimport \"vue2-perfect-scrollbar/dist/vue2-perfect-scrollbar.css\";\nimport SimpleStore from './store/SimpleStore'\nVue.use(SimpleStore);\nVue.use(PerfectScrollbar);\nVue.use(VueTreeList)\nVue.config.productionTip = false\n//@ts-ignore\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\ntype D = Icon.Default & {\n  _getIconUrl?: string;\n};\n\ndelete (Icon.Default.prototype as D)._getIconUrl;\nVue.use(Buefy);\nVue.use(VueI18n);\n\nnew Vue({\n  router,\n  i18n,\n  render: h => h(App)\n}).$mount('#app')\n","var map = {\n\t\"./af\": 5177,\n\t\"./af.js\": 5177,\n\t\"./ar\": 1509,\n\t\"./ar-dz\": 1488,\n\t\"./ar-dz.js\": 1488,\n\t\"./ar-kw\": 8676,\n\t\"./ar-kw.js\": 8676,\n\t\"./ar-ly\": 2353,\n\t\"./ar-ly.js\": 2353,\n\t\"./ar-ma\": 4496,\n\t\"./ar-ma.js\": 4496,\n\t\"./ar-ps\": 6947,\n\t\"./ar-ps.js\": 6947,\n\t\"./ar-sa\": 2682,\n\t\"./ar-sa.js\": 2682,\n\t\"./ar-tn\": 9756,\n\t\"./ar-tn.js\": 9756,\n\t\"./ar.js\": 1509,\n\t\"./az\": 5533,\n\t\"./az.js\": 5533,\n\t\"./be\": 8959,\n\t\"./be.js\": 8959,\n\t\"./bg\": 7777,\n\t\"./bg.js\": 7777,\n\t\"./bm\": 4903,\n\t\"./bm.js\": 4903,\n\t\"./bn\": 1290,\n\t\"./bn-bd\": 7357,\n\t\"./bn-bd.js\": 7357,\n\t\"./bn.js\": 1290,\n\t\"./bo\": 1545,\n\t\"./bo.js\": 1545,\n\t\"./br\": 1470,\n\t\"./br.js\": 1470,\n\t\"./bs\": 4429,\n\t\"./bs.js\": 4429,\n\t\"./ca\": 7306,\n\t\"./ca.js\": 7306,\n\t\"./cs\": 6464,\n\t\"./cs.js\": 6464,\n\t\"./cv\": 3635,\n\t\"./cv.js\": 3635,\n\t\"./cy\": 4226,\n\t\"./cy.js\": 4226,\n\t\"./da\": 3601,\n\t\"./da.js\": 3601,\n\t\"./de\": 7853,\n\t\"./de-at\": 6111,\n\t\"./de-at.js\": 6111,\n\t\"./de-ch\": 4697,\n\t\"./de-ch.js\": 4697,\n\t\"./de.js\": 7853,\n\t\"./dv\": 708,\n\t\"./dv.js\": 708,\n\t\"./el\": 4691,\n\t\"./el.js\": 4691,\n\t\"./en-au\": 3872,\n\t\"./en-au.js\": 3872,\n\t\"./en-ca\": 8298,\n\t\"./en-ca.js\": 8298,\n\t\"./en-gb\": 6195,\n\t\"./en-gb.js\": 6195,\n\t\"./en-ie\": 6584,\n\t\"./en-ie.js\": 6584,\n\t\"./en-il\": 5543,\n\t\"./en-il.js\": 5543,\n\t\"./en-in\": 9033,\n\t\"./en-in.js\": 9033,\n\t\"./en-nz\": 9402,\n\t\"./en-nz.js\": 9402,\n\t\"./en-sg\": 3004,\n\t\"./en-sg.js\": 3004,\n\t\"./eo\": 2934,\n\t\"./eo.js\": 2934,\n\t\"./es\": 7650,\n\t\"./es-do\": 838,\n\t\"./es-do.js\": 838,\n\t\"./es-mx\": 7730,\n\t\"./es-mx.js\": 7730,\n\t\"./es-us\": 6575,\n\t\"./es-us.js\": 6575,\n\t\"./es.js\": 7650,\n\t\"./et\": 3035,\n\t\"./et.js\": 3035,\n\t\"./eu\": 3508,\n\t\"./eu.js\": 3508,\n\t\"./fa\": 119,\n\t\"./fa.js\": 119,\n\t\"./fi\": 527,\n\t\"./fi.js\": 527,\n\t\"./fil\": 5995,\n\t\"./fil.js\": 5995,\n\t\"./fo\": 2477,\n\t\"./fo.js\": 2477,\n\t\"./fr\": 5498,\n\t\"./fr-ca\": 6435,\n\t\"./fr-ca.js\": 6435,\n\t\"./fr-ch\": 7892,\n\t\"./fr-ch.js\": 7892,\n\t\"./fr.js\": 5498,\n\t\"./fy\": 7071,\n\t\"./fy.js\": 7071,\n\t\"./ga\": 1734,\n\t\"./ga.js\": 1734,\n\t\"./gd\": 217,\n\t\"./gd.js\": 217,\n\t\"./gl\": 7329,\n\t\"./gl.js\": 7329,\n\t\"./gom-deva\": 2124,\n\t\"./gom-deva.js\": 2124,\n\t\"./gom-latn\": 3383,\n\t\"./gom-latn.js\": 3383,\n\t\"./gu\": 5050,\n\t\"./gu.js\": 5050,\n\t\"./he\": 1713,\n\t\"./he.js\": 1713,\n\t\"./hi\": 3861,\n\t\"./hi.js\": 3861,\n\t\"./hr\": 6308,\n\t\"./hr.js\": 6308,\n\t\"./hu\": 609,\n\t\"./hu.js\": 609,\n\t\"./hy-am\": 7160,\n\t\"./hy-am.js\": 7160,\n\t\"./id\": 4063,\n\t\"./id.js\": 4063,\n\t\"./is\": 9374,\n\t\"./is.js\": 9374,\n\t\"./it\": 8383,\n\t\"./it-ch\": 1827,\n\t\"./it-ch.js\": 1827,\n\t\"./it.js\": 8383,\n\t\"./ja\": 3827,\n\t\"./ja.js\": 3827,\n\t\"./jv\": 9722,\n\t\"./jv.js\": 9722,\n\t\"./ka\": 1794,\n\t\"./ka.js\": 1794,\n\t\"./kk\": 7088,\n\t\"./kk.js\": 7088,\n\t\"./km\": 6870,\n\t\"./km.js\": 6870,\n\t\"./kn\": 4451,\n\t\"./kn.js\": 4451,\n\t\"./ko\": 3164,\n\t\"./ko.js\": 3164,\n\t\"./ku\": 8174,\n\t\"./ku-kmr\": 6181,\n\t\"./ku-kmr.js\": 6181,\n\t\"./ku.js\": 8174,\n\t\"./ky\": 8474,\n\t\"./ky.js\": 8474,\n\t\"./lb\": 9680,\n\t\"./lb.js\": 9680,\n\t\"./lo\": 5867,\n\t\"./lo.js\": 5867,\n\t\"./lt\": 5766,\n\t\"./lt.js\": 5766,\n\t\"./lv\": 9532,\n\t\"./lv.js\": 9532,\n\t\"./me\": 8076,\n\t\"./me.js\": 8076,\n\t\"./mi\": 1848,\n\t\"./mi.js\": 1848,\n\t\"./mk\": 306,\n\t\"./mk.js\": 306,\n\t\"./ml\": 3739,\n\t\"./ml.js\": 3739,\n\t\"./mn\": 9053,\n\t\"./mn.js\": 9053,\n\t\"./mr\": 6169,\n\t\"./mr.js\": 6169,\n\t\"./ms\": 3386,\n\t\"./ms-my\": 2297,\n\t\"./ms-my.js\": 2297,\n\t\"./ms.js\": 3386,\n\t\"./mt\": 7075,\n\t\"./mt.js\": 7075,\n\t\"./my\": 2264,\n\t\"./my.js\": 2264,\n\t\"./nb\": 2274,\n\t\"./nb.js\": 2274,\n\t\"./ne\": 8235,\n\t\"./ne.js\": 8235,\n\t\"./nl\": 2572,\n\t\"./nl-be\": 3784,\n\t\"./nl-be.js\": 3784,\n\t\"./nl.js\": 2572,\n\t\"./nn\": 4566,\n\t\"./nn.js\": 4566,\n\t\"./oc-lnc\": 9330,\n\t\"./oc-lnc.js\": 9330,\n\t\"./pa-in\": 9849,\n\t\"./pa-in.js\": 9849,\n\t\"./pl\": 4418,\n\t\"./pl.js\": 4418,\n\t\"./pt\": 9834,\n\t\"./pt-br\": 8303,\n\t\"./pt-br.js\": 8303,\n\t\"./pt.js\": 9834,\n\t\"./ro\": 4457,\n\t\"./ro.js\": 4457,\n\t\"./ru\": 2271,\n\t\"./ru.js\": 2271,\n\t\"./sd\": 1221,\n\t\"./sd.js\": 1221,\n\t\"./se\": 3478,\n\t\"./se.js\": 3478,\n\t\"./si\": 7538,\n\t\"./si.js\": 7538,\n\t\"./sk\": 5784,\n\t\"./sk.js\": 5784,\n\t\"./sl\": 6637,\n\t\"./sl.js\": 6637,\n\t\"./sq\": 6794,\n\t\"./sq.js\": 6794,\n\t\"./sr\": 5719,\n\t\"./sr-cyrl\": 3322,\n\t\"./sr-cyrl.js\": 3322,\n\t\"./sr.js\": 5719,\n\t\"./ss\": 6000,\n\t\"./ss.js\": 6000,\n\t\"./sv\": 1011,\n\t\"./sv.js\": 1011,\n\t\"./sw\": 748,\n\t\"./sw.js\": 748,\n\t\"./ta\": 1025,\n\t\"./ta.js\": 1025,\n\t\"./te\": 1885,\n\t\"./te.js\": 1885,\n\t\"./tet\": 8861,\n\t\"./tet.js\": 8861,\n\t\"./tg\": 6571,\n\t\"./tg.js\": 6571,\n\t\"./th\": 5802,\n\t\"./th.js\": 5802,\n\t\"./tk\": 9527,\n\t\"./tk.js\": 9527,\n\t\"./tl-ph\": 9231,\n\t\"./tl-ph.js\": 9231,\n\t\"./tlh\": 1052,\n\t\"./tlh.js\": 1052,\n\t\"./tr\": 5096,\n\t\"./tr.js\": 5096,\n\t\"./tzl\": 9846,\n\t\"./tzl.js\": 9846,\n\t\"./tzm\": 1765,\n\t\"./tzm-latn\": 7711,\n\t\"./tzm-latn.js\": 7711,\n\t\"./tzm.js\": 1765,\n\t\"./ug-cn\": 8414,\n\t\"./ug-cn.js\": 8414,\n\t\"./uk\": 6618,\n\t\"./uk.js\": 6618,\n\t\"./ur\": 158,\n\t\"./ur.js\": 158,\n\t\"./uz\": 7609,\n\t\"./uz-latn\": 2475,\n\t\"./uz-latn.js\": 2475,\n\t\"./uz.js\": 7609,\n\t\"./vi\": 1135,\n\t\"./vi.js\": 1135,\n\t\"./x-pseudo\": 4051,\n\t\"./x-pseudo.js\": 4051,\n\t\"./yo\": 2218,\n\t\"./yo.js\": 2218,\n\t\"./zh-cn\": 2648,\n\t\"./zh-cn.js\": 2648,\n\t\"./zh-hk\": 1632,\n\t\"./zh-hk.js\": 1632,\n\t\"./zh-mo\": 1541,\n\t\"./zh-mo.js\": 1541,\n\t\"./zh-tw\": 304,\n\t\"./zh-tw.js\": 304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5358;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"702\":\"6c139855\",\"818\":\"732be9ab\"}[chunkId] + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksensor_thing_api_map\"] = self[\"webpackChunksensor_thing_api_map\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(2627); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","_setupProxy","attrs","showInfoBox","infoUri","_e","staticRenderFns","model","value","active","callback","$$v","expression","staticClass","staticStyle","InfoBox","Vue","constructor","args","_defineProperty","__decorate","Prop","default","Component","component","App","mounted","window","location","protocol","host","config","axios","get","data","INFO_CHECK_URI","INFO_BASE_URI","status","e","console","log","components","baseurl","on","$event","connect","_v","zoom","center","url","attribution","_l","points","point","key","pol","markerWasClicked","res","features","geometry","coordinates","class","selected","treeData","BASE_PATH","replace","BaseAPI","configuration","basePath","globalAxios","RequiredError","Error","field","msg","super","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setFlattenedQueryParams","urlSearchParams","parameter","Array","isArray","forEach","item","Object","keys","currentKey","has","append","set","setSearchParams","objects","searchParams","URLSearchParams","search","toString","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","DatastreamsApiAxiosParamCreator","v11DatastreamsEntityIdGet","async","entityId","$select","$expand","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","headers","v11DatastreamsEntityIdObservationsGet","$skip","$top","$count","$filter","v11DatastreamsEntityIdObservedPropertyDatastreamsGet","v11DatastreamsEntityIdObservedPropertyGet","v11DatastreamsEntityIdSensorDatastreamsGet","v11DatastreamsEntityIdSensorGet","v11DatastreamsEntityIdThingDatastreamsGet","v11DatastreamsEntityIdThingGet","v11DatastreamsEntityIdThingLocationsGet","v11DatastreamsGet","DatastreamsApiFp","localVarAxiosParamCreator","localVarAxiosArgs","DatastreamsApi","then","LocationsApiAxiosParamCreator","v11LocationsEntityIdGet","v11LocationsEntityIdThingsGet","v11LocationsGet","LocationsApiFp","LocationsApi","ThingsApiAxiosParamCreator","v11ThingsEntityIdDatastreamsGet","v11ThingsEntityIdGet","v11ThingsEntityIdLocationsGet","v11ThingsGet","ThingsApiFp","ThingsApi","Configuration","param","apiKey","username","password","accessToken","formDataCtor","isJsonMime","mime","jsonMime","RegExp","test","toLowerCase","type","loading","activeTab","_s","$i18n","t","description","encodingType","join","properties","ThingC","LocationC","ThingsC","noprops","chartdata","chartOptions","baseUrl","setBaseUrl","getBaseUrl","ChartJS","register","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","TimeScale","ObservationsC","maxBarThickness","barThickness","plugins","legend","display","responsive","maintainAspectRatio","scales","time","displayFormats","dataChanged","newD","loadData","observations","id","labels","map","moment","resultTime","datasets","label","title","backgroundColor","result","Watch","Bar","DatastreamsC","ret","atr","entries","Observations","PropertiesC","data_changed","new_data","Datastreams","Location","Thing","Map","load","arr","$router","push","params_chanded","params","immediate","LMap","LTileLayer","LMarker","LIcon","LPolygon","treeTypes","openAll","contextItems","contextSelected","TreeC","max_children","max_depth","valid_children","icon","$route","Math","random","text","count","children","id_changed","node","selectedNode","$emit","getThingsTree","child","addNode","_data","datastreams","getDatascreamsTree","datastreamsNode","things","thing","datastream","getObservationTree","observation","getTypeRule","typeRule","filter","command","editName","VTreeview","_m","deselect","updateCenter","updateZoom","maxNativeZoom","maxZoom","viewports","viewport","query","enabledTraficLights","includes","pointToLayer","styleP","observationsGeoJsonMqtt","geoJsonTragicLight","geojson","style","centerPoints","length","ref","spiderfyDistanceMultiplier","animate","animateAddingMarkers","zoomToBoundsOnClick","disableClusteringAtZoom","nativeOn","ev","stopImmediatePropagation","apply","arguments","split","reverse","getPath","select","mqtt_items","selectedData","leaf","$t","childs_shown","groupByCategory","groupByCategoryAndThing","mdiTrafficLight","mdiBattery40","mdiGrain","mdiGauge","mdiCloudPercent","mdiWeatherDust","mdiThermometerLow","mdiCamera","mdiCameraControl","mdiHazardLights","StreamTreeC","query_changed_out","new_query_params","query_changed","force","oldEnabledCategories","enabledCategories","array_of_key_to_select","selectedNodesKeys","emit","concat","coord","catch","err","groups","v","entry","spl","getDatascreamsTreeThings","isactive","SvgIcon","isBool","unit","Datapoint","handler","$sstore","obs","state","categories","cat","itemsByCategory","MqttList","items_changed","nv","el","listItems","Set","o","items","find","methods","DatastreamsV","feature","layer","bindTooltip","direction","permanent","className","mqtt","Worker","postMessage","onmessage","evt","MqttItems","r","configs","values","parseInt","splitArr","lat","parseFloat","lng","observedArea","$refs","streamTree","datastreamsbyID","rev","checkFeatureCollectionRaw","checkFeatureCollection","checkPoint","latitude","longitude","locations","observationsGeoJson","f","turf","proms","loctype","Promise","rej","thingsLoaction","all","setPoints","getDataForPoints","settimer","clearTimer","clusterRef2","mapObject","refreshClusters","beforeDestroy","swapCoords","coords","L","featureid","weight","color","opacity","fillColor","fillOpacity","latlng","div","document","createElement","inner","classList","add","heading","deg","webkitTransform","transform","innerHTML","html","styleC","camPointsSytle","wrapper","SetobservationsGeoJsonMqtt","isSelected","splitt","StreamTree","LGeoJson","LWMSTileLayer","Vue2LeafletMarkercluster","CustomMarker","use","VueRouter","routes","path","Tree","router","mode","base","process","VueI18n","i18n","locale","messages","de","TranslationDE","ObsStore","observable","worker","payload","update","simpleStore","install","prototype","SimpleStore","PerfectScrollbar","VueTreeList","productionTip","Icon","Default","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","Buefy","h","$mount","webpackContext","req","webpackContextResolve","__webpack_require__","code","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","n","getter","__esModule","d","a","definition","defineProperty","enumerable","u","chunkId","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","b","baseURI","self","href","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}