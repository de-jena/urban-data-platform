{"version":3,"file":"js/591.02195083.js","mappings":"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","sources":["webpack://sensor_thing_api_map/./node_modules/core-js/internals/a-callable.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/an-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/array-includes.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/array-set-length.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/classof-raw.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/copy-constructor-properties.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/create-non-enumerable-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/create-property-descriptor.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/define-built-in.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/define-global-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/descriptors.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/document-all.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/document-create-element.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/does-not-exceed-safe-integer.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/engine-user-agent.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/engine-v8-version.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/enum-bug-keys.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/export.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/fails.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-bind-native.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-call.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-name.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-uncurry-this.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/get-built-in.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/get-method.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/global.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/has-own-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/hidden-keys.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/ie8-dom-define.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/indexed-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/inspect-source.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/internal-state.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-array.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-callable.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-forced.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-null-or-undefined.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-pure.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-symbol.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/length-of-array-like.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/make-built-in.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/math-trunc.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-define-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-get-own-property-descriptor.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-get-own-property-names.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-get-own-property-symbols.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-is-prototype-of.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-keys-internal.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-property-is-enumerable.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/ordinary-to-primitive.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/own-keys.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/require-object-coercible.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/shared-key.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/shared-store.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/shared.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/symbol-constructor-detection.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-absolute-index.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-indexed-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-integer-or-infinity.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-length.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-primitive.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-property-key.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/try-to-string.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/uid.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/use-symbol-as-uid.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/v8-prototype-define-bug.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/weak-map-basic-detection.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/well-known-symbol.js","webpack://sensor_thing_api_map/./node_modules/core-js/modules/es.array.push.js","webpack://sensor_thing_api_map/webpack/bootstrap","webpack://sensor_thing_api_map/webpack/runtime/global","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/bind.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/utils.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/AxiosError.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/null.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/toFormData.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/AxiosURLSearchParams.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/buildURL.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/InterceptorManager.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/defaults/transitional.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/classes/FormData.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/index.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/toURLEncodedForm.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/formDataToJSON.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/defaults/index.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/parseHeaders.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/AxiosHeaders.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/transformData.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/cancel/isCancel.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/cancel/CanceledError.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/settle.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/cookies.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/combineURLs.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/buildFullPath.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/parseProtocol.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/speedometer.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/adapters/xhr.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/adapters/adapters.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/dispatchRequest.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/mergeConfig.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/env/data.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/validator.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/Axios.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/cancel/CancelToken.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/spread.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/isAxiosError.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/HttpStatusCode.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/axios.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://sensor_thing_api_map/./openapi/client/base.ts","webpack://sensor_thing_api_map/./openapi/client/common.ts","webpack://sensor_thing_api_map/./openapi/client/api.ts","webpack://sensor_thing_api_map/./openapi/client/configuration.ts","webpack://sensor_thing_api_map/./src/config/base.ts","webpack://sensor_thing_api_map/./src/worker/obs.ts"],"sourcesContent":["var isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw $TypeError(tryToString(argument) + ' is not a function');\n};\n","var isObject = require('../internals/is-object');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw $TypeError($String(argument) + ' is not an object');\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar isArray = require('../internals/is-array');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Safari < 13 does not throw an error in this case\nvar SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function () {\n  // makes no sense without proper strict mode support\n  if (this !== undefined) return true;\n  try {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty([], 'length', { writable: false }).length = 1;\n  } catch (error) {\n    return error instanceof TypeError;\n  }\n}();\n\nmodule.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function (O, length) {\n  if (isArray(O) && !getOwnPropertyDescriptor(O, 'length').writable) {\n    throw $TypeError('Cannot set read only .length');\n  } return O.length = length;\n} : function (O, length) {\n  return O.length = length;\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n","var hasOwn = require('../internals/has-own-property');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var isCallable = require('../internals/is-callable');\nvar definePropertyModule = require('../internals/object-define-property');\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nmodule.exports = function (O, key, value, options) {\n  if (!options) options = {};\n  var simple = options.enumerable;\n  var name = options.name !== undefined ? options.name : key;\n  if (isCallable(value)) makeBuiltIn(value, name, options);\n  if (options.global) {\n    if (simple) O[key] = value;\n    else defineGlobalProperty(key, value);\n  } else {\n    try {\n      if (!options.unsafe) delete O[key];\n      else if (O[key]) simple = true;\n    } catch (error) { /* empty */ }\n    if (simple) O[key] = value;\n    else definePropertyModule.f(O, key, {\n      value: value,\n      enumerable: false,\n      configurable: !options.nonConfigurable,\n      writable: !options.nonWritable\n    });\n  } return O;\n};\n","var global = require('../internals/global');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(global, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n","var fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n","var documentAll = typeof document == 'object' && document.all;\n\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nvar IS_HTMLDDA = typeof documentAll == 'undefined' && documentAll !== undefined;\n\nmodule.exports = {\n  all: documentAll,\n  IS_HTMLDDA: IS_HTMLDDA\n};\n","var global = require('../internals/global');\nvar isObject = require('../internals/is-object');\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","var $TypeError = TypeError;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991\n\nmodule.exports = function (it) {\n  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');\n  return it;\n};\n","module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';\n","var global = require('../internals/global');\nvar userAgent = require('../internals/engine-user-agent');\n\nvar process = global.process;\nvar Deno = global.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn(target, key, sourceProperty, options);\n  }\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","var fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n","var NATIVE_BIND = require('../internals/function-bind-native');\n\nvar call = Function.prototype.call;\n\nmodule.exports = NATIVE_BIND ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n","var NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar call = FunctionPrototype.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n\nmodule.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call.apply(fn, arguments);\n  };\n};\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (argument) {\n  return isCallable(argument) ? argument : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];\n};\n","var aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined(func) ? undefined : aCallable(func);\n};\n","var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n","module.exports = {};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thanks to IE8 for its funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar $Object = Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split(it, '') : $Object(it);\n} : $Object;\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","var NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');\nvar global = require('../internals/global');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = global.TypeError;\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nmodule.exports = Array.isArray || function isArray(argument) {\n  return classof(argument) == 'Array';\n};\n","var $documentAll = require('../internals/document-all');\n\nvar documentAll = $documentAll.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nmodule.exports = $documentAll.IS_HTMLDDA ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n","var fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nmodule.exports = function (it) {\n  return it === null || it === undefined;\n};\n","var isCallable = require('../internals/is-callable');\nvar $documentAll = require('../internals/document-all');\n\nvar documentAll = $documentAll.all;\n\nmodule.exports = $documentAll.IS_HTMLDDA ? function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it) || it === documentAll;\n} : function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n","module.exports = false;\n","var getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar $Object = Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n};\n","var toLength = require('../internals/to-length');\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar $String = String;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\nvar stringSlice = uncurryThis(''.slice);\nvar replace = uncurryThis(''.replace);\nvar join = uncurryThis([].join);\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {\n  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn = module.exports = function (value, name, options) {\n  if (stringSlice($String(name), 0, 7) === 'Symbol(') {\n    name = '[' + replace($String(name), /^Symbol\\(([^)]*)\\)/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {\n    defineProperty(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState(value);\n  if (!hasOwn(state, 'source')) {\n    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn(function toString() {\n  return isCallable(this) && getInternalState(this).source || inspectSource(this);\n}, 'toString');\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nmodule.exports = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor : ceil)(n);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar call = require('../internals/function-call');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar hasOwn = require('../internals/has-own-property');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n","var internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n","'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n","var call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar $TypeError = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw $TypeError(\"Can't convert object to primitive value\");\n};\n","var getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n","var isNullOrUndefined = require('../internals/is-null-or-undefined');\n\nvar $TypeError = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) throw $TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","var global = require('../internals/global');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || defineGlobalProperty(SHARED, {});\n\nmodule.exports = store;\n","var IS_PURE = require('../internals/is-pure');\nvar store = require('../internals/shared-store');\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.27.2',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.27.2/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n","/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/engine-v8-version');\nvar fails = require('../internals/fails');\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol();\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","var trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n","var toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $Object = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return $Object(requireObjectCoercible(argument));\n};\n","var call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $TypeError = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw $TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n","var toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n","var $String = String;\n\nmodule.exports = function (argument) {\n  try {\n    return $String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n","/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","var DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nmodule.exports = DESCRIPTORS && fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype != 42;\n});\n","var global = require('../internals/global');\nvar isCallable = require('../internals/is-callable');\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));\n","var global = require('../internals/global');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Symbol = global.Symbol;\nvar WellKnownSymbolsStore = shared('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)\n      ? Symbol[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar setArrayLength = require('../internals/array-set-length');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar fails = require('../internals/fails');\n\nvar INCORRECT_TO_LENGTH = fails(function () {\n  return [].push.call({ length: 0x100000000 }, 1) !== 4294967297;\n});\n\n// V8 and Safari <= 15.4, FF < 23 throws InternalError\n// https://bugs.chromium.org/p/v8/issues/detail?id=12681\nvar properErrorOnNonWritableLength = function () {\n  try {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty([], 'length', { writable: false }).push();\n  } catch (error) {\n    return error instanceof TypeError;\n  }\n};\n\nvar FORCED = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();\n\n// `Array.prototype.push` method\n// https://tc39.es/ecma262/#sec-array.prototype.push\n$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  push: function push(item) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var argCount = arguments.length;\n    doesNotExceedSafeInteger(len + argCount);\n    for (var i = 0; i < argCount; i++) {\n      O[len] = arguments[i];\n      len++;\n    }\n    setArrayLength(O, len);\n    return len;\n  }\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  const pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    if (reducer(descriptor, name, obj) !== false) {\n      reducedDescriptors[name] = descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject\n};\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","'use strict';\n\nexport default FormData;\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== 'undefined' && (\n    (product = navigator.product) === 'ReactNative' ||\n    product === 'NativeScript' ||\n    product === 'NS')\n  ) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\n const isStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\nconst DEFAULT_CONTENT_TYPE = {\n  'Content-Type': undefined\n};\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nexport default defaults;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nfunction isValidHeaderName(str) {\n  return /^[-_a-zA-Z]+$/.test(str.trim());\n}\n\nfunction matchHeaderValue(context, value, header, filter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv)) {\n      requestHeaders.setContentType(false); // Let the browser set it\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath))\n        && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if(fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      if((adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter)) {\n        break;\n      }\n    }\n\n    if (!adapter) {\n      if (adapter === false) {\n        throw new AxiosError(\n          `Adapter ${nameOrAdapter} is not supported by the environment`,\n          'ERR_NOT_SUPPORT'\n        );\n      }\n\n      throw new Error(\n        utils.hasOwnProp(knownAdapters, nameOrAdapter) ?\n          `Adapter '${nameOrAdapter}' is not available in the build` :\n          `Unknown adapter '${nameOrAdapter}'`\n      );\n    }\n\n    if (!utils.isFunction(adapter)) {\n      throw new TypeError('adapter is not a function');\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","export const VERSION = \"1.3.2\";","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer !== undefined) {\n      validator.assertOptions(paramsSerializer, {\n        encode: validators.function,\n        serialize: validators.function\n      }, true);\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    let contextHeaders;\n\n    // Flatten headers\n    contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    contextHeaders && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}","import _typeof from \"./typeof.js\";\nexport default function toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://sensors.bgs.ac.uk/FROST-Server\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Datastream\n */\nexport interface Datastream {\n    /**\n     * The Id of the datastream\n     * @type {number}\n     * @memberof Datastream\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Datastream\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Datastream\n     */\n    'Observations'?: Array<Observation>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastream\n     */\n    'Observations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {ObservedProperty}\n     * @memberof Datastream\n     */\n    'ObservedProperty'?: ObservedProperty;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'ObservedProperty@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Sensor}\n     * @memberof Datastream\n     */\n    'Sensor'?: Sensor;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Sensor@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Thing}\n     * @memberof Datastream\n     */\n    'Thing'?: Thing;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Thing@iot.navigationLink'?: string;\n    /**\n     * A description of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'description'?: string;\n    /**\n     * The label or name of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'name'?: string;\n    /**\n     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observationType'?: string;\n    /**\n     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observedArea'?: string;\n    /**\n     * The range of phenomenon times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'phenomenonTime'?: string;\n    /**\n     * \n     * @type {DatastreamProperties}\n     * @memberof Datastream\n     */\n    'properties'?: DatastreamProperties;\n    /**\n     * The range of result times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'resultTime'?: string;\n    /**\n     * \n     * @type {DatastreamUnitOfMeasurement}\n     * @memberof Datastream\n     */\n    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;\n}\n/**\n * \n * @export\n * @interface DatastreamProperties\n */\nexport interface DatastreamProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface DatastreamUnitOfMeasurement\n */\nexport interface DatastreamUnitOfMeasurement {\n    /**\n     * The full name of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'name'?: string;\n    /**\n     * The symbol of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'symbol'?: string;\n    /**\n     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'defintion'?: string;\n}\n/**\n * \n * @export\n * @interface Datastreams\n */\nexport interface Datastreams {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastreams\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastreams\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Datastreams\n     */\n    'value'?: Array<Datastream>;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterest\n */\nexport interface FeatureOfInterest {\n    /**\n     * The Id of the feature of interest\n     * @type {number}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'feature\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'encodingType'?: string;\n    /**\n     * The detailed description of the feature of interest, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'feature'?: string;\n    /**\n     * The label or name of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {FeatureOfInterestProperties}\n     * @memberof FeatureOfInterest\n     */\n    'properties'?: FeatureOfInterestProperties;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterestProperties\n */\nexport interface FeatureOfInterestProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the feature of interest type, set to \\'SEN_LOC\\' (Sensor Location) or \\'BOREHOLE\\'\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'type'?: string;\n    /**\n     * The elevation (Z) of the sensor location (type \\'SEN_LOC\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the sensor location is effective (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'to_date'?: string;\n    /**\n     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sobi_bgs_id'?: number;\n    /**\n     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'borehole_id'?: number;\n    /**\n     * The drilled length of the borehole in metres (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'drilled_length'?: number;\n    /**\n     * An alternative name by which the borehole is known (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference'?: string;\n    /**\n     * Indicates the source of the \\'reference\\' property (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference_type'?: string;\n    /**\n     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'publish_yn'?: string;\n}\n/**\n * \n * @export\n * @interface FeaturesOfInterest\n */\nexport interface FeaturesOfInterest {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<FeatureOfInterest>}\n     * @memberof FeaturesOfInterest\n     */\n    'value'?: Array<FeatureOfInterest>;\n}\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * The Id of the location\n     * @type {number}\n     * @memberof Location\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Location\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Location\n     */\n    'Things'?: Array<Thing>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Location\n     */\n    'Things@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.nextLink'?: string;\n    /**\n     * A description of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'location\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'encodingType'?: string;\n    /**\n     * The location, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'location'?: string;\n    /**\n     * The label or name of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {LocationProperties}\n     * @memberof Location\n     */\n    'properties'?: LocationProperties;\n}\n/**\n * \n * @export\n * @interface LocationProperties\n */\nexport interface LocationProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The name of the site to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'site'?: string;\n    /**\n     * The name of the observatory to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'observatory'?: string;\n    /**\n     * The elevation (Z) of the location\n     * @type {number}\n     * @memberof LocationProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the location is effective\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the location is no longer effective, where it is not set the location is still active\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'to_date'?: string;\n    /**\n     * Any additional information about the location where available\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'comments'?: string;\n    /**\n     * A flag to indicate whether the location is the active location for a thing (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this location can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Locations\n */\nexport interface Locations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Locations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Locations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Locations\n     */\n    'value'?: Array<Location>;\n}\n/**\n * \n * @export\n * @interface Observation\n */\nexport interface Observation {\n    /**\n     * The Id of the observation\n     * @type {number}\n     * @memberof Observation\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Observation\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {ObservationParameters}\n     * @memberof Observation\n     */\n    'parameters'?: ObservationParameters;\n    /**\n     * The time when the observation happened\n     * @type {string}\n     * @memberof Observation\n     */\n    'phenomenonTime'?: string;\n    /**\n     * The estimated value of the observed property\n     * @type {string}\n     * @memberof Observation\n     */\n    'result'?: string;\n    /**\n     * A description of the quality of the result\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultQuality'?: string;\n    /**\n     * The time the result was generated\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultTime'?: string;\n    /**\n     * The time period during which the result can be used\n     * @type {string}\n     * @memberof Observation\n     */\n    'validTime'?: string;\n}\n/**\n * \n * @export\n * @interface ObservationParameters\n */\nexport interface ObservationParameters {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Observations\n */\nexport interface Observations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Observations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Observations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Observations\n     */\n    'value'?: Array<Observation>;\n}\n/**\n * \n * @export\n * @interface ObservedProperties\n */\nexport interface ObservedProperties {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof ObservedProperties\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof ObservedProperties\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<ObservedProperty>}\n     * @memberof ObservedProperties\n     */\n    'value'?: Array<ObservedProperty>;\n}\n/**\n * \n * @export\n * @interface ObservedProperty\n */\nexport interface ObservedProperty {\n    /**\n     * The Id of the observed property\n     * @type {number}\n     * @memberof ObservedProperty\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'definition'?: string;\n    /**\n     * A description of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'description'?: string;\n    /**\n     * The label or name of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ObservedPropertyProperties}\n     * @memberof ObservedProperty\n     */\n    'properties'?: ObservedPropertyProperties;\n}\n/**\n * \n * @export\n * @interface ObservedPropertyProperties\n */\nexport interface ObservedPropertyProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the observed property (Measured or Calculated)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of the formula used to derive values for the observed property (data type \\'Calculated\\' only)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'formula'?: string;\n    /**\n     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensor\n */\nexport interface Sensor {\n    /**\n     * The Id of the sensor type\n     * @type {number}\n     * @memberof Sensor\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Sensor\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'metadata\\' property\n     * @type {string}\n     * @memberof Sensor\n     */\n    'encodingType'?: string;\n    /**\n     * A detailed description of the sensor type (style based on \\'encodingType\\' property)\n     * @type {string}\n     * @memberof Sensor\n     */\n    'metadata'?: string;\n    /**\n     * The label or name of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {SensorProperties}\n     * @memberof Sensor\n     */\n    'properties'?: SensorProperties;\n}\n/**\n * \n * @export\n * @interface SensorProperties\n */\nexport interface SensorProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'complex_data_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensors\n */\nexport interface Sensors {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Sensors\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Sensors\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Sensor>}\n     * @memberof Sensors\n     */\n    'value'?: Array<Sensor>;\n}\n/**\n * \n * @export\n * @interface Thing\n */\nexport interface Thing {\n    /**\n     * The Id of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.id'?: string;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Thing\n     */\n    'Datastreams'?: Array<Datastream>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Datastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Thing\n     */\n    'Locations'?: Array<Location>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Locations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.nextLink'?: string;\n    /**\n     * A description of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'description'?: string;\n    /**\n     * The label or name of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ThingProperties}\n     * @memberof Thing\n     */\n    'properties'?: ThingProperties;\n}\n/**\n * \n * @export\n * @interface ThingProperties\n */\nexport interface ThingProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the type of thing, set to \\'SENSOR\\'\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'type'?: string;\n    /**\n     * The serial number of the physical sensor currently installed if known\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'serial_no'?: string;\n    /**\n     * Indicates how data from the thing is captured (Telemetered, Manual)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_capture'?: string;\n    /**\n     * The earliest observation date for which data from the thing will be available in the API\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'observation_start_date'?: string;\n    /**\n     * The elevation (Z) of the thing\\'s datum\n     * @type {number}\n     * @memberof ThingProperties\n     */\n    'datum_z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the \\'datum_z\\' value\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_z_crs'?: string;\n    /**\n     * The label or name for the thing\\'s datum\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_name'?: string;\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'borehole_reference'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Things\n */\nexport interface Things {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Things\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Things\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Things\n     */\n    'value'?: Array<Thing>;\n}\n\n/**\n * DatastreamsApi - axios parameter creator\n * @export\n */\nexport const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Datastreams`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DatastreamsApi - functional programming interface\n * @export\n */\nexport const DatastreamsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DatastreamsApi - factory interface\n * @export\n */\nexport const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DatastreamsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DatastreamsApi - interface\n * @export\n * @interface DatastreamsApi\n */\nexport interface DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n}\n\n/**\n * DatastreamsApi - object-oriented interface\n * @export\n * @class DatastreamsApi\n * @extends {BaseAPI}\n */\nexport class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * FeaturesOfInterestApi - axios parameter creator\n * @export\n */\nexport const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/FeaturesOfInterest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - functional programming interface\n * @export\n */\nexport const FeaturesOfInterestApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - factory interface\n * @export\n */\nexport const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = FeaturesOfInterestApiFp(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {\n            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeaturesOfInterestApi - interface\n * @export\n * @interface FeaturesOfInterestApi\n */\nexport interface FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;\n\n}\n\n/**\n * FeaturesOfInterestApi - object-oriented interface\n * @export\n * @class FeaturesOfInterestApi\n * @extends {BaseAPI}\n */\nexport class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LocationsApi - axios parameter creator\n * @export\n */\nexport const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})/Things`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Locations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LocationsApi - functional programming interface\n * @export\n */\nexport const LocationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LocationsApi - factory interface\n * @export\n */\nexport const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LocationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {\n            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LocationsApi - interface\n * @export\n * @interface LocationsApi\n */\nexport interface LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n}\n\n/**\n * LocationsApi - object-oriented interface\n * @export\n * @class LocationsApi\n * @extends {BaseAPI}\n */\nexport class LocationsApi extends BaseAPI implements LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservationsApi - axios parameter creator\n * @export\n */\nexport const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Observations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservationsApi - functional programming interface\n * @export\n */\nexport const ObservationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservationsApi - factory interface\n * @export\n */\nexport const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {\n            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservationsApi - interface\n * @export\n * @interface ObservationsApi\n */\nexport interface ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n}\n\n/**\n * ObservationsApi - object-oriented interface\n * @export\n * @class ObservationsApi\n * @extends {BaseAPI}\n */\nexport class ObservationsApi extends BaseAPI implements ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservedPropertiesApi - axios parameter creator\n * @export\n */\nexport const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/ObservedProperties`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - functional programming interface\n * @export\n */\nexport const ObservedPropertiesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - factory interface\n * @export\n */\nexport const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservedPropertiesApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {\n            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservedPropertiesApi - interface\n * @export\n * @interface ObservedPropertiesApi\n */\nexport interface ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;\n\n}\n\n/**\n * ObservedPropertiesApi - object-oriented interface\n * @export\n * @class ObservedPropertiesApi\n * @extends {BaseAPI}\n */\nexport class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SensorsApi - axios parameter creator\n * @export\n */\nexport const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Sensors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SensorsApi - functional programming interface\n * @export\n */\nexport const SensorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SensorsApi - factory interface\n * @export\n */\nexport const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SensorsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {\n            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SensorsApi - interface\n * @export\n * @interface SensorsApi\n */\nexport interface SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;\n\n}\n\n/**\n * SensorsApi - object-oriented interface\n * @export\n * @class SensorsApi\n * @extends {BaseAPI}\n */\nexport class SensorsApi extends BaseAPI implements SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ThingsApi - axios parameter creator\n * @export\n */\nexport const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Things`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ThingsApi - functional programming interface\n * @export\n */\nexport const ThingsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ThingsApi - factory interface\n * @export\n */\nexport const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ThingsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ThingsApi - interface\n * @export\n * @interface ThingsApi\n */\nexport interface ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n}\n\n/**\n * ThingsApi - object-oriented interface\n * @export\n * @class ThingsApi\n * @extends {BaseAPI}\n */\nexport class ThingsApi extends BaseAPI implements ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\nconst config= {\n  //baseUrl:window.location.origin+'/sensinact/rest',\n  //baseUrl:'http://localhost:8080/sensinact/rest',\n  baseUrl:'https://5g.data-in-motion.biz/sensinact/rest',\n\n  //baseUrl:'http://192.168.178.12:8080/sensinact/rest',\n  //baseUrl: 'https://udp-5g-broker.nomad-dmz.jena.de/sensinact/rest'\n};\n\nexport default config;\nexport function setBaseUrl(url:string){\n  config.baseUrl = url;\n}\nexport function getBaseUrl(){\n  return config.baseUrl;\n}\n\n","import {Configuration, Observation, Observations, ObservationsApi} from \"../../openapi/client\";\nimport obserservation_karl from \"@/Mock/observation_karl.json\";\nimport {AxiosResponse} from \"axios\";\nimport {getBaseUrl} from \"@/config/base\";\nimport conf from '@/config/mqtt.json';\n\n\nlet points:any = [];\nconst state = {\n  obs: {} as any,\n};\nlet timer:number|null = null;\n\nconst setPoints = (apoints:any)=>{\n  points = apoints;\n}\n\nself.addEventListener(\"message\", evt => {\n  if(evt.data &&  evt.data.command == 'setPoints') setPoints(evt.data.payload);\n  if(evt.data &&  evt.data.command == 'start') start();\n  if(evt.data &&  evt.data.command == 'stop') stop();\n});\n\nconst getDataForPoints =async ()=>{\n  console.log('getData')\n  const proms:Promise<Observations>[] = []\n  points?.forEach((point:any)=> {\n\n    if (point[\"@iot.id\"] === 'karl') {\n      proms.push(new Promise((res,rej)=>{\n        res({\n          value: [\n            {\n              \"@iot.id\": \"karl\",\n              \"result\": obserservation_karl\n            }\n          ]\n        } as unknown as Observations);\n      }));\n    } else{\n\n      //@ts-ignore\n      proms.push(\n        new Promise(async (res, rej) => {\n          try {\n            //@ts-ignore\n            const result: AxiosResponse<> = await new ObservationsApi(new Configuration({basePath: getBaseUrl()})).v11ObservationsEntityIdDatastreamObservationsGet(point[\"@iot.id\"]);\n            if (result.data && result.data.value && result.data.value[0]) {\n              //@ts-ignore\n              (result.data.value[0] as LocationsPlus)[\"@iot.id\"] = point[\"@iot.id\"];\n              /*if( point[\"@iot.id\"] == 'FelsenkellerRadAuto~conflict~conflict'){\n                result.data.value[0].result = true;\n              }*/\n              res(result.data);\n            }\n            else{\n              //res( {value:[{result:true,\"@iot.id\":point[\"@iot.id\"]}]}as Observations);\n              rej(null)\n            }\n\n          } catch (e) {\n            rej(e)\n          }\n        }));\n    }\n  })\n  const promsSettled = await Promise.allSettled(proms);\n  //this.obs= new Map();\n  promsSettled.forEach((obj:any) => {\n    if(obj.value  && obj.value.value && obj.value.value[0]){\n      const value:string = obj.value.value[0][\"@iot.id\"] as string\n      state.obs[value]= obj.value.value[0];\n    }\n\n  });\n  postMessage(state);\n\n\n}\nconst start = ()=>{\n  if(!timer){\n    timer = self.setInterval(()=>getDataForPoints(),conf.obsRefreshIntervall)\n  }\n}\nconst stop = ()=>{\n  if(timer) {\n    clearInterval(timer)\n    timer = null;\n  }\n}\n"],"names":["isCallable","tryToString","$TypeError","TypeError","module","exports","argument","isObject","$String","String","toIndexedObject","toAbsoluteIndex","lengthOfArrayLike","createMethod","IS_INCLUDES","$this","el","fromIndex","value","O","length","index","includes","indexOf","DESCRIPTORS","isArray","getOwnPropertyDescriptor","Object","SILENT_ON_NON_WRITABLE_LENGTH_SET","undefined","this","defineProperty","writable","error","uncurryThis","toString","stringSlice","slice","it","hasOwn","ownKeys","getOwnPropertyDescriptorModule","definePropertyModule","target","source","exceptions","keys","f","i","key","createPropertyDescriptor","object","bitmap","enumerable","configurable","makeBuiltIn","defineGlobalProperty","options","simple","name","global","unsafe","nonConfigurable","nonWritable","fails","get","documentAll","document","all","IS_HTMLDDA","EXISTS","createElement","MAX_SAFE_INTEGER","navigator","userAgent","match","version","process","Deno","versions","v8","split","createNonEnumerableProperty","defineBuiltIn","copyConstructorProperties","isForced","FORCED","targetProperty","sourceProperty","descriptor","TARGET","GLOBAL","STATIC","stat","prototype","dontCallGetSet","forced","sham","exec","test","bind","hasOwnProperty","NATIVE_BIND","call","Function","apply","arguments","FunctionPrototype","getDescriptor","PROPER","CONFIGURABLE","uncurryThisWithBind","fn","aFunction","namespace","method","aCallable","isNullOrUndefined","V","P","func","check","Math","globalThis","window","self","g","toObject","a","classof","$Object","propertyIsEnumerable","store","functionToString","inspectSource","set","has","NATIVE_WEAK_MAP","shared","sharedKey","hiddenKeys","OBJECT_ALREADY_INITIALIZED","WeakMap","enforce","getterFor","TYPE","state","type","metadata","facade","STATE","Array","$documentAll","replacement","feature","detection","data","normalize","POLYFILL","NATIVE","string","replace","toLowerCase","getBuiltIn","isPrototypeOf","USE_SYMBOL_AS_UID","$Symbol","toLength","obj","CONFIGURABLE_FUNCTION_NAME","InternalStateModule","enforceInternalState","getInternalState","join","CONFIGURABLE_LENGTH","TEMPLATE","getter","setter","arity","constructor","ceil","floor","trunc","x","n","IE8_DOM_DEFINE","V8_PROTOTYPE_DEFINE_BUG","anObject","toPropertyKey","$defineProperty","$getOwnPropertyDescriptor","ENUMERABLE","WRITABLE","Attributes","current","propertyIsEnumerableModule","internalObjectKeys","enumBugKeys","concat","getOwnPropertyNames","getOwnPropertySymbols","push","names","result","$propertyIsEnumerable","NASHORN_BUG","input","pref","val","valueOf","getOwnPropertyNamesModule","getOwnPropertySymbolsModule","uid","SHARED","IS_PURE","mode","copyright","license","V8_VERSION","symbol","Symbol","toIntegerOrInfinity","max","min","integer","IndexedObject","requireObjectCoercible","number","isSymbol","getMethod","ordinaryToPrimitive","wellKnownSymbol","TO_PRIMITIVE","exoticToPrim","toPrimitive","id","postfix","random","NATIVE_SYMBOL","iterator","WellKnownSymbolsStore","createWellKnownSymbol","withoutSetter","$","setArrayLength","doesNotExceedSafeInteger","INCORRECT_TO_LENGTH","properErrorOnNonWritableLength","proto","item","len","argCount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","e","thisArg","getPrototypeOf","kindOf","cache","thing","str","create","kindOfTest","typeOfTest","isUndefined","isBuffer","isFunction","isArrayBuffer","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isBoolean","isPlainObject","toStringTag","isDate","isFile","isBlob","isFileList","isStream","pipe","isFormData","pattern","FormData","isURLSearchParams","trim","forEach","allOwnKeys","l","findKey","_key","_global","isContextDefined","context","merge","caseless","assignValue","targetKey","extend","b","stripBOM","content","charCodeAt","inherits","superConstructor","props","descriptors","assign","toFlatObject","sourceObj","destObj","filter","propFilter","prop","merged","endsWith","searchString","position","lastIndex","toArray","arr","isTypedArray","TypedArray","Uint8Array","forEachEntry","generator","next","done","pair","matchAll","regExp","matches","isHTMLForm","toCamelCase","m","p1","p2","toUpperCase","isRegExp","reduceDescriptors","reducer","getOwnPropertyDescriptors","reducedDescriptors","defineProperties","freezeMethods","Error","toObjectSet","arrayOrString","delimiter","define","noop","toFiniteNumber","defaultValue","Number","isFinite","ALPHA","DIGIT","ALPHABET","ALPHA_DIGIT","generateString","size","alphabet","isSpecCompliantForm","append","toJSONObject","stack","visit","reducedValue","hasOwnProp","AxiosError","message","code","config","request","response","captureStackTrace","utils","toJSON","description","fileName","lineNumber","columnNumber","status","from","customProps","axiosError","cause","isVisitable","removeBrackets","renderKey","path","dots","map","token","isFlatArray","some","predicates","toFormData","formData","metaTokens","indexes","option","visitor","defaultVisitor","_Blob","Blob","useBlob","convertValue","toISOString","Buffer","JSON","stringify","exposedHelpers","build","pop","encode","charMap","encodeURIComponent","AxiosURLSearchParams","params","_pairs","encoder","_encode","buildURL","url","serializeFn","serialize","serializedParams","hashmarkIndex","InterceptorManager","handlers","use","fulfilled","rejected","synchronous","runWhen","eject","clear","h","silentJSONParsing","forcedJSONParsing","clarifyTimeoutError","URLSearchParams","isStandardBrowserEnv","product","isStandardBrowserWebWorkerEnv","WorkerGlobalScope","importScripts","isBrowser","classes","protocols","toURLEncodedForm","helpers","parsePropPath","arrayToObject","formDataToJSON","buildPath","isNumericKey","isLast","entries","DEFAULT_CONTENT_TYPE","stringifySafely","rawValue","parser","parse","defaults","transitional","adapter","transformRequest","headers","contentType","getContentType","hasJSONContentType","isObjectPayload","setContentType","formSerializer","_FormData","env","transformResponse","JSONRequested","responseType","strictJSONParsing","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","common","ignoreDuplicateOf","rawHeaders","parsed","line","substring","$internals","normalizeHeader","header","normalizeValue","parseTokens","tokens","tokensRE","isValidHeaderName","matchHeaderValue","formatHeader","w","char","buildAccessors","accessorName","methodName","arg1","arg2","arg3","AxiosHeaders","valueOrRewrite","rewrite","setHeader","_value","_header","_rewrite","lHeader","setHeaders","parseHeaders","matcher","delete","deleted","deleteHeader","format","normalized","targets","asStrings","static","first","computed","internals","accessors","defineAccessor","accessor","transformData","fns","isCancel","__CANCEL__","CanceledError","settle","resolve","reject","write","expires","domain","secure","cookie","Date","toGMTString","read","RegExp","decodeURIComponent","remove","now","isAbsoluteURL","combineURLs","baseURL","relativeURL","buildFullPath","requestedURL","msie","urlParsingNode","originURL","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","location","requestURL","parseProtocol","speedometer","samplesCount","bytes","timestamps","firstSampleTS","head","tail","chunkLength","startedAt","bytesCount","passed","round","progressEventReducer","listener","isDownloadStream","bytesNotified","_speedometer","loaded","total","lengthComputable","progressBytes","rate","inRange","progress","estimated","event","isXHRAdapterSupported","XMLHttpRequest","Promise","requestData","requestHeaders","onCanceled","cancelToken","unsubscribe","signal","removeEventListener","auth","username","password","unescape","btoa","fullPath","onloadend","responseHeaders","getAllResponseHeaders","responseData","responseText","statusText","err","open","paramsSerializer","onreadystatechange","readyState","responseURL","setTimeout","onabort","onerror","ontimeout","timeoutErrorMessage","xsrfValue","withCredentials","isURLSameOrigin","cookies","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancel","abort","subscribe","aborted","send","knownAdapters","http","xhr","getAdapter","adapters","nameOrAdapter","throwIfCancellationRequested","throwIfRequested","dispatchRequest","then","reason","headersToObject","mergeConfig","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","timeoutMessage","decompress","beforeRedirect","transport","httpAgent","httpsAgent","socketPath","responseEncoding","configValue","VERSION","validators","deprecatedWarnings","assertOptions","schema","allowUnknown","opt","validator","formatMessage","desc","opts","console","warn","Axios","instanceConfig","interceptors","configOrUrl","contextHeaders","boolean","function","requestInterceptorChain","synchronousRequestInterceptors","interceptor","unshift","responseInterceptorChain","promise","chain","newConfig","onFulfilled","onRejected","getUri","generateHTTPMethod","isForm","CancelToken","executor","resolvePromise","_listeners","onfulfilled","_resolve","splice","c","spread","callback","isAxiosError","payload","HttpStatusCode","Continue","SwitchingProtocols","Processing","EarlyHints","Ok","Created","Accepted","NonAuthoritativeInformation","NoContent","ResetContent","PartialContent","MultiStatus","AlreadyReported","ImUsed","MultipleChoices","MovedPermanently","Found","SeeOther","NotModified","UseProxy","Unused","TemporaryRedirect","PermanentRedirect","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","PayloadTooLarge","UriTooLong","UnsupportedMediaType","RangeNotSatisfiable","ExpectationFailed","ImATeapot","MisdirectedRequest","UnprocessableEntity","Locked","FailedDependency","TooEarly","UpgradeRequired","PreconditionRequired","TooManyRequests","RequestHeaderFieldsTooLarge","UnavailableForLegalReasons","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","VariantAlsoNegotiates","InsufficientStorage","LoopDetected","NotExtended","NetworkAuthenticationRequired","createInstance","defaultConfig","instance","axios","Cancel","promises","formToJSON","default","_typeof","o","t","r","_defineProperty","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","msg","super","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setFlattenedQueryParams","urlSearchParams","parameter","currentKey","setSearchParams","objects","searchParams","toPathString","createRequestFunction","axiosArgs","axiosRequestArgs","ObservationsApiAxiosParamCreator","v11ObservationsEntityIdDatastreamGet","async","entityId","$select","$expand","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","v11ObservationsEntityIdDatastreamObservationsGet","$skip","$top","$count","$filter","v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet","v11ObservationsEntityIdDatastreamObservedPropertyGet","v11ObservationsEntityIdDatastreamSensorDatastreamsGet","v11ObservationsEntityIdDatastreamSensorGet","v11ObservationsEntityIdDatastreamThingDatastreamsGet","v11ObservationsEntityIdDatastreamThingGet","v11ObservationsEntityIdDatastreamThingLocationsGet","v11ObservationsEntityIdFeatureOfInterestGet","v11ObservationsEntityIdFeatureOfInterestObservationsGet","v11ObservationsEntityIdGet","v11ObservationsGet","ObservationsApiFp","localVarAxiosParamCreator","localVarAxiosArgs","ObservationsApi","Configuration","param","apiKey","accessToken","formDataCtor","isJsonMime","mime","jsonMime","baseUrl","getBaseUrl","points","obs","timer","setPoints","apoints","evt","command","start","stop","getDataForPoints","log","proms","point","res","rej","obserservation_karl","promsSettled","allSettled","postMessage","setInterval","conf","clearInterval"],"sourceRoot":""}