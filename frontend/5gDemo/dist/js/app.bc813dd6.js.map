{"version":3,"file":"js/app.bc813dd6.js","mappings":"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","sources":["webpack://sensor_thing_api_map/./src/App.vue","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue?0bce","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue?a847","webpack://sensor_thing_api_map/./src/components/Modal/InfoBox.vue?3d2e","webpack://sensor_thing_api_map/./src/App.vue?2a37","webpack://sensor_thing_api_map/./src/App.vue?285c","webpack://sensor_thing_api_map/./src/App.vue?01fe","webpack://sensor_thing_api_map/./src/views/Map.vue","webpack://sensor_thing_api_map/./openapi/client/base.ts","webpack://sensor_thing_api_map/./openapi/client/common.ts","webpack://sensor_thing_api_map/./openapi/client/api.ts","webpack://sensor_thing_api_map/./openapi/client/configuration.ts","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue","webpack://sensor_thing_api_map/./src/components/Location.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue?63f8","webpack://sensor_thing_api_map/./src/components/Thing.vue?a496","webpack://sensor_thing_api_map/./src/components/Thing.vue?f496","webpack://sensor_thing_api_map/./src/components/Location.vue?54bd","webpack://sensor_thing_api_map/./src/components/Location.vue?f977","webpack://sensor_thing_api_map/./src/components/Location.vue?6289","webpack://sensor_thing_api_map/./src/components/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/Observations.vue","webpack://sensor_thing_api_map/./src/config/base.ts","webpack://sensor_thing_api_map/./src/components/Observations.vue?3371","webpack://sensor_thing_api_map/./src/components/Observations.vue?af02","webpack://sensor_thing_api_map/./src/components/Observations.vue?83e6","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?1cbb","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?0ed8","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?b69d","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?d6fd","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?949f","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?d648","webpack://sensor_thing_api_map/./src/views/Map.vue?90fe","webpack://sensor_thing_api_map/./src/views/Map.vue?a6ce","webpack://sensor_thing_api_map/./src/views/Map.vue?5ea3","webpack://sensor_thing_api_map/./src/components/Tree.vue","webpack://sensor_thing_api_map/./src/components/Tree.vue?357b","webpack://sensor_thing_api_map/./src/components/Tree.vue?0930","webpack://sensor_thing_api_map/./src/components/Tree.vue?1c47","webpack://sensor_thing_api_map/./src/views/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/StreamTree.vue","webpack://sensor_thing_api_map/./src/helper/DatastreamGroups.ts","webpack://sensor_thing_api_map/./src/helper/SVGPaths.ts","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?c76a","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?2dc2","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?5226","webpack://sensor_thing_api_map/./src/components/Datapoint.vue","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?0843","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?76fd","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?a319","webpack://sensor_thing_api_map/./src/components/MqttList.vue","webpack://sensor_thing_api_map/./src/components/MqttList.vue?4df1","webpack://sensor_thing_api_map/./src/components/MqttList.vue?e3e9","webpack://sensor_thing_api_map/./src/components/MqttList.vue?be34","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?1f5b","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?6a98","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?07d0","webpack://sensor_thing_api_map/./src/router/index.ts","webpack://sensor_thing_api_map/./src/i18n.ts","webpack://sensor_thing_api_map/./src/store/ObsStore.ts","webpack://sensor_thing_api_map/./src/store/SimpleStore.ts","webpack://sensor_thing_api_map/./src/main.ts","webpack://sensor_thing_api_map/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://sensor_thing_api_map/webpack/bootstrap","webpack://sensor_thing_api_map/webpack/runtime/chunk loaded","webpack://sensor_thing_api_map/webpack/runtime/compat get default export","webpack://sensor_thing_api_map/webpack/runtime/define property getters","webpack://sensor_thing_api_map/webpack/runtime/get javascript chunk filename","webpack://sensor_thing_api_map/webpack/runtime/global","webpack://sensor_thing_api_map/webpack/runtime/hasOwnProperty shorthand","webpack://sensor_thing_api_map/webpack/runtime/make namespace object","webpack://sensor_thing_api_map/webpack/runtime/node module decorator","webpack://sensor_thing_api_map/webpack/runtime/publicPath","webpack://sensor_thing_api_map/webpack/runtime/jsonp chunk loading","webpack://sensor_thing_api_map/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view'),(_vm.showInfoBox)?_c('InfoBox',{attrs:{\"infoUri\":_vm.infoUri||''}}):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('b-modal',{attrs:{\"has-modal-card\":\"\",\"trap-focus\":\"\",\"destroy-on-hide\":true,\"aria-role\":\"dialog\",\"aria-label\":\"Example Modal\",\"close-button-aria-label\":\"Close\",\"aria-modal\":\"\"},model:{value:(_vm.active),callback:function ($$v) {_vm.active=$$v},expression:\"active\"}},[_c('div',{staticClass:\"card\",staticStyle:{\"width\":\"auto\"}},[_c('div',{staticClass:\"card-content\"},[(_vm.infoUri)?_c('iframe',{attrs:{\"src\":_vm.infoUri,\"name\":\"InfoIFrame\",\"title\":\"infobox\",\"id\":\"infoFrame\"}}):_vm._e()])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Vue, Component, Prop} from \"vue-property-decorator\";\n\n@Component\nexport default class InfoBox extends Vue {\n  @Prop({default: () => ''}) readonly infoUri: string | undefined;\n  private active = true;\n\n}\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InfoBox.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./InfoBox.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./InfoBox.vue?vue&type=template&id=ad1a9aca&scoped=true&\"\nimport script from \"./InfoBox.vue?vue&type=script&lang=ts&\"\nexport * from \"./InfoBox.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./InfoBox.vue?vue&type=style&index=0&id=ad1a9aca&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ad1a9aca\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Vue} from \"vue-property-decorator\";\nimport axios from \"axios\";\nimport Component from \"vue-class-component\";\nimport InfoBox from \"@/components/Modal/InfoBox.vue\";\n\n@Component({\n  components:{\n    InfoBox\n  }\n})\nexport default class App extends Vue {\n\n  private showInfoBox = false;\n  private infoUri = null;\n\n  async mounted() {\n    try {\n      const base = window.location.protocol + '//' + window.location.host;\n      const config = (await axios.get(`config/config.json`)).data;\n      if (config && config.INFO_CHECK_URI && config.INFO_CHECK_URI) {\n        this.infoUri = config.INFO_BASE_URI;\n        this.showInfoBox = (await axios.get(config.INFO_CHECK_URI)).status == 200\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n}\n","import mod from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=57c49c0e&\"\nimport script from \"./App.vue?vue&type=script&lang=ts&\"\nexport * from \"./App.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=57c49c0e&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\"},[_c('div',{staticClass:\"url rim colspan2\"},[_c('b-field',[_c('b-input',{model:{value:(_vm.baseurl),callback:function ($$v) {_vm.baseurl=$$v},expression:\"baseurl\"}}),_c('b-button',{attrs:{\"type\":\"is-primary\",\"outlined\":\"\"},on:{\"click\":function($event){return _vm.connect()}}},[_vm._v(\"Connect\")])],1)],1),_c('div',{staticClass:\"map_holder rim\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution}}),_vm._l((_vm.points),function(point){return _c('l-polygon',{key:point['@iot.id'],attrs:{\"lat-lngs\":_vm.pol(point.location)},on:{\"click\":function($event){return _vm.markerWasClicked(point)}}},[_c('l-marker',{attrs:{\"lat-lng\":_vm.res(point.location.features[0].geometry.coordinates[0])}},[_c('l-icon',{attrs:{\"class-name\":\"custom-div-icon\"}},[_c('div',{staticClass:\"marker-pin\",class:{'selected':point['@iot.id']==_vm.selected}},[_c('i',{staticClass:\"mdi mdi-radio-tower\"})])])],1)],1)})],2)],1),_c('div',{staticClass:\"sidebar_holder rim\"},[_c('router-view',{attrs:{\"id\":\"sidebar\"},on:{\"TreeSelect\":(data)=>_vm.treeData=data}})],1),_c('div',{staticClass:\"propertie_holder rim\"},[_c('PropertiesC',{attrs:{\"data\":_vm.treeData}})],1),_c('div',{staticClass:\"corner\"})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://sensors.bgs.ac.uk/FROST-Server\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Datastream\n */\nexport interface Datastream {\n    /**\n     * The Id of the datastream\n     * @type {number}\n     * @memberof Datastream\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Datastream\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Datastream\n     */\n    'Observations'?: Array<Observation>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastream\n     */\n    'Observations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {ObservedProperty}\n     * @memberof Datastream\n     */\n    'ObservedProperty'?: ObservedProperty;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'ObservedProperty@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Sensor}\n     * @memberof Datastream\n     */\n    'Sensor'?: Sensor;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Sensor@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Thing}\n     * @memberof Datastream\n     */\n    'Thing'?: Thing;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Thing@iot.navigationLink'?: string;\n    /**\n     * A description of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'description'?: string;\n    /**\n     * The label or name of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'name'?: string;\n    /**\n     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observationType'?: string;\n    /**\n     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observedArea'?: string;\n    /**\n     * The range of phenomenon times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'phenomenonTime'?: string;\n    /**\n     * \n     * @type {DatastreamProperties}\n     * @memberof Datastream\n     */\n    'properties'?: DatastreamProperties;\n    /**\n     * The range of result times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'resultTime'?: string;\n    /**\n     * \n     * @type {DatastreamUnitOfMeasurement}\n     * @memberof Datastream\n     */\n    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;\n}\n/**\n * \n * @export\n * @interface DatastreamProperties\n */\nexport interface DatastreamProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface DatastreamUnitOfMeasurement\n */\nexport interface DatastreamUnitOfMeasurement {\n    /**\n     * The full name of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'name'?: string;\n    /**\n     * The symbol of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'symbol'?: string;\n    /**\n     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'defintion'?: string;\n}\n/**\n * \n * @export\n * @interface Datastreams\n */\nexport interface Datastreams {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastreams\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastreams\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Datastreams\n     */\n    'value'?: Array<Datastream>;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterest\n */\nexport interface FeatureOfInterest {\n    /**\n     * The Id of the feature of interest\n     * @type {number}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'feature\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'encodingType'?: string;\n    /**\n     * The detailed description of the feature of interest, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'feature'?: string;\n    /**\n     * The label or name of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {FeatureOfInterestProperties}\n     * @memberof FeatureOfInterest\n     */\n    'properties'?: FeatureOfInterestProperties;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterestProperties\n */\nexport interface FeatureOfInterestProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the feature of interest type, set to \\'SEN_LOC\\' (Sensor Location) or \\'BOREHOLE\\'\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'type'?: string;\n    /**\n     * The elevation (Z) of the sensor location (type \\'SEN_LOC\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the sensor location is effective (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'to_date'?: string;\n    /**\n     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sobi_bgs_id'?: number;\n    /**\n     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'borehole_id'?: number;\n    /**\n     * The drilled length of the borehole in metres (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'drilled_length'?: number;\n    /**\n     * An alternative name by which the borehole is known (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference'?: string;\n    /**\n     * Indicates the source of the \\'reference\\' property (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference_type'?: string;\n    /**\n     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'publish_yn'?: string;\n}\n/**\n * \n * @export\n * @interface FeaturesOfInterest\n */\nexport interface FeaturesOfInterest {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<FeatureOfInterest>}\n     * @memberof FeaturesOfInterest\n     */\n    'value'?: Array<FeatureOfInterest>;\n}\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * The Id of the location\n     * @type {number}\n     * @memberof Location\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Location\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Location\n     */\n    'Things'?: Array<Thing>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Location\n     */\n    'Things@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.nextLink'?: string;\n    /**\n     * A description of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'location\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'encodingType'?: string;\n    /**\n     * The location, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'location'?: string;\n    /**\n     * The label or name of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {LocationProperties}\n     * @memberof Location\n     */\n    'properties'?: LocationProperties;\n}\n/**\n * \n * @export\n * @interface LocationProperties\n */\nexport interface LocationProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The name of the site to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'site'?: string;\n    /**\n     * The name of the observatory to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'observatory'?: string;\n    /**\n     * The elevation (Z) of the location\n     * @type {number}\n     * @memberof LocationProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the location is effective\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the location is no longer effective, where it is not set the location is still active\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'to_date'?: string;\n    /**\n     * Any additional information about the location where available\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'comments'?: string;\n    /**\n     * A flag to indicate whether the location is the active location for a thing (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this location can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Locations\n */\nexport interface Locations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Locations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Locations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Locations\n     */\n    'value'?: Array<Location>;\n}\n/**\n * \n * @export\n * @interface Observation\n */\nexport interface Observation {\n    /**\n     * The Id of the observation\n     * @type {number}\n     * @memberof Observation\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Observation\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {ObservationParameters}\n     * @memberof Observation\n     */\n    'parameters'?: ObservationParameters;\n    /**\n     * The time when the observation happened\n     * @type {string}\n     * @memberof Observation\n     */\n    'phenomenonTime'?: string;\n    /**\n     * The estimated value of the observed property\n     * @type {string}\n     * @memberof Observation\n     */\n    'result'?: string;\n    /**\n     * A description of the quality of the result\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultQuality'?: string;\n    /**\n     * The time the result was generated\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultTime'?: string;\n    /**\n     * The time period during which the result can be used\n     * @type {string}\n     * @memberof Observation\n     */\n    'validTime'?: string;\n}\n/**\n * \n * @export\n * @interface ObservationParameters\n */\nexport interface ObservationParameters {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Observations\n */\nexport interface Observations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Observations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Observations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Observations\n     */\n    'value'?: Array<Observation>;\n}\n/**\n * \n * @export\n * @interface ObservedProperties\n */\nexport interface ObservedProperties {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof ObservedProperties\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof ObservedProperties\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<ObservedProperty>}\n     * @memberof ObservedProperties\n     */\n    'value'?: Array<ObservedProperty>;\n}\n/**\n * \n * @export\n * @interface ObservedProperty\n */\nexport interface ObservedProperty {\n    /**\n     * The Id of the observed property\n     * @type {number}\n     * @memberof ObservedProperty\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'definition'?: string;\n    /**\n     * A description of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'description'?: string;\n    /**\n     * The label or name of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ObservedPropertyProperties}\n     * @memberof ObservedProperty\n     */\n    'properties'?: ObservedPropertyProperties;\n}\n/**\n * \n * @export\n * @interface ObservedPropertyProperties\n */\nexport interface ObservedPropertyProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the observed property (Measured or Calculated)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of the formula used to derive values for the observed property (data type \\'Calculated\\' only)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'formula'?: string;\n    /**\n     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensor\n */\nexport interface Sensor {\n    /**\n     * The Id of the sensor type\n     * @type {number}\n     * @memberof Sensor\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Sensor\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'metadata\\' property\n     * @type {string}\n     * @memberof Sensor\n     */\n    'encodingType'?: string;\n    /**\n     * A detailed description of the sensor type (style based on \\'encodingType\\' property)\n     * @type {string}\n     * @memberof Sensor\n     */\n    'metadata'?: string;\n    /**\n     * The label or name of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {SensorProperties}\n     * @memberof Sensor\n     */\n    'properties'?: SensorProperties;\n}\n/**\n * \n * @export\n * @interface SensorProperties\n */\nexport interface SensorProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'complex_data_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensors\n */\nexport interface Sensors {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Sensors\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Sensors\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Sensor>}\n     * @memberof Sensors\n     */\n    'value'?: Array<Sensor>;\n}\n/**\n * \n * @export\n * @interface Thing\n */\nexport interface Thing {\n    /**\n     * The Id of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.id'?: string;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Thing\n     */\n    'Datastreams'?: Array<Datastream>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Datastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Thing\n     */\n    'Locations'?: Array<Location>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Locations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.nextLink'?: string;\n    /**\n     * A description of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'description'?: string;\n    /**\n     * The label or name of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ThingProperties}\n     * @memberof Thing\n     */\n    'properties'?: ThingProperties;\n}\n/**\n * \n * @export\n * @interface ThingProperties\n */\nexport interface ThingProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the type of thing, set to \\'SENSOR\\'\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'type'?: string;\n    /**\n     * The serial number of the physical sensor currently installed if known\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'serial_no'?: string;\n    /**\n     * Indicates how data from the thing is captured (Telemetered, Manual)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_capture'?: string;\n    /**\n     * The earliest observation date for which data from the thing will be available in the API\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'observation_start_date'?: string;\n    /**\n     * The elevation (Z) of the thing\\'s datum\n     * @type {number}\n     * @memberof ThingProperties\n     */\n    'datum_z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the \\'datum_z\\' value\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_z_crs'?: string;\n    /**\n     * The label or name for the thing\\'s datum\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_name'?: string;\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'borehole_reference'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Things\n */\nexport interface Things {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Things\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Things\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Things\n     */\n    'value'?: Array<Thing>;\n}\n\n/**\n * DatastreamsApi - axios parameter creator\n * @export\n */\nexport const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Datastreams`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DatastreamsApi - functional programming interface\n * @export\n */\nexport const DatastreamsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DatastreamsApi - factory interface\n * @export\n */\nexport const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DatastreamsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DatastreamsApi - interface\n * @export\n * @interface DatastreamsApi\n */\nexport interface DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n}\n\n/**\n * DatastreamsApi - object-oriented interface\n * @export\n * @class DatastreamsApi\n * @extends {BaseAPI}\n */\nexport class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * FeaturesOfInterestApi - axios parameter creator\n * @export\n */\nexport const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/FeaturesOfInterest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - functional programming interface\n * @export\n */\nexport const FeaturesOfInterestApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - factory interface\n * @export\n */\nexport const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = FeaturesOfInterestApiFp(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {\n            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeaturesOfInterestApi - interface\n * @export\n * @interface FeaturesOfInterestApi\n */\nexport interface FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;\n\n}\n\n/**\n * FeaturesOfInterestApi - object-oriented interface\n * @export\n * @class FeaturesOfInterestApi\n * @extends {BaseAPI}\n */\nexport class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LocationsApi - axios parameter creator\n * @export\n */\nexport const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})/Things`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Locations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LocationsApi - functional programming interface\n * @export\n */\nexport const LocationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LocationsApi - factory interface\n * @export\n */\nexport const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LocationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {\n            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LocationsApi - interface\n * @export\n * @interface LocationsApi\n */\nexport interface LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n}\n\n/**\n * LocationsApi - object-oriented interface\n * @export\n * @class LocationsApi\n * @extends {BaseAPI}\n */\nexport class LocationsApi extends BaseAPI implements LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservationsApi - axios parameter creator\n * @export\n */\nexport const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Observations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservationsApi - functional programming interface\n * @export\n */\nexport const ObservationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservationsApi - factory interface\n * @export\n */\nexport const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {\n            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservationsApi - interface\n * @export\n * @interface ObservationsApi\n */\nexport interface ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n}\n\n/**\n * ObservationsApi - object-oriented interface\n * @export\n * @class ObservationsApi\n * @extends {BaseAPI}\n */\nexport class ObservationsApi extends BaseAPI implements ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservedPropertiesApi - axios parameter creator\n * @export\n */\nexport const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/ObservedProperties`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - functional programming interface\n * @export\n */\nexport const ObservedPropertiesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - factory interface\n * @export\n */\nexport const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservedPropertiesApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {\n            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservedPropertiesApi - interface\n * @export\n * @interface ObservedPropertiesApi\n */\nexport interface ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;\n\n}\n\n/**\n * ObservedPropertiesApi - object-oriented interface\n * @export\n * @class ObservedPropertiesApi\n * @extends {BaseAPI}\n */\nexport class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SensorsApi - axios parameter creator\n * @export\n */\nexport const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Sensors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SensorsApi - functional programming interface\n * @export\n */\nexport const SensorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SensorsApi - factory interface\n * @export\n */\nexport const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SensorsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {\n            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SensorsApi - interface\n * @export\n * @interface SensorsApi\n */\nexport interface SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;\n\n}\n\n/**\n * SensorsApi - object-oriented interface\n * @export\n * @class SensorsApi\n * @extends {BaseAPI}\n */\nexport class SensorsApi extends BaseAPI implements SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ThingsApi - axios parameter creator\n * @export\n */\nexport const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Things`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ThingsApi - functional programming interface\n * @export\n */\nexport const ThingsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ThingsApi - factory interface\n * @export\n */\nexport const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ThingsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ThingsApi - interface\n * @export\n * @interface ThingsApi\n */\nexport interface ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n}\n\n/**\n * ThingsApi - object-oriented interface\n * @export\n * @class ThingsApi\n * @extends {BaseAPI}\n */\nexport class ThingsApi extends BaseAPI implements ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return (_vm.data && _vm.data.data)?_c('div',{staticClass:\"plane is-vertical\"},[(_vm.data.type === 'FMM_LOC')?_c('Location',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_THING')?_c('Thing',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_DATASTREAM')?_c('Datastreams',{attrs:{\"data\":_vm.data.data}}):_vm._e()],1):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Location\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('encodingType'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.encodingType))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('location'))+\": \")]),(_vm.data.location)?_c('div',[_vm._v(\"[\"+_vm._s(_vm.data.location.coordinates.join(';'))+\"]\")]):_vm._e()])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Thing\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))])])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport { Thing} from \"../../openapi/client\";\n@Component\nexport default class ThingC extends Vue{\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data: Thing | undefined;\n\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Thing.vue?vue&type=template&id=6e3cf614&scoped=true&\"\nimport script from \"./Thing.vue?vue&type=script&lang=ts&\"\nexport * from \"./Thing.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Thing.vue?vue&type=style&index=0&id=6e3cf614&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6e3cf614\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport ThingsC from \"@/components/Thing.vue\";\n@Component({components:{\n    ThingsC\n  }})\nexport default class LocationC extends Vue{\n\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data:unknown;\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Location.vue?vue&type=template&id=08085692&scoped=true&\"\nimport script from \"./Location.vue?vue&type=script&lang=ts&\"\nexport * from \"./Location.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Location.vue?vue&type=style&index=0&id=08085692&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"08085692\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",attrs:{\"id\":\"light\"},model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Datastream\"}},[(_vm.data)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.noprops),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Eigenschaften\"}},[(_vm.data.properties)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Observations\"}},[(_vm.activeTab===2)?_c('Observations',{attrs:{\"id\":_vm.data['@iot.id'],\"title\":_vm.data.name}}):_vm._e()],1)],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('div',{staticClass:\"chart\"},[_c('Bar',{staticStyle:{\"{width\":\"100%\",\"height\":\"250px}\"},attrs:{\"data\":_vm.chartdata,\"options\":_vm.chartOptions,\"css-classes\":\"chart\",\"responsive\":\"\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\nconst config= {\n  //baseUrl:window.location.origin+'/sensinact/rest',\n  //baseUrl:'http://localhost:8080/sensinact/rest',\n  baseUrl:'https://5g.data-in-motion.biz/sensinact/rest',\n\n  //baseUrl:'http://192.168.178.12:8080/sensinact/rest',\n  //baseUrl: 'https://udp-5g-broker.nomad-dmz.jena.de/sensinact/rest'\n};\n\nexport default config;\nexport function setBaseUrl(url:string){\n  config.baseUrl = url;\n}\nexport function getBaseUrl(){\n  return config.baseUrl;\n}\n\n","\nimport 'chartjs-adapter-moment';\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Configuration, DatastreamsApi, Observations} from \"../../openapi/client\";\n\nimport { Bar } from 'vue-chartjs'\nimport {Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, TimeScale} from 'chart.js'\nimport moment from \"moment\";\nimport {getBaseUrl} from \"@/config/base\";\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale,TimeScale)\n\n@Component({components:{Bar}})\nexport default class ObservationsC extends Vue{\n  private loading = false;\n  @Prop() readonly id: string | undefined;\n  @Prop({default:()=>''}) readonly title: string | undefined ;\n  private observations:Observations|null = null;\n  private chartOptions:any ={\n    maxBarThickness: 2, // number (pixels)\n    barThickness: 'flex',\n    plugins:{\n      legend: {\n        display: true\n      }\n    },\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        'x': {\n          type: 'time',\n          time: {\n            displayFormats: {\n              'millisecond': 'MMM DD',\n              'second': 'MMM DD',\n              'minute': 'MMM DD',\n              'hour': 'MMM DD',\n              'day': 'MMM DD',\n              'week': 'MMM DD',\n              'month': 'MMM DD',\n              'quarter': 'MMM DD',\n              'year': 'MMM DD',\n            }\n          },\n          /*ticks: {\n            // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n            callback: function (val: any, index: any): any {\n              // Hide every 2nd tick label\n              //@ts-ignore\n              return index % 2 === 0 ? this.getLabelForValue(val) : '';\n            }\n          }*/\n        }\n      }\n  }\n  @Watch('id')\n  dataChanged(newD:any){\n    this.loadData()\n  }\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    this.loading = true;\n    try{\n      //@ts-ignore\n      this.observations = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()})).v11DatastreamsEntityIdObservationsGet(this.id!)).data;\n      console.log(this.observations)\n    }catch (e){\n      console.log(e);\n    }finally {\n      this.loading = false;\n    }\n  }\n  get chartdata(){\n    if(this.observations){\n      return {\n        labels: this.observations.value?.map(e=>moment(e.resultTime,\"YYYY-MM-DD'T'HH:mm:ss.SSSZZ\")),\n        datasets: [\n          {\n            label: this.title,\n            backgroundColor: 'rgb(36,97,162)',\n            data: this.observations.value?.map(e=>e.result)\n          }\n        ]\n      }\n    }else{\n      return {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            backgroundColor: 'rgba(36,97,162,0.81)',\n            data:  [],\n          }\n        ]\n      }\n    }\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Observations.vue?vue&type=template&id=03038043&scoped=true&\"\nimport script from \"./Observations.vue?vue&type=script&lang=ts&\"\nexport * from \"./Observations.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Observations.vue?vue&type=style&index=0&id=03038043&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"03038043\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Datastream} from \"../../openapi/client\";\nimport Observations from \"@/components/Observations.vue\";\n@Component({\n  components: {Observations}\n})\nexport default class DatastreamsC extends Vue{\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data: Datastream | undefined;\n\n  @Watch('data')\n  dataChanged(newD:unknown){\n    console.log(newD)\n  }\n  get noprops(){\n    let ret:any = {};\n    for (const [key,atr] of Object.entries(this.data as object)){\n      if(key!=='properties')\n        ret[key]=atr;\n    }\n    return ret;\n  }\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=5c8bdc26&scoped=true&\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=5c8bdc26&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Datastreams.vue?vue&type=style&index=1&id=5c8bdc26&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5c8bdc26\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport Location from \"@/components/Location.vue\";\nimport Thing from \"@/components/Thing.vue\";\nimport Datastreams from \"@/components/Datastreams.vue\";\n\n@Component({\n  components: {Datastreams, Location, Thing}\n})\nexport default class PropertiesC extends Vue {\n  @Prop() readonly data: any;\n\n  @Watch('data') data_changed(new_data: any) {\n    console.log('new data')\n    console.log(new_data)\n  }\n\n}\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Properties.vue?vue&type=template&id=2d8f8719&scoped=true&\"\nimport script from \"./Properties.vue?vue&type=script&lang=ts&\"\nexport * from \"./Properties.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Properties.vue?vue&type=style&index=0&id=2d8f8719&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2d8f8719\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LPolygon, LTileLayer} from \"vue2-leaflet\";\nimport {LocationsApi, Location, Locations, Configuration} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\nimport {BASE_PATH} from \"../../openapi/client/base\";\nimport {getBaseUrl, setBaseUrl} from \"@/config/base\";\n\n@Component({\n  components: {\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LPolygon\n  }\n})\nexport default class Map extends Vue {\n  private url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  private attribution =\n    '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom = 10;\n\n  private center = [50.93115286, 11.60392726];\n  private markerLatLng = [55.8382551745062, -4.20119980206699]\n  private points: Array<Location> | undefined = [];\n  private selected: Location | null = {'@iot.id': undefined};\n  private treeData: unknown = null;\n  //private baseurl:string = 'https://sensors.bgs.ac.uk/FROST-Server';\n  private baseurl:string = 'http://localhost:8080/sensinact/rest';\n\n\n  async mounted() {\n    //await this.load();\n  }\n\n  async load() {\n    this.points = ((await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsGet()).data as Locations)?.value;\n  }\n\n  res(arr: any) {\n    return [arr[1], arr[0]]\n  }\n  pol(location:any){\n    return location.features[0].geometry.coordinates;\n  }\n  connect(){\n    console.log('connect')\n    setBaseUrl(this.baseurl)\n    console.log(getBaseUrl())\n    this.load();\n  }\n  markerWasClicked(point: Location) {\n\n    this.$router.push('/details/location/' + point[\"@iot.id\"])\n    //this.$route.params\n  }\n\n  @Watch('$route.params', {immediate: true})\n  params_chanded(params: any) {\n    this.selected = params.id;\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=5d9700d4&scoped=true&\"\nimport script from \"./Map.vue?vue&type=script&lang=ts&\"\nexport * from \"./Map.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Map.vue?vue&type=style&index=0&id=5d9700d4&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5d9700d4\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('perfect-scrollbar',[_c('v-treeview',{attrs:{\"treeTypes\":_vm.treeTypes,\"openAll\":_vm.openAll,\"contextItems\":_vm.contextItems},on:{\"selected\":_vm.selected,\"contextSelected\":_vm.contextSelected},model:{value:(_vm.treeData),callback:function ($$v) {_vm.treeData=$$v},expression:\"treeData\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Configuration,\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\nimport {getBaseUrl} from \"@/config/base\";\n@Component({components:{\n    ThingsC,\n    VTreeview\n  }})\nexport default class TreeC extends Vue{\n\n  private loading = false;\n  private location:Location|null = null;\n  private openAll = true;\n  private treeTypes = [\n    {\n      type: \"#\",\n      max_children: 6,\n      max_depth: 25,\n      valid_children: [\n        \"FMM_THINGS\",\n        \"FMM_LOC\",\n        \"FMM_THING\",\n        \"FMM_DATASTREAMS\",\n        \"FMM_DATASTREAM\",\n        \"FMM_OBSERVATION\"\n      ]\n    },\n    {\n      type: \"FMM_THINGS\",\n      icon: \"fa-regular fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THING']\n    },\n    {\n      type: \"FMM_LOC\",\n      icon: \"fa-regular fa-map\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THINGS']\n    },\n    {\n      type: \"FMM_THING\",\n      icon: \"fa-solid fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAMS\"]\n    },\n    {\n      type: \"FMM_DATASTREAMS\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAM\"]\n    },\n    {\n      type: \"FMM_DATASTREAM\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_OBSERVATION\"]\n    },\n    {\n      type: \"FMM_OBSERVATION\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"FMM_PARENT_IN_LAW\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"Basic\",\n      icon: \"far fa-hospital\",\n      valid_children: [\"Top-up\"]\n    },\n    {\n      type: \"Top-up\",\n      icon: \"far fa-plus-square\",\n      valid_children: []\n    }\n  ];\n  private treeData:any = [];\n  private contextItems:any = [];\n  private selectedNode:any = null\n\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    try{\n      this.treeData = [];\n      this.loading = true;\n      //@ts-ignore\n      this.location = (await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsEntityIdGet(this.$route.params.id)).data;\n      console.log(this.location)\n      this.treeData.push({\n        id: Math.random()*100000, text: \"Location \"+this.location.name, type: \"FMM_LOC\", count: 0,\n        children: [\n          {id: Math.random()*100000, text: \"THINGS\", type: \"FMM_THINGS\", children:[]}\n        ]\n      },)\n\n    }catch (e){\n      console.log(e);\n      this.$router.push({name:'Map'})\n    }\n    finally{\n      this.loading = false;\n    }\n  }\n  @Watch('$route.params.id')\n  id_changed(){\n    this.loadData()\n  }\n  async selected(node:any){\n    this.selectedNode = node;\n    switch(node.model.type){\n      case 'FMM_LOC':\n        this.$emit('TreeSelect',{type:'FMM_LOC',data:this.location})\n        break;\n      case 'FMM_THINGS':\n          this.$emit('TreeSelect',{type:'FMM_THINGS',data:null})\n          node.model.children=[];\n          (await this.getThingsTree()).forEach((child:unknown)=>{\n            node.addNode(child)\n          })\n        break;\n      case 'FMM_THING':{\n        this.$emit('TreeSelect',{type:'FMM_THING',data: node.model._data})\n        node.model.children=[]\n        const datastreams: unknown[] = await this.getDatascreamsTree(node.model._data['@iot.id']);\n        const datastreamsNode:any = {id: Math.random()*100000, text:'DATASTREAMS', type: \"FMM_DATASTREAMS\", children: []}\n        datastreams.forEach((child:unknown)=>{\n          datastreamsNode.children.push(child);\n        })\n        node.addNode(datastreamsNode)\n        break;\n      }\n      case 'FMM_DATASTREAMS':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAMS',data:null});\n        break;\n      case 'FMM_DATASTREAM':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAM',data: node.model._data});\n        /*node.model.children=[]\n        const observations:Object[] = await this.getObservationTree(node.model._data['@iot.id'])\n        node.children = [];\n        observations.forEach((child:Object)=>{\n          node.addNode(child)\n        })*/\n        break;\n    }\n  }\n  async getThingsTree(): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const things = (await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsEntityIdThingsGet(this.$route.params.id)).data as Things\n    this.loading = false;\n    let ret:unknown[] = [];\n    things.value?.forEach((thing:Thing)=>{\n      let node = {id: Math.random()*100000, text:  (thing as Thing).name, type: \"FMM_THING\", children: [],_data:thing}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  async getDatascreamsTree(id:string): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const datastreams = (await new ThingsApi(new Configuration({basePath:getBaseUrl()})).v11ThingsEntityIdDatastreamsGet(id)).data as Datastreams\n    this.loading = false;\n    let ret:unknown[] = [];\n    datastreams.value?.forEach((datastream:Datastream)=>{\n      let node = {id: Math.random()*100000, text:  (datastream as Datastream).name, type: \"FMM_DATASTREAM\", children: [],_data:datastream}\n      ret.push(node);\n    });\n    return ret;\n  }\n  async getObservationTree(id:string): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const observations = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()})).v11DatastreamsEntityIdObservationsGet(id)).data as Observations\n    this.loading = false;\n    let ret:unknown[] = [];\n    observations.value?.forEach((observation:Observation)=>{\n      let node = {id: Math.random()*100000, text:  (observation as Observation)[\"@iot.id\"], type: \"FMM_OBSERVATION\", children: [],_data:observation}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  getTypeRule(type:any) {\n    var typeRule = this.treeTypes.filter(t => t.type == type)[0];\n    return typeRule;\n  }\n  contextSelected(command:any) {\n    switch (command) {\n      case \"Create Basic\":\n        this.selectedNode.addNode({\n          text: \"New Basic Plan\",\n          type: \"Basic\",\n          children: []\n        });\n        break;\n      case \"Create Top-up\":\n        this.selectedNode.addNode({\n          text: \"New Top-up\",\n          type: \"Top-up\",\n          children: []\n        });\n        break;\n      case \"Rename\":\n        this.selectedNode.editName();\n        break;\n      case \"Remove\":\n        break;\n    }\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Tree.vue?vue&type=template&id=e5df6f26&scoped=true&\"\nimport script from \"./Tree.vue?vue&type=script&lang=ts&\"\nexport * from \"./Tree.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Tree.vue?vue&type=style&index=0&id=e5df6f26&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Tree.vue?vue&type=style&index=1&id=e5df6f26&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e5df6f26\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\",attrs:{\"id\":\"app\"}},[_vm._m(0),_c('div',{staticClass:\"map_holder\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center,\"max-zoom\":21},on:{\"click\":_vm.deselect,\"update:center\":_vm.updateCenter,\"update:zoom\":_vm.updateZoom}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution,\"options\":{maxNativeZoom:19,\n      maxZoom:25}}}),_vm._l((_vm.viewports),function(viewport,key){return [( _vm.$route.query.enabledTraficLights && _vm.$route.query.enabledTraficLights.includes('ViewPort_'+key.toString()))?_c('l-geo-json',{key:key,attrs:{\"geojson\":viewport,\"options\":{'pointToLayer':_vm.pointToLayer},\"options-style\":_vm.styleP}}):_vm._e()]}),_vm._l((_vm.observationsGeoJsonMqtt),function(geoJsonTragicLight,key){return [( _vm.$route.query.enabledTraficLights && _vm.$route.query.enabledTraficLights.includes('TrafiCam_'+key.toString()))?_c('l-geo-json',{key:key,attrs:{\"geojson\":geoJsonTragicLight,\"options\":{'pointToLayer':_vm.pointToLayer},\"options-style\":_vm.styleP}}):_vm._e()]}),_vm._l((_vm.geojson),function(features){return _c('l-geo-json',{key:features['@iot.id']+'_area',attrs:{\"geojson\":features.location,\"options-style\":_vm.style(features['@iot.id'])}})}),(_vm.centerPoints && _vm.centerPoints.length>0)?_c('v-marker-cluster',{ref:\"clusterRef2\",attrs:{\"options\":{spiderfyDistanceMultiplier:3.2,animate:true,animateAddingMarkers:true,zoomToBoundsOnClick:false,disableClusteringAtZoom:18}}},[_vm._l((_vm.centerPoints),function(point){return [(point.location.geometry)?_c('custom-marker',{key:point['@iot.id']+'markr',attrs:{\"marker\":_vm.ret(point.location.geometry.coordinates),\"lat-lng\":_vm.ret(point.location.geometry.coordinates)},nativeOn:{\"click\":function($event){return ((ev)=>{ev.stopImmediatePropagation();_vm.markerWasClicked(point)}).apply(null, arguments)}}},[(point['@iot.id'].split('~').reverse()[0]!=='color')?_c('div',{staticClass:\"marker-pin\",class:{'selected':point===_vm.selected}},[(point['@iot.id'].split('~').reverse()[0]!='color')?_c('div',{staticClass:\"round\"},[(_vm.getPath(point['@iot.id'].split('~').reverse()[0]))?_c('svg-icon',{staticClass:\"marker_svg\",attrs:{\"type\":\"mdi\",\"size\":24,\"path\":_vm.getPath(point['@iot.id'].split('~').reverse()[0])}}):(point['@iot.id'].split('~').reverse()[0])?_c('div',{staticClass:\"svg_icon dark\",class:point['@iot.id'].split('~').reverse()[0]}):_vm._e()],1):_vm._e()]):_vm._e(),_c('div',{staticClass:\"marker-value\",class:point['@iot.id'].split('~').reverse()[0],on:{\"click\":(ev)=>{ev.stopImmediatePropagation();_vm.markerWasClicked(point)}}},[_c('Datapoint',{attrs:{\"id\":point['@iot.id'],\"unit\":'',\"is-bool\":point['@iot.id'].split('~').reverse()[0]=='conflict'}})],1)]):_vm._e()]})],2):_vm._e()],2)],1),_c('div',{staticClass:\"sidebar_holder absolute\"},[_c('perfect-scrollbar',[_c('StreamTree',{ref:\"streamTree\",on:{\"selection\":_vm.select}}),_c('MqttList',{attrs:{\"items\":_vm.mqtt_items}})],1)],1),(_vm.selected!==null)?_c('div',{staticClass:\"propertie_holder absolute\"},[_c('b-button',{staticClass:\"absbtn\",attrs:{\"type\":\"is-text\",\"rounded\":\"\",\"size\":\"is-small\",\"icon-right\":\"close\"},on:{\"click\":_vm.deselect}}),_c('PropertiesC',{attrs:{\"data\":_vm.selectedData}})],1):_vm._e()])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"url colspan2 titlebar\"},[_c('div',{staticClass:\"logo\"},[_c('div',{staticClass:\"white triangle\"}),_c('div',{staticClass:\"small logo smart_city_project\",attrs:{\"id\":\"logo\"}})])])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('div',{staticClass:\"tree\"},_vm._l((_vm.treeData),function(leaf){return _c('div',{key:leaf.key,staticClass:\"leaf\",class:[{'active': leaf.active},leaf.text]},[_c('div',{staticClass:\"cat_icon\",on:{\"click\":function($event){return _vm.selected(leaf)}}},[(_vm.getPath([leaf.text]))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath([leaf.text]),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:[leaf.text]}),_c('b-tag',{attrs:{\"rounded\":\"\",\"type\":\"is-primary\"}},[_vm._v(_vm._s(leaf._data.length))])],1),_c('div',{staticClass:\"stitle\",on:{\"click\":function($event){return _vm.selected(leaf)}}},[_vm._v(\" \"+_vm._s(_vm.$t('prop.' + leaf.text))+\" \")]),_c('div',{staticClass:\"chevron\",on:{\"click\":function($event){leaf.childs_shown = !leaf.childs_shown}}},[(!leaf.childs_shown)?_c('i',{staticClass:\"mdi mdi-chevron-down\"}):_c('i',{staticClass:\"mdi mdi-chevron-up\"})]),(leaf.childs_shown)?_c('div',{staticClass:\"childs\"},_vm._l((leaf.children),function(child){return _c('div',{key:child.key,staticClass:\"leaf\",class:[{'active': child.active},child.text],on:{\"click\":function($event){return _vm.selected(child)}}},[_c('div',{staticClass:\"cat_icon\"},[(_vm.getPath([leaf.text]))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath([leaf.text]),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:[leaf.text]})],1),_vm._v(\" \"+_vm._s(child.text)+\" \")])}),0):_vm._e()])}),0)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\nimport {Datastream, Datastreams, Thing} from \"../../openapi/client\";\nimport config from '@/config/mqtt.json';\nexport default function groupByName(datastreams:Datastreams){\n  const ret:any = {}\n\n  datastreams.value?.forEach((datastream:Datastream)=>{\n    if(datastream.name) {\n      if (!ret[datastream.name]) {\n        ret[datastream.name] = [];\n      }\n      ret[datastream.name].push(datastream);\n    }\n  })\n  return ret;\n}\n\nexport function groupByCategory(datastreams:Array<Datastream>|Array<Thing>|undefined){\n  const ret:any = {}\n  let type = \"uncategorized\";\n  console.log(datastreams)\n  if(datastreams){\n        datastreams.forEach((datastream:Datastream|Thing)=>{\n      //@ts-ignore\n          if(datastream.properties && datastream.properties['sensorthings.datastream.type']){\n            //@ts-ignore\n            type = datastream.properties[\"sensorthings.datastream.type\"].toString();\n          }\n          if(datastream['@iot.id'] && datastream['@iot.id']?.toString().split('~').length>2){\n            type = datastream['@iot.id']?.toString().split('~')[2];\n          }\n          if(datastream.name && !config.DatastreamExclude.includes(type)) {\n            if (!ret[type]) {\n              ret[type] = [];\n            }\n\n              ret[type].push(datastream);\n\n\n          }\n\n\n        })\n  }\n  return ret;\n}\nexport function groupByCategoryAndThing(datastreams:Array<Datastream>,things?:Array<Thing>){\n  const ret:any = {}\n  let type = \"uncategorized\";\n  console.log(datastreams)\n  if(datastreams){\n    datastreams.forEach((datastream:Datastream)=>{\n      //@ts-ignore\n      if(datastream.properties && datastream.properties['sensorthings.datastream.type']){\n        //@ts-ignore\n        type = datastream.properties[\"sensorthings.datastream.type\"].toString();\n      }\n      if(datastream['@iot.id'] && datastream['@iot.id']?.toString().split('~').length>2){\n        type = datastream['@iot.id']?.toString().split('~')[2];\n      }\n      if(datastream.name && !config.DatastreamExclude.includes(type)) {\n        if (!ret[type]) {\n          ret[type] = [];\n        }\n\n        ret[type].push(datastream);\n\n\n      }\n\n\n    })\n  }\n  return ret;\n}\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport {\n  mdiBattery40, mdiCamcorder,\n  mdiCloudPercent,\n  mdiGauge,\n  mdiGrain, mdiHazardLights,\n  mdiThermometerLow,\n  mdiTrafficLight,\n  mdiWeatherDust\n} from \"@mdi/js\";\nimport {mdiCamera, mdiCameraControl} from \"@mdi/js/commonjs/mdi\";\n\nexport function getPath(id: string) {\n  switch (id) {\n    case 'tlc':\n      return mdiTrafficLight\n    case 'color':\n      return mdiTrafficLight\n    case 'battery':\n      return mdiBattery40\n    case 'PM_2_5':\n    case 'PM_10':\n    case 'PM_1':\n      return mdiGrain\n    case 'air_pressure':\n      return mdiGauge\n    case 'air_humidity':\n      return mdiCloudPercent\n    case 'air_qi':\n      return mdiWeatherDust\n    case 'air_temprature':\n      return mdiThermometerLow\n    case 'temperature':\n      return mdiThermometerLow\n    case 'traficam':\n      return mdiCamera\n    case 'traficam_observedArea':\n      return mdiCamera\n    case 'viewport':\n      return mdiCamera\n    case 'ViewPort':\n      return mdiCameraControl\n    case 'conflict':\n      return mdiHazardLights\n    case 'TrafiCam':\n      return mdiCamera\n    default:\n      return null\n  }\n}\n","\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Configuration,\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location, Locations,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\nimport {getBaseUrl} from \"@/config/base\";\nimport groupByName, {groupByCategory, groupByCategoryAndThing} from \"@/helper/DatastreamGroups\";\n//@ts-ignore\nimport SvgIcon from '@jamescoyle/vue-icon';\n\nimport { getPath } from \"@/helper/SVGPaths\";\n\n@Component({\n  components: {\n    VTreeview,\n    SvgIcon\n  }\n})\nexport default class StreamTreeC extends Vue {\n\n\n   private loading = false;\n\n\n  private treeData: any = [];\n\n  private selectedNodesKeys: any = {};\n  private oldEnabledCategories = '';\n\n  @Watch('$route.query') query_changed_out(new_query_params:any){\n    this.query_changed(new_query_params)\n  }\n\n\n  query_changed(new_query_params: any,force=false) {\n    if ( (force || this.oldEnabledCategories!=new_query_params.enabledCategories)) {\n      let array_of_key_to_select = new_query_params.enabledCategories.split(',');\n      this.treeData.forEach((node: any) => {\n        if (array_of_key_to_select.includes(node.key)) {\n          this.selectedNodesKeys[node.key] = node._data;\n          node.active = true;\n        }\n      })\n      let emit: any = [];\n      for (let key in this.selectedNodesKeys) {\n        emit = emit.concat(this.selectedNodesKeys[key])\n      }\n      this.oldEnabledCategories = new_query_params.enabledCategories;\n      this.$emit('selection', emit)\n    }\n  }\n\n  mounted() {\n    //this.getDatascreamsTree()\n    //this.query_changed(this.$route.query)\n\n  }\n\n  getPath(id:string){\n    return getPath(id[0])\n  }\n\n  async selected(node: any) {\n\n    if(node.children){\n      if (node.active) {\n        for (let child of node.children) {\n          delete this.selectedNodesKeys[child.key];\n          child.active = false;\n        }\n        node.active = false;\n      }\n      else {\n          for(let child of node.children){\n            this.selectedNodesKeys[child.key] = child._data;\n            child.active = true;\n          }\n        node.active = true;\n      }\n\n    }else{\n      if (node.active) {\n        delete this.selectedNodesKeys[node.key];\n        node.active = false;\n      } else {\n        this.selectedNodesKeys[node.key] = node._data;\n        node.active = true;\n      }\n    }\n\n\n    /*let emit:any = [];\n    for(let key in this.selectedNodesKeys){\n      console.log(this.selectedNodesKeys[key])\n      emit = emit.concat(this.selectedNodesKeys[key])\n    }\n    console.log(emit)\n    console.log(Object.keys(this.selectedNodesKeys).join(','))*/\n\n    let query:any = {};\n    try{\n      //query = this.$route.query;\n      /*if(this.$route.query.enabledCategories){\n        query['enabledCategories'] = this.$route.query.enabledCategories\n      }*/\n      if(this.$route.query.coord){\n        query['coord'] = this.$route.query.coord\n      }\n      if(this.$route.query.zoom){\n        query['zoom'] = this.$route.query.zoom\n      }\n      if(this.$route.query.enabledTraficLights){\n        query['enabledTraficLights'] = this.$route.query.enabledTraficLights\n      }\n\n      query['enabledCategories'] = Object.keys(this.selectedNodesKeys).join(',');\n      //query['time'] = Math.random()\n    }\n    catch (e){\n      console.log(e)\n    }\n\n\n    this.$router.replace({\n      name: 'datastreams',\n      query: {...query}\n    }).catch(err => {\n      //console.log(err)\n    })\n    /*this.$router.replace({\n      name: 'datastreams',\n      query: {enabledCategories: Object.keys(this.selectedNodesKeys).join(',')}\n    })*/\n    //this.$emit('selection', emit)\n\n  }\n\n\n  async getDatascreamsTree(datastreams: Array<Datastream>,things?:Array<Thing>) {\n\n\n\n    let ret: unknown[] = [];\n    //let groups = groupByCategory(datastreams)\n    let groups = groupByCategoryAndThing(datastreams,things)\n    for (const [key, value] of Object.entries(groups)) {\n\n      const v = value as Array<Datastream>;\n      let node = {\n        id: Math.random() * 100000,\n        text: key,\n        type: \"FMM_DATASTREAM\",\n        children: v.map((entry:Datastream)=>{\n          const spl:string[] = ((entry[\"@iot.id\"]??'~')as string).split('~');\n          return {\n          id: Math.random() * 100000,\n          text: spl[0]+'~'+spl[1]??'',\n          type: \"FMM_THING\",\n          _data: entry,\n          key:entry[\"@iot.id\"],\n          active: false\n        }}),\n        _data: value,\n        key: key,\n        active: false,\n        childs_shown:true\n      }\n      ret.push(node);\n    }\n    this.treeData = ret;\n    this.query_changed(this.$route.query,true);\n  }\n  async getDatascreamsTreeThings(things: Array<Thing>|undefined) {\n    this.loading = true;\n\n    this.loading = false;\n    let ret: unknown[] = [];\n    let groups = groupByCategory(things)\n    for (const [key, value] of Object.entries(groups)) {\n\n\n      let node = {\n        id: Math.random() * 100000,\n        text: key,\n        type: \"FMM_DATASTREAM\",\n        children: [],\n        _data: value,\n        key: key,\n        active: false\n      }\n      ret.push(node);\n    }\n    this.treeData = ret;\n    this.query_changed(this.$route.query,true);\n  }\n  get isactive() {\n    return Object.keys(this.selectedNodesKeys)\n  }\n\n}\n\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreamTree.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreamTree.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./StreamTree.vue?vue&type=template&id=7c94b058&scoped=true&\"\nimport script from \"./StreamTree.vue?vue&type=script&lang=ts&\"\nexport * from \"./StreamTree.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./StreamTree.vue?vue&type=style&index=0&id=7c94b058&prod&scoped=true&lang=scss&\"\nimport style1 from \"./StreamTree.vue?vue&type=style&index=1&id=7c94b058&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7c94b058\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return (_vm.isBool)?_c('div',{staticClass:\"datapoint\",class:{'is_set':_vm.data,'unset':!_vm.data}},[(_vm.data)?_c('span',[_vm._v(\"!\")]):_vm._e()]):_c('div',{staticClass:\"datapoint\"},[_vm._v(\" \"+_vm._s(_vm.data)+\" \"+_vm._s(_vm.unit)+\" \")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\n\n@Component\nexport default class Datapoint extends Vue{\n  private data = ''\n  @Prop({default:()=>''}) readonly unit:any\n  @Prop() readonly id:any\n  @Prop() readonly isBool!:boolean;\n  mounted(){\n    /*setInterval(()=>{\n      console.log(this.obs)\n    },1000)*/\n  }\n  @Watch('$sstore.obs.state.obs') handler(data:any){\n    //console.log(this.$sstore.obs.state.obs[this.id]);\n    if(this.$sstore.obs.state.obs && this.$sstore.obs.state.obs[this.id] && this.$sstore.obs.state.obs[this.id].result){\n\n      this.data = this.$sstore.obs.state.obs[this.id].result;\n      console.log(this.data);\n    }else{\n      this.data = '';\n    }\n  }\n\n}\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datapoint.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datapoint.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datapoint.vue?vue&type=template&id=4b1969ca&scoped=true&\"\nimport script from \"./Datapoint.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datapoint.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datapoint.vue?vue&type=style&index=0&id=4b1969ca&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4b1969ca\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"mqtttree plane\"},_vm._l((_vm.categories),function(cat){return _c('div',{key:cat.name,staticClass:\"leaf\"},[_c('div',{staticClass:\"cat_icon\",on:{\"click\":function($event){return _vm.selected(cat)}}},[(_vm.getPath(cat.name))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath(cat.name),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:cat})],1),_c('div',{staticClass:\"stitle\",on:{\"click\":function($event){return _vm.selected(cat)}}},[_vm._v(\" \"+_vm._s(_vm.$t('prop.' + cat.name))+\" \")]),_c('div',{staticClass:\"chevron\",on:{\"click\":function($event){cat.childs_shown = !cat.childs_shown}}},[(!cat.childs_shown)?_c('i',{staticClass:\"mdi mdi-chevron-down\"}):_c('i',{staticClass:\"mdi mdi-chevron-up\"})]),(cat.childs_shown)?_c('div',{staticClass:\"childs\"},_vm._l((_vm.itemsByCategory(cat.name)),function(child){return _c('div',{key:child.id,staticClass:\"leaf\",class:[{'active': child.active},child.name],on:{\"click\":function($event){return _vm.selected(child)}}},[_c('div',{staticClass:\"cat_icon\"},[(_vm.getPath(cat.name))?_c('svg-icon',{staticClass:\"svg_icon2\",attrs:{\"type\":\"mdi\",\"path\":_vm.getPath(cat.name),\"size\":35}}):_c('div',{staticClass:\"svg_icon\",class:cat.name})],1),_vm._v(\" \"+_vm._s(child.name)+\" \")])}),0):_vm._e()])}),0)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\nimport {Vue, Component, Prop, VModel, Watch} from 'vue-property-decorator';\nimport { getPath } from \"@/helper/SVGPaths\";\n//@ts-ignore\nimport SvgIcon from '@jamescoyle/vue-icon';\n\nexport interface MqttListitem{\n  name:string\n  id:string\n  cat:string\n  active:boolean\n}\n\n@Component({\n  methods: {getPath},\n  components:{\n    SvgIcon\n  }\n\n})\nexport default class MqttList extends Vue {\n  @Prop()items:MqttListitem[]|undefined;\n  private listItems:MqttListitem[] = [];\n\n  @Watch('items')\n  items_changed(nv:MqttListitem[]){\n    nv.forEach((el)=>{\n      if(!this.listItems.map(e=>e.id).includes(el.id)){\n        this.listItems.push(el);\n      }\n    });\n  }\n\n  get categories(){\n    return [...new Set(this.listItems?.map(e=>e.cat))].map(cat=>{ // as  unique Array\n      return {\n        name:cat,\n        active:true,\n        childs_shown:true\n      }\n    })\n  }\n  get itemsByCategory() {\n    return (cat:string)=>{\n      return this.listItems?.filter(e=>(e.cat==cat))\n  }}\n  selected(o:any){\n    let items = this.listItems?.find(e=>e.id==o.id)\n    if(items){\n      items.active = !o.active;\n    }\n    const enabledTraficLights = this.listItems?.filter(e=>e.active).map(e=>e.cat+'_'+e.name).join(',');\n    //query['time'] = Math.random()\n    const query = {...this.$route.query};\n    query['enabledTraficLights'] =enabledTraficLights;\n    this.$router.replace({\n                           name: 'datastreams',\n                           query: query,\n                           replace:true\n                         }).catch(err => {\n\n    console.log(err)\n  })\n  }\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MqttList.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MqttList.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./MqttList.vue?vue&type=template&id=8e0e24ee&scoped=true&\"\nimport script from \"./MqttList.vue?vue&type=script&lang=ts&\"\nexport * from \"./MqttList.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./MqttList.vue?vue&type=style&index=0&id=8e0e24ee&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"8e0e24ee\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LTileLayer, LWMSTileLayer,LGeoJson} from \"vue2-leaflet\";\nimport {\n  LocationsApi,\n  Location,\n  Locations,\n  Configuration,\n  Datastream,\n  ThingsApi,\n  DatastreamsApi,\n  ObservationsApi, Observations, Datastreams, Things, Thing\n} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\nimport {BASE_PATH} from \"../../openapi/client/base\";\nimport {getBaseUrl, setBaseUrl} from \"@/config/base\";\nimport StreamTree from \"@/components/StreamTree.vue\";\nimport {AxiosResponse} from \"axios\";\n//@ts-ignore\n\nimport Vue2LeafletMarkercluster from \"vue2-leaflet-markercluster/Vue2LeafletMarkercluster.vue\";\n//@ts-ignore\nimport CustomMarker from 'vue-leaflet-custom-marker';\nimport Datapoint from \"@/components/Datapoint.vue\";\nimport { getPath } from \"@/helper/SVGPaths\";\n//@ts-ignore\nimport SvgIcon from '@jamescoyle/vue-icon';\n\nimport L from \"leaflet\";\n\nimport * as turf from '@turf/turf'\nimport conf from '@/config/mqtt.json';\nimport MqttList from \"@/components/MqttList.vue\";\n\nexport interface LocationsPlus {\n  dsid: String | undefined\n}\n\n@Component({\n  components: {\n    Datapoint,\n    StreamTree,\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LGeoJson,\n    LWMSTileLayer,\n    'v-marker-cluster': Vue2LeafletMarkercluster,\n    CustomMarker,\n    SvgIcon,MqttList\n\n  }\n})\nexport default class DatastreamsV extends Vue {\n  //private url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  private url = 'https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png'\n  //private url = 'https://map.jena.de/wms/kartenportal';\n  private attribution =\n    '&copy; <a href=\"https://www.stadiamaps.com/\" target=\"_blank\">Stadia Maps</a> &copy; <a href=\"https://openmaptiles.org/\" target=\"_blank\">OpenMapTiles</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom: number = 14;\n\n  private center = [50.93115286, 11.60392726];\n  private markerLatLng = [55.8382551745062, -4.20119980206699]\n  private locations: Array<Location> | undefined = [];\n  private selected: Location | null = null;\n  private obs: any = {};\n  private treeData: unknown = null;\n  //private baseurl:string = 'https://sensors.bgs.ac.uk/FROST-Server';\n  private baseurl: string = getBaseUrl();\n  private datastreams: Array<Datastream> | null = null;\n  private things: Array<Thing> | undefined = [];\n  private datastreamsbyID: { [key: string]: Datastream } = {};\n  private timer: any = null;\n  private selectedData: any = null;\n  private mqtt: Worker | null = null;\n  campoints = null;\n  observationsGeoJsonMqtt = null;\n  viewports = null;\n  observationsGeoJsonMqttConfig = null;\n  private mqttmenu = {};\n  private mqtt_items = {};\n  async mounted() {\n\n    this.mqtt = new Worker(new URL(\"@/worker/mqtt.ts\", import.meta.url));\n    this.mqtt.postMessage('connect');\n    this.mqtt.postMessage('subscribe');\n    this.mqtt.onmessage = (evt)=>{\n\n      let types:any = {};\n      let MqttItems:any = [];\n      /*Object.values(evt.data.features).forEach((feature:any)=>{\n        if(feature.properties && feature.properties.thing){\n          types[feature.properties.thing]=1;\n        }\n      })*/\n      Object.keys(evt.data.features).forEach((r:any)=>{\n        MqttItems.push({name:r,id:'TrafiCam_'+r,cat:'TrafiCam',active:false})\n      })\n      Object.keys(evt.data.configs).forEach((r:any)=>{\n        MqttItems.push({name:r,id:'ViewPort_'+r,cat:'ViewPort',active:false})\n      })\n      this.mqtt_items = MqttItems;\n      for( const [key, value] of Object.entries(evt.data.features)){\n        evt.data.features[key].features = Object.values(evt.data.features[key].features);\n      }\n      for( const [key, value] of Object.entries(evt.data.configs)){\n        evt.data.configs[key].features = Object.values(evt.data.configs[key].features);\n      }\n      this.viewports = evt.data.configs;\n      this.observationsGeoJsonMqtt = evt.data.features;\n\n      /*this.observationsGeoJsonMqtt =  {\n        type: \"FeatureCollection\",\n        features: Object.values(evt.data.features)\n      }as any*/\n      /*this.observationsGeoJsonMqttConfig =  {\n        type: \"FeatureCollection\",\n        features: Object.values(evt.data.configs)\n      }as any\n      this.campoints=  {\n        type: \"FeatureCollection\",\n        features: Object.values(evt.data.cams)\n      }as any\n      this.mqttmenu = {cams:evt.data.cams,configs:evt.data.configs};\n      */\n\n      //console.log(this.mqttmenu)\n\n    }\n    //this.SetobservationsGeoJsonMqtt();\n    let query = this.$route.query;\n    if (this.$route.query.zoom) {\n      try {\n        let zoom = parseInt(this.$route.query.zoom as string);\n        if (zoom > 1 && zoom < 19) {\n          this.zoom = zoom;\n        }\n      } catch (e) {\n        //parse Error\n      }\n\n    }\n    if (this.$route.query.coord) {\n      try {\n        let splitArr = (this.$route.query.coord as string).split(',');\n        let lat = parseFloat(splitArr[0]);\n        let lng = parseFloat(splitArr[1]);\n        if (lat > -90 && lat < 90 && lng > -180 && lng < 180) {\n          this.center = [lat, lng];\n        }\n      } catch (e) {\n        //parse Error\n      }\n\n    }\n    await this.load();\n  }\n\n  async load() {\n    console.log('load');\n    ///@ts-ignore\n    this.datastreams = (await new DatastreamsApi(new Configuration({basePath: getBaseUrl()}))\n      .v11DatastreamsGet()).data.value as Array<Datastream>;\n\n    //@ts-ignore\n    //this.datastreams = dataStreamMock.value as Array<Datastream>;\n\n    this.things = (await new ThingsApi(new Configuration({basePath: getBaseUrl()}))\n      .v11ThingsGet()).data.value;\n\n    // (this.$refs.streamTree as StreamTree).getDatascreamsTreeThings(this.things);\n\n    if (!this.datastreams) {\n      this.datastreams=[];\n    }\n    this.datastreams = this.datastreams.map(datastream=>{\n      if(datastream.observedArea && ['Polygon'].includes((datastream.observedArea as any).type)){\n        let geometry = datastream.observedArea;\n        (datastream.observedArea as any) = {\n          type:\"Feature\",\n          properties:{},\n          geometry:geometry\n        }\n      }\n      return datastream;\n    }) as Datastream[];\n\n      (this.$refs.streamTree as StreamTree).getDatascreamsTree(this.datastreams,this.things);\n      for (let datastream of this.datastreams) {\n        //@ts-ignore\n        this.datastreamsbyID[datastream[\"@iot.id\"]] = datastream;\n      }\n    }\n\n\n\n  deselect() {\n    this.selected = null;\n    //@ts-ignore\n    this.selectedData = null;\n  }\n\n  res(arr: any) {\n    return [arr[1], arr[0]]\n  }\n\n  ret(arr: any) {\n    return {\n      lat: arr[1],\n      lng: arr[0]\n    }\n  }\n\n  rev(arr: any) {\n    return {\n      lat: arr[0],\n      lng: arr[1]\n    }\n  }\n\n  connect() {\n    setBaseUrl(this.baseurl)\n    this.load();\n\n  }\n\n  checkFeatureCollectionRaw(point: any) {\n    if (!point.type) return false;\n    if (point.type !== 'FeatureCollection') return false;\n\n    return true;\n  }\n\n  checkFeatureCollection(point: any) {\n    if (!point.location) return false;\n    if (!point.location.type) return false;\n    if (! ['FeatureCollection','Point','LineString','Polygon','MultiPoint','MultiLineString','MultiPolygon','Feature'].includes(point.location.type)) return false;\n\n    return true;\n  }\n\n  checkPoint(point: any) {\n    if (!point.location) return false;\n    if (!point.location.latitude) return false;\n    if (!point.location.longitude) return false;\n\n\n    return true;\n  }\n\n\n  get geojson() {\n\n    if (!this.locations || this.locations.length==0) return [];\n    const map = this.locations.filter(this.checkFeatureCollection);\n    console.log(map)\n    return map;\n  }\n\n  get observationsGeoJson() {\n    try {\n      let ret = Object.values(this.$sstore.obs.state.obs).filter((e: any) => {\n        return this.checkFeatureCollectionRaw(e.result);\n      });\n      if (!ret) return [];\n      return ret;\n    } catch (r) {\n      console.log(r);\n      return []\n    }\n  }\n\n  get points() {\n    if (!this.locations) return [];\n    let map = this.locations.filter(this.checkPoint);\n    return map;\n  }\n\n  get centerPoints() {\n\n      return this.geojson.map(e => {\n        let f = {...e};\n\n        try {\n          if(e.location){\n            if((e.location as any).type=='FeatureCollection'){\n              (e.location! as any).properties={} as any;\n            }\n\n            //@ts-ignore\n            //if(e.location.features)\n            //f.location = turf.center(e.location.features[0]);\n            f.location = turf.center(e.location);\n            console.log(f)\n          }\n        } catch (err) {\n          console.log(err);\n\n        }\n        return f;\n      })\n\n  }\n\n\n  markerWasClicked(point: Location & LocationsPlus) {\n    this.selected = point;\n    //@ts-ignore\n    this.selectedData = {data: this.datastreamsbyID[point['@iot.id']], type: 'FMM_DATASTREAM'}\n  }\n\n\n  async select(model: Datastream[]) {\n    console.log('model')\n    console.log(model)\n    this.locations = [];\n    let proms: Promise<any>[] = [];\n    model.forEach((datastream: Datastream) => {\n      if (datastream && datastream[\"@iot.id\"]) {\n        if (datastream.observedArea) {\n          //@ts-ignore\n\n          let loctype = {...datastream} as any;\n          loctype.observedArea['properties'] = {\"@iot.id\": datastream[\"@iot.id\"]}\n          loctype[\"@iot.id\"] = datastream[\"@iot.id\"];\n          loctype['location'] = {\n            type: \"FeatureCollection\",\n            features: [loctype.observedArea],\n          };\n          this.locations?.push(loctype);\n        } else {\n\n\n          //@ts-ignore\n          proms.push(new Promise(async (res, rej) => {\n            try {\n              //@ts-ignore\n              let result = await new ThingsApi(new Configuration({basePath: getBaseUrl()})).v11ThingsEntityIdLocationsGet((datastream[\"@iot.id\"].toString().split('~')[0]));\n              if (result.data && result.data.value && result.data.value[0]) {\n                //@ts-ignore\n                (result.data.value[0] as LocationsPlus)['@iot.id'] = datastream[\"@iot.id\"];\n              }\n              res(result);\n            } catch (e) {\n              rej(e)\n            }\n          }));\n        }\n      }\n    })\n    let thingsLoaction: AxiosResponse<Locations & LocationsPlus>[] = await Promise.all(proms);\n\n    this.locations = this.locations.concat(\n      thingsLoaction.map((e: AxiosResponse<Locations & LocationsPlus>) => {\n      return (e.data.value![0])\n    })\n    );\n    console.log('setPoints');\n\n    //this.locations.push({\"@iot.id\": \"karl\"} as Location)\n\n    try{\n      this.$sstore.obs.setPoints(this.locations);\n      this.$sstore.obs.getDataForPoints();\n      if (this.locations.length > 0) {\n        this.$sstore.obs.settimer();\n      } else {\n        this.$sstore.obs.clearTimer();\n      }\n    }catch (e){\n      console.log(e);\n    }\n\n    if(this.$refs.clusterRef2){\n      //@ts-ignore\n      this.$refs.clusterRef2!.mapObject.refreshClusters();\n    }\n\n\n\n\n  }\n\n  beforeDestroy() {\n    this.$sstore.obs.clearTimer();\n  }\n\n  getPath(id: string) {\n    return getPath(id)\n  }\n\n  updateCenter(center: any) {\n    let query: any = {}\n    if (this.$route.query.enabledCategories) {\n      query['enabledCategories'] = this.$route.query.enabledCategories\n    }\n    if(this.$route.query.enabledTraficLights){\n      query['enabledTraficLights'] = this.$route.query.enabledTraficLights\n    }\n    if (this.$route.query.coord) {\n      query['zoom'] = this.$route.query.zoom\n    }\n    query['coord'] = center['lat'] + ',' + center['lng']\n\n    this.$router.replace({\n      name: 'datastreams',\n      query: query\n    }).catch(err => {\n    })\n\n  }\n\n  updateZoom(zoom: any) {\n    let query: any = {}\n    if (this.$route.query.enabledCategories) {\n      query['enabledCategories'] = this.$route.query.enabledCategories\n    }\n    if (this.$route.query.coord) {\n      query['coord'] = this.$route.query.coord\n    }\n    if(this.$route.query.enabledTraficLights){\n      query['enabledTraficLights'] = this.$route.query.enabledTraficLights\n    }\n    query['zoom'] = zoom\n\n    this.$router.replace({\n      name: 'datastreams',\n      query: query\n    }).catch(err => {\n    })\n  }\n\n  swapCoords(coords: any) {\n    //                    latitude , longitude, altitude\n    //return new L.LatLng(coords[1], coords[0], coords[2]); //Normal behavior\n    return new L.LatLng(coords[0], coords[1], coords[2]);\n  }\n\n   style(featureid:any) {\n\n\n    if(featureid.split('~').reverse()[0]=='conflict' && this.$sstore.obs.state.obs[featureid]){\n      console.log(this.$sstore.obs.state.obs[featureid]);\n      if(this.$sstore.obs.state.obs[featureid].result){\n        return (feature: any) => {\n          return {\n            weight: 2,\n            color: \"rgba(253,193,0,0.6)\",\n            opacity: 1,\n            fillColor: 'rgba(253,193,0,0.6)',\n            fillOpacity: 0.8\n          };\n        };\n      }else {\n        return {\n          weight: 2,\n          color: \"rgba(222,220,220,0)\",\n          opacity: 1,\n          fillColor: '#cccccc',\n          fillOpacity: 0.8\n        };\n      }\n    }\n    //console.log(featureid)\n    return (feature: any) => {\n      return {\n        weight: 2,\n        color: \"#ECEFF1\",\n        opacity: 1,\n        fillColor: '#ccc',\n        fillOpacity: 0.8\n      };\n    };\n  }\n\n  get pointToLayer() {\n    return (feature: any, latlng: any) => {\n\n      let div = document.createElement(\"div\");\n      let inner = document.createElement(\"div\");\n      let icon = document.createElement(\"div\");\n      icon.classList.add('icon');\n      div.classList.add('marker');\n      inner.classList.add('inner');\n      div.append(inner);\n      div.append(icon);\n      if (feature.properties.heading) {\n\n        const deg = (feature.properties.heading ?? 0) - 45;\n        inner.style.webkitTransform = 'rotate(' + deg + 'deg)';\n        //div.style.mozTransform    = 'rotate('+deg+'deg)';\n        //div.style.msTransform     = 'rotate('+deg+'deg)';\n        //div.style.oTransform      = 'rotate('+deg+'deg)';\n        inner.style.transform = 'rotate(' + deg + 'deg)';\n      }\n      if(feature.properties.type){\n        inner.classList.add('type_'+feature.properties.type);\n        let innerHTML = feature.properties.type;\n        switch (feature.properties.type){\n          case '0':\n            innerHTML = '<i class=\"mdi  mdi-walk\"> </i>'\n            break;\n\n          case '1':\n          case '2':\n          case '3':\n            innerHTML = '<i class=\"mdi mdi-bike\"> </i>'\n            break;\n          case '5':\n          case '6':\n            innerHTML = '<i class=\"mdi mdi-car-side\"> </i>'\n            break;\n          case '7':\n            innerHTML = '<i class=\"mdi mdi-van-passenger\"> </i>'\n            break;\n          case '10':\n          case '11':\n          case '12':\n            innerHTML = '<i class=\"mdi mdi-truck\"> </i>'\n            break;\n          case '14':\n            innerHTML = '<i class=\"mdi mdi-bus-side\"> </i>'\n            break;\n\n\n        }\n        icon.innerHTML = innerHTML;\n      }\n\n      return new L.Marker(latlng, {\n        icon:\n          L.divIcon({className: 'my-div-icon', html: div})\n      });\n    }\n  }\n\n  get styleP() {\n\n    return (feature: any) => {\n      return {\n        weight: 2,\n        color: \"#ECEFF1\",\n        opacity: 1,\n        fillColor: '#ccc',\n        fillOpacity: 0.8\n      };\n    };\n  }\n\n  get styleC() {\n\n    return (feature: any) => {\n      return {\n        weight: 2,\n        color: \"#8c8c8c\",\n\n        opacity: 1,\n        fillColor: '#e3e3e3',\n        fillOpacity: 0.5\n      };\n    };\n  }\n  get camPointsSytle() {\n\n    return (feature: any, latlng: any) => {\n      let wrapper = document.createElement(\"div\");\n      let div = document.createElement(\"div\");\n      let inner = document.createElement(\"div\");\n      let icon = document.createElement(\"div\");\n      wrapper.classList.add('marker-wrapper','extSytle');\n      icon.classList.add('icon');\n      div.classList.add('marker-pin');\n      inner.classList.add('inner','type_cam','round');\n      icon.innerHTML = '<i class=\"mdi  mdi-camera-wireless\"> </i>';\n      div.append(inner);\n      inner.append(icon);\n      wrapper.append(div);\n\n      return new L.Marker(latlng, {\n        icon:\n          L.divIcon({className: 'my-div-icon', html: wrapper})\n      });\n    };\n  }\n\n  SetobservationsGeoJsonMqtt() {\n\n\n  }\n  tooltip =  (feature:any, layer:any)=> {\n    //console.log(feature)\n    layer.bindTooltip(feature.properties.id, {\n      direction: \"left\",\n      permanent: true,\n      className: 'labelstyle'\n    });\n    //layer.bindPopup(\"My popup content\");\n  }\n\n  get isSelected(){\n    return (point:any)=> {\n      const arr = point['@iot.id'].splitt('~');\n      return\n    }\n  }\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=613e94dc&scoped=true&\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=613e94dc&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Datastreams.vue?vue&type=style&index=1&id=613e94dc&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"613e94dc\",\n  null\n  \n)\n\nexport default component.exports","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport Vue from 'vue'\nimport VueRouter, { RouteConfig } from 'vue-router'\nimport Map from \"@/views/Map.vue\";\nimport Tree from \"@/components/Tree.vue\";\nimport DatastreamsV from \"@/views/Datastreams.vue\";\n\nVue.use(VueRouter)\n\nconst routes: Array<RouteConfig> = [\n  {\n    path: '/details',\n    name: 'map',\n    component: Map,\n    children:[{\n      path: 'location/:id',\n      component: Tree,\n    }]\n  },\n  {\n    path: '/',\n    name: 'datastreams',\n    component: DatastreamsV,\n  }\n]\n\nconst router = new VueRouter({\n  mode: 'hash',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport VueI18n from \"vue-i18n\";\nimport TranslationDE from \"@/locales/de/translation.json\";\n\nimport Vue from \"vue\";\n\nVue.use(VueI18n);\nconst i18n:VueI18n = new VueI18n({\n    locale: 'de', // set locale\n    messages:{\n        de:TranslationDE,\n    },\n\n});\nexport default i18n;\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport {SimpleStore} from \"@/store/SimpleStore\";\nimport {Vue} from \"vue-property-decorator\";\n\n\n\nexport default class ObsStore implements SimpleStore {\n\n  private worker = new Worker(new URL(\"@/worker/obs.ts\", import.meta.url));\n  constructor(...args:any) {\n    this.worker.postMessage({command:'start'})\n    this.worker.onmessage = (ev)=>{\n      //console.log('msg in')\n      this.state.obs = ev.data.obs;\n    }\n  }\n  public state = Vue.observable({\n    obs: {},\n  });\n\n\n\n\n\n  setPoints(points:any){\n    this.worker.postMessage({command:'setPoints',payload:points})\n  }\n\n  update(): any {\n  }\n\n}\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\n\n/*export interface simpleStoreIF{\n    toolname: ToolnameStore,\n    toolImage: ToolImageStore,\n    strokes: StokesStore,\n    counters: CounterStore,\n    headImage: HeadImageStore\n}*/\nimport ObsStore from \"@/store/ObsStore\";\n\n\nexport interface simpleStoreIF{\n    [index: string]: SimpleStore;\n}\n\n\n\nexport const simpleStore:simpleStoreIF = {\n    obs:new ObsStore()\n\n};\n\nexport default {\n    install(Vue:any, options:any) {\n        Vue.prototype.$sstore = simpleStore;\n    },\n    update(){\n      for (let key in simpleStore){\n          simpleStore[key].update();\n      }\n    }\n\n};\n\n\nexport interface SimpleStore {\n    state: any\n\n    update():any\n\n}\n","/*********************************************************************\n * Copyright (c) YYYY Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport 'leaflet/dist/leaflet.css';\nimport {Icon} from \"leaflet\";\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\nimport i18n from \"@/i18n\";\nimport VueI18n from \"vue-i18n\";\n// @ts-ignore\nimport VueTreeList from 'vue-tree-list';\nimport './scss/general.scss';\nimport '@mdi/font/css/materialdesignicons.css'\nimport PerfectScrollbar from \"vue2-perfect-scrollbar\";\nimport \"vue2-perfect-scrollbar/dist/vue2-perfect-scrollbar.css\";\nimport SimpleStore from './store/SimpleStore'\nVue.use(SimpleStore);\nVue.use(PerfectScrollbar);\nVue.use(VueTreeList)\nVue.config.productionTip = false\n//@ts-ignore\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\ntype D = Icon.Default & {\n  _getIconUrl?: string;\n};\n\ndelete (Icon.Default.prototype as D)._getIconUrl;\nVue.use(Buefy);\nVue.use(VueI18n);\n\nnew Vue({\n  router,\n  i18n,\n  render: h => h(App)\n}).$mount('#app')\n","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 941,\n\t\"./en-il.js\": 941,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"591\":\"02195083\",\"760\":\"78ef03ad\"}[chunkId] + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksensor_thing_api_map\"] = self[\"webpackChunksensor_thing_api_map\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(2678); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","_setupProxy","attrs","showInfoBox","infoUri","_e","staticRenderFns","model","value","active","callback","$$v","expression","staticClass","staticStyle","InfoBox","Vue","__decorate","Prop","default","Component","component","App","async","window","location","protocol","host","config","axios","data","INFO_CHECK_URI","INFO_BASE_URI","status","e","console","log","components","baseurl","on","$event","connect","_v","zoom","center","url","attribution","_l","points","point","key","pol","markerWasClicked","res","features","geometry","coordinates","class","selected","treeData","BASE_PATH","replace","BaseAPI","constructor","configuration","basePath","globalAxios","RequiredError","Error","field","msg","super","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setFlattenedQueryParams","urlSearchParams","parameter","Array","isArray","forEach","item","Object","keys","currentKey","has","append","set","setSearchParams","objects","searchParams","URLSearchParams","search","toString","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","DatastreamsApiAxiosParamCreator","v11DatastreamsEntityIdGet","entityId","$select","$expand","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","headers","v11DatastreamsEntityIdObservationsGet","$skip","$top","$count","$filter","v11DatastreamsEntityIdObservedPropertyDatastreamsGet","v11DatastreamsEntityIdObservedPropertyGet","v11DatastreamsEntityIdSensorDatastreamsGet","v11DatastreamsEntityIdSensorGet","v11DatastreamsEntityIdThingDatastreamsGet","v11DatastreamsEntityIdThingGet","v11DatastreamsEntityIdThingLocationsGet","v11DatastreamsGet","DatastreamsApiFp","localVarAxiosParamCreator","localVarAxiosArgs","DatastreamsApi","then","LocationsApiAxiosParamCreator","v11LocationsEntityIdGet","v11LocationsEntityIdThingsGet","v11LocationsGet","LocationsApiFp","LocationsApi","ThingsApiAxiosParamCreator","v11ThingsEntityIdDatastreamsGet","v11ThingsEntityIdGet","v11ThingsEntityIdLocationsGet","v11ThingsGet","ThingsApiFp","ThingsApi","Configuration","param","apiKey","username","password","accessToken","formDataCtor","isJsonMime","mime","jsonMime","RegExp","test","toLowerCase","type","loading","activeTab","_s","$i18n","t","description","encodingType","join","properties","ThingC","LocationC","ThingsC","noprops","chartdata","chartOptions","baseUrl","setBaseUrl","getBaseUrl","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","TimeScale","ObservationsC","maxBarThickness","barThickness","plugins","legend","display","responsive","maintainAspectRatio","scales","time","displayFormats","dataChanged","newD","loadData","mounted","observations","id","labels","map","moment","resultTime","datasets","label","title","backgroundColor","result","Watch","Bar","DatastreamsC","ret","atr","entries","Observations","PropertiesC","data_changed","new_data","Datastreams","Location","Thing","Map","arr","load","$router","push","params_chanded","params","immediate","LMap","LTileLayer","LMarker","LIcon","LPolygon","treeTypes","openAll","contextItems","contextSelected","TreeC","max_children","max_depth","valid_children","icon","$route","Math","random","text","count","children","id_changed","node","selectedNode","$emit","getThingsTree","child","addNode","_data","datastreams","getDatascreamsTree","datastreamsNode","things","thing","datastream","observation","getTypeRule","typeRule","filter","command","editName","VTreeview","_m","deselect","updateCenter","updateZoom","maxNativeZoom","maxZoom","viewports","viewport","query","enabledTraficLights","includes","pointToLayer","styleP","observationsGeoJsonMqtt","geoJsonTragicLight","geojson","style","centerPoints","length","ref","spiderfyDistanceMultiplier","animate","animateAddingMarkers","zoomToBoundsOnClick","disableClusteringAtZoom","nativeOn","ev","stopImmediatePropagation","apply","arguments","split","reverse","getPath","select","mqtt_items","selectedData","leaf","$t","childs_shown","groupByCategory","groupByCategoryAndThing","mdiTrafficLight","mdiBattery40","mdiGrain","mdiGauge","mdiCloudPercent","mdiWeatherDust","mdiThermometerLow","mdiCamera","mdiCameraControl","mdiHazardLights","StreamTreeC","query_changed_out","new_query_params","query_changed","force","oldEnabledCategories","enabledCategories","array_of_key_to_select","selectedNodesKeys","emit","concat","coord","catch","err","groups","v","entry","spl","isactive","SvgIcon","isBool","unit","Datapoint","handler","$sstore","obs","state","categories","cat","itemsByCategory","MqttList","items_changed","nv","el","listItems","Set","o","items","find","methods","DatastreamsV","feature","layer","bindTooltip","direction","permanent","className","mqtt","Worker","postMessage","onmessage","evt","MqttItems","r","configs","values","parseInt","splitArr","lat","parseFloat","lng","observedArea","$refs","streamTree","datastreamsbyID","rev","checkFeatureCollectionRaw","checkFeatureCollection","checkPoint","latitude","longitude","locations","observationsGeoJson","f","turf","proms","loctype","Promise","rej","thingsLoaction","all","setPoints","getDataForPoints","settimer","clearTimer","clusterRef2","mapObject","refreshClusters","beforeDestroy","swapCoords","coords","L","featureid","weight","color","opacity","fillColor","fillOpacity","latlng","div","document","createElement","inner","classList","add","heading","deg","webkitTransform","transform","innerHTML","html","styleC","camPointsSytle","wrapper","SetobservationsGeoJsonMqtt","isSelected","splitt","StreamTree","LGeoJson","LWMSTileLayer","Vue2LeafletMarkercluster","CustomMarker","VueRouter","routes","path","Tree","router","mode","base","process","VueI18n","i18n","locale","messages","de","TranslationDE","ObsStore","args","worker","payload","update","simpleStore","install","prototype","SimpleStore","PerfectScrollbar","VueTreeList","Icon","iconRetinaUrl","require","iconUrl","shadowUrl","Buefy","h","$mount","webpackContext","req","webpackContextResolve","__webpack_require__","code","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","n","getter","__esModule","d","a","definition","defineProperty","enumerable","get","u","chunkId","g","globalThis","Function","obj","prop","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","b","baseURI","self","href","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}