{"version":3,"file":"js/818.732be9ab.js","mappings":"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","sources":["webpack://sensor_thing_api_map/./node_modules/core-js/internals/a-callable.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/an-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/array-includes.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/array-set-length.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/classof-raw.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/classof.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/copy-constructor-properties.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/create-non-enumerable-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/create-property-descriptor.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/define-built-in.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/define-global-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/descriptors.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/document-create-element.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/does-not-exceed-safe-integer.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/enum-bug-keys.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/environment-user-agent.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/environment-v8-version.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/export.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/fails.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-bind-native.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-call.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-name.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/function-uncurry-this.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/get-built-in.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/get-method.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/global-this.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/has-own-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/hidden-keys.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/ie8-dom-define.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/indexed-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/inspect-source.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/internal-state.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-array.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-callable.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-forced.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-null-or-undefined.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-pure.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/is-symbol.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/length-of-array-like.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/make-built-in.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/math-trunc.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-define-property.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-get-own-property-descriptor.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-get-own-property-names.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-get-own-property-symbols.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-is-prototype-of.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-keys-internal.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/object-property-is-enumerable.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/ordinary-to-primitive.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/own-keys.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/require-object-coercible.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/shared-key.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/shared-store.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/shared.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/symbol-constructor-detection.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-absolute-index.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-indexed-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-integer-or-infinity.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-length.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-object.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-primitive.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-property-key.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-string-tag-support.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/to-string.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/try-to-string.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/uid.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/use-symbol-as-uid.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/v8-prototype-define-bug.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/validate-arguments-length.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/weak-map-basic-detection.js","webpack://sensor_thing_api_map/./node_modules/core-js/internals/well-known-symbol.js","webpack://sensor_thing_api_map/./node_modules/core-js/modules/es.array.push.js","webpack://sensor_thing_api_map/./node_modules/core-js/modules/web.url-search-params.delete.js","webpack://sensor_thing_api_map/./node_modules/core-js/modules/web.url-search-params.has.js","webpack://sensor_thing_api_map/./node_modules/core-js/modules/web.url-search-params.size.js","webpack://sensor_thing_api_map/webpack/bootstrap","webpack://sensor_thing_api_map/webpack/runtime/define property getters","webpack://sensor_thing_api_map/webpack/runtime/global","webpack://sensor_thing_api_map/webpack/runtime/hasOwnProperty shorthand","webpack://sensor_thing_api_map/webpack/runtime/make namespace object","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/bind.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/utils.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/AxiosError.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/null.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/toFormData.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/AxiosURLSearchParams.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/buildURL.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/InterceptorManager.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/defaults/transitional.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/classes/FormData.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/classes/Blob.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/browser/index.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/common/utils.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/platform/index.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/toURLEncodedForm.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/formDataToJSON.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/defaults/index.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/parseHeaders.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/AxiosHeaders.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/transformData.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/cancel/isCancel.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/cancel/CanceledError.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/settle.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/parseProtocol.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/speedometer.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/throttle.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/progressEventReducer.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/cookies.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/combineURLs.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/buildFullPath.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/mergeConfig.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/resolveConfig.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/adapters/xhr.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/composeSignals.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/trackStream.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/adapters/fetch.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/adapters/adapters.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/dispatchRequest.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/env/data.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/validator.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/core/Axios.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/cancel/CancelToken.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/spread.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/isAxiosError.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/helpers/HttpStatusCode.js","webpack://sensor_thing_api_map/./node_modules/axios/lib/axios.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://sensor_thing_api_map/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://sensor_thing_api_map/./openapi/client/base.ts","webpack://sensor_thing_api_map/./openapi/client/common.ts","webpack://sensor_thing_api_map/./openapi/client/api.ts","webpack://sensor_thing_api_map/./openapi/client/configuration.ts","webpack://sensor_thing_api_map/./src/config/base.ts","webpack://sensor_thing_api_map/./src/worker/obs.ts"],"sourcesContent":["'use strict';\nvar isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw new $TypeError(tryToString(argument) + ' is not a function');\n};\n","'use strict';\nvar isObject = require('../internals/is-object');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw new $TypeError($String(argument) + ' is not an object');\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    if (length === 0) return !IS_INCLUDES && -1;\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el !== el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value !== value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar isArray = require('../internals/is-array');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Safari < 13 does not throw an error in this case\nvar SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function () {\n  // makes no sense without proper strict mode support\n  if (this !== undefined) return true;\n  try {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty([], 'length', { writable: false }).length = 1;\n  } catch (error) {\n    return error instanceof TypeError;\n  }\n}();\n\nmodule.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function (O, length) {\n  if (isArray(O) && !getOwnPropertyDescriptor(O, 'length').writable) {\n    throw new $TypeError('Cannot set read only .length');\n  } return O.length = length;\n} : function (O, length) {\n  return O.length = length;\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n","'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Object = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n","'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","'use strict';\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","'use strict';\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\nvar definePropertyModule = require('../internals/object-define-property');\nvar makeBuiltIn = require('../internals/make-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nmodule.exports = function (O, key, value, options) {\n  if (!options) options = {};\n  var simple = options.enumerable;\n  var name = options.name !== undefined ? options.name : key;\n  if (isCallable(value)) makeBuiltIn(value, name, options);\n  if (options.global) {\n    if (simple) O[key] = value;\n    else defineGlobalProperty(key, value);\n  } else {\n    try {\n      if (!options.unsafe) delete O[key];\n      else if (O[key]) simple = true;\n    } catch (error) { /* empty */ }\n    if (simple) O[key] = value;\n    else definePropertyModule.f(O, key, {\n      value: value,\n      enumerable: false,\n      configurable: !options.nonConfigurable,\n      writable: !options.nonWritable\n    });\n  } return O;\n};\n","'use strict';\nvar globalThis = require('../internals/global-this');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(globalThis, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    globalThis[key] = value;\n  } return value;\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar isObject = require('../internals/is-object');\n\nvar document = globalThis.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n","'use strict';\nvar $TypeError = TypeError;\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991\n\nmodule.exports = function (it) {\n  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');\n  return it;\n};\n","'use strict';\n// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","'use strict';\nvar globalThis = require('../internals/global-this');\n\nvar navigator = globalThis.navigator;\nvar userAgent = navigator && navigator.userAgent;\n\nmodule.exports = userAgent ? String(userAgent) : '';\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar userAgent = require('../internals/environment-user-agent');\n\nvar process = globalThis.process;\nvar Deno = globalThis.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = globalThis;\n  } else if (STATIC) {\n    target = globalThis[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = globalThis[TARGET] && globalThis[TARGET].prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn(target, key, sourceProperty, options);\n  }\n};\n","'use strict';\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar call = Function.prototype.call;\n\nmodule.exports = NATIVE_BIND ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n","'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar call = FunctionPrototype.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n\nmodule.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call.apply(fn, arguments);\n  };\n};\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (argument) {\n  return isCallable(argument) ? argument : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(globalThis[namespace]) : globalThis[namespace] && globalThis[namespace][method];\n};\n","'use strict';\nvar aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined(func) ? undefined : aCallable(func);\n};\n","'use strict';\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  check(typeof this == 'object' && this) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n","'use strict';\nmodule.exports = {};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thanks to IE8 for its funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar $Object = Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) === 'String' ? split(it, '') : $Object(it);\n} : $Object;\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n","'use strict';\nvar NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');\nvar globalThis = require('../internals/global-this');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = globalThis.TypeError;\nvar WeakMap = globalThis.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","'use strict';\nvar classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nmodule.exports = Array.isArray || function isArray(argument) {\n  return classof(argument) === 'Array';\n};\n","'use strict';\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\nvar documentAll = typeof document == 'object' && document.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nmodule.exports = typeof documentAll == 'undefined' && documentAll !== undefined ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n","'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value === POLYFILL ? true\n    : value === NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","'use strict';\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nmodule.exports = function (it) {\n  return it === null || it === undefined;\n};\n","'use strict';\nvar isCallable = require('../internals/is-callable');\n\nmodule.exports = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n","'use strict';\nmodule.exports = false;\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar $Object = Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n};\n","'use strict';\nvar toLength = require('../internals/to-length');\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar CONFIGURABLE_FUNCTION_NAME = require('../internals/function-name').CONFIGURABLE;\nvar inspectSource = require('../internals/inspect-source');\nvar InternalStateModule = require('../internals/internal-state');\n\nvar enforceInternalState = InternalStateModule.enforce;\nvar getInternalState = InternalStateModule.get;\nvar $String = String;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\nvar stringSlice = uncurryThis(''.slice);\nvar replace = uncurryThis(''.replace);\nvar join = uncurryThis([].join);\n\nvar CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {\n  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;\n});\n\nvar TEMPLATE = String(String).split('String');\n\nvar makeBuiltIn = module.exports = function (value, name, options) {\n  if (stringSlice($String(name), 0, 7) === 'Symbol(') {\n    name = '[' + replace($String(name), /^Symbol\\(([^)]*)\\).*$/, '$1') + ']';\n  }\n  if (options && options.getter) name = 'get ' + name;\n  if (options && options.setter) name = 'set ' + name;\n  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });\n    else value.name = name;\n  }\n  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {\n    defineProperty(value, 'length', { value: options.arity });\n  }\n  try {\n    if (options && hasOwn(options, 'constructor') && options.constructor) {\n      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });\n    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable\n    } else if (value.prototype) value.prototype = undefined;\n  } catch (error) { /* empty */ }\n  var state = enforceInternalState(value);\n  if (!hasOwn(state, 'source')) {\n    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');\n  } return value;\n};\n\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n// eslint-disable-next-line no-extend-native -- required\nFunction.prototype.toString = makeBuiltIn(function toString() {\n  return isCallable(this) && getInternalState(this).source || inspectSource(this);\n}, 'toString');\n","'use strict';\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nmodule.exports = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor : ceil)(n);\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar call = require('../internals/function-call');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar hasOwn = require('../internals/has-own-property');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n","'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","'use strict';\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n","'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n","'use strict';\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar $TypeError = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw new $TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n","'use strict';\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\nvar $TypeError = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) throw new $TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","'use strict';\nvar shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n","'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar globalThis = require('../internals/global-this');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar SHARED = '__core-js_shared__';\nvar store = module.exports = globalThis[SHARED] || defineGlobalProperty(SHARED, {});\n\n(store.versions || (store.versions = [])).push({\n  version: '3.38.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n","'use strict';\nvar store = require('../internals/shared-store');\n\nmodule.exports = function (key, value) {\n  return store[key] || (store[key] = value || {});\n};\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/environment-v8-version');\nvar fails = require('../internals/fails');\nvar globalThis = require('../internals/global-this');\n\nvar $String = globalThis.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","'use strict';\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","'use strict';\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n","'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  var len = toIntegerOrInfinity(argument);\n  return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n","'use strict';\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $Object = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return $Object(requireObjectCoercible(argument));\n};\n","'use strict';\nvar call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $TypeError = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw new $TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n","'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n","'use strict';\nvar classof = require('../internals/classof');\n\nvar $String = String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n","'use strict';\nvar $String = String;\n\nmodule.exports = function (argument) {\n  try {\n    return $String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n","'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n","'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nmodule.exports = DESCRIPTORS && fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n","'use strict';\nvar $TypeError = TypeError;\n\nmodule.exports = function (passed, required) {\n  if (passed < required) throw new $TypeError('Not enough arguments');\n  return passed;\n};\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar isCallable = require('../internals/is-callable');\n\nvar WeakMap = globalThis.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));\n","'use strict';\nvar globalThis = require('../internals/global-this');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Symbol = globalThis.Symbol;\nvar WellKnownSymbolsStore = shared('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)\n      ? Symbol[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar setArrayLength = require('../internals/array-set-length');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar fails = require('../internals/fails');\n\nvar INCORRECT_TO_LENGTH = fails(function () {\n  return [].push.call({ length: 0x100000000 }, 1) !== 4294967297;\n});\n\n// V8 <= 121 and Safari <= 15.4; FF < 23 throws InternalError\n// https://bugs.chromium.org/p/v8/issues/detail?id=12681\nvar properErrorOnNonWritableLength = function () {\n  try {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty([], 'length', { writable: false }).push();\n  } catch (error) {\n    return error instanceof TypeError;\n  }\n};\n\nvar FORCED = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();\n\n// `Array.prototype.push` method\n// https://tc39.es/ecma262/#sec-array.prototype.push\n$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  push: function push(item) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var argCount = arguments.length;\n    doesNotExceedSafeInteger(len + argCount);\n    for (var i = 0; i < argCount; i++) {\n      O[len] = arguments[i];\n      len++;\n    }\n    setArrayLength(O, len);\n    return len;\n  }\n});\n","'use strict';\nvar defineBuiltIn = require('../internals/define-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\n\nvar $URLSearchParams = URLSearchParams;\nvar URLSearchParamsPrototype = $URLSearchParams.prototype;\nvar append = uncurryThis(URLSearchParamsPrototype.append);\nvar $delete = uncurryThis(URLSearchParamsPrototype['delete']);\nvar forEach = uncurryThis(URLSearchParamsPrototype.forEach);\nvar push = uncurryThis([].push);\nvar params = new $URLSearchParams('a=1&a=2&b=3');\n\nparams['delete']('a', 1);\n// `undefined` case is a Chromium 117 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=14222\nparams['delete']('b', undefined);\n\nif (params + '' !== 'a=2') {\n  defineBuiltIn(URLSearchParamsPrototype, 'delete', function (name /* , value */) {\n    var length = arguments.length;\n    var $value = length < 2 ? undefined : arguments[1];\n    if (length && $value === undefined) return $delete(this, name);\n    var entries = [];\n    forEach(this, function (v, k) { // also validates `this`\n      push(entries, { key: k, value: v });\n    });\n    validateArgumentsLength(length, 1);\n    var key = toString(name);\n    var value = toString($value);\n    var index = 0;\n    var dindex = 0;\n    var found = false;\n    var entriesLength = entries.length;\n    var entry;\n    while (index < entriesLength) {\n      entry = entries[index++];\n      if (found || entry.key === key) {\n        found = true;\n        $delete(this, entry.key);\n      } else dindex++;\n    }\n    while (dindex < entriesLength) {\n      entry = entries[dindex++];\n      if (!(entry.key === key && entry.value === value)) append(this, entry.key, entry.value);\n    }\n  }, { enumerable: true, unsafe: true });\n}\n","'use strict';\nvar defineBuiltIn = require('../internals/define-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\n\nvar $URLSearchParams = URLSearchParams;\nvar URLSearchParamsPrototype = $URLSearchParams.prototype;\nvar getAll = uncurryThis(URLSearchParamsPrototype.getAll);\nvar $has = uncurryThis(URLSearchParamsPrototype.has);\nvar params = new $URLSearchParams('a=1');\n\n// `undefined` case is a Chromium 117 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=14222\nif (params.has('a', 2) || !params.has('a', undefined)) {\n  defineBuiltIn(URLSearchParamsPrototype, 'has', function has(name /* , value */) {\n    var length = arguments.length;\n    var $value = length < 2 ? undefined : arguments[1];\n    if (length && $value === undefined) return $has(this, name);\n    var values = getAll(this, name); // also validates `this`\n    validateArgumentsLength(length, 1);\n    var value = toString($value);\n    var index = 0;\n    while (index < values.length) {\n      if (values[index++] === value) return true;\n    } return false;\n  }, { enumerable: true, unsafe: true });\n}\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\n\nvar URLSearchParamsPrototype = URLSearchParams.prototype;\nvar forEach = uncurryThis(URLSearchParamsPrototype.forEach);\n\n// `URLSearchParams.prototype.size` getter\n// https://github.com/whatwg/url/pull/734\nif (DESCRIPTORS && !('size' in URLSearchParamsPrototype)) {\n  defineBuiltInAccessor(URLSearchParamsPrototype, 'size', {\n    get: function size() {\n      var count = 0;\n      forEach(this, function () { count++; });\n      return count;\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\n// original code\n// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34\n\nconst _setImmediate = ((setImmediateSupported, postMessageSupported) => {\n  if (setImmediateSupported) {\n    return setImmediate;\n  }\n\n  return postMessageSupported ? ((token, callbacks) => {\n    _global.addEventListener(\"message\", ({source, data}) => {\n      if (source === _global && data === token) {\n        callbacks.length && callbacks.shift()();\n      }\n    }, false);\n\n    return (cb) => {\n      callbacks.push(cb);\n      _global.postMessage(token, \"*\");\n    }\n  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);\n})(\n  typeof setImmediate === 'function',\n  isFunction(_global.postMessage)\n);\n\nconst asap = typeof queueMicrotask !== 'undefined' ?\n  queueMicrotask.bind(_global) : ( typeof process !== 'undefined' && process.nextTick || _setImmediate);\n\n// *********************\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable,\n  setImmediate: _setImmediate,\n  asap\n};\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  if (response) {\n    this.response = response;\n    this.status = response.status ? response.status : null;\n  }\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.status\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n","'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nconst _navigator = typeof navigator === 'object' && navigator || undefined;\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = hasBrowserEnv &&\n  (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nexport {\n  hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv,\n  _navigator as navigator,\n  origin\n}\n","import platform from './node/index.js';\nimport * as utils from './common/utils.js';\n\nexport default {\n  ...utils,\n  ...platform\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data) ||\n      utils.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils.isResponse(data) || utils.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils.isHeaders(header)) {\n      for (const [key, value] of header.entries()) {\n        setHeader(value, key, rewrite);\n      }\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn.apply(null, args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n","import speedometer from \"./speedometer.js\";\nimport throttle from \"./throttle.js\";\nimport utils from \"../utils.js\";\n\nexport const progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null,\n      [isDownloadStream ? 'download' : 'upload']: true\n    };\n\n    listener(data);\n  }, freq);\n}\n\nexport const progressEventDecorator = (total, throttled) => {\n  const lengthComputable = total != null;\n\n  return [(loaded) => throttled[0]({\n    lengthComputable,\n    total,\n    loaded\n  }), throttled[1]];\n}\n\nexport const asyncDecorator = (fn) => (...args) => utils.asap(() => fn(...args));\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover its components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n","import utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils.isString(path) && cookie.push('path=' + path);\n\n      utils.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n","import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    }\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n    }, timeout)\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    }\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n}\n\nexport default composeSignals;\n","\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n","import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport {trackStream} from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport {progressEventReducer, progressEventDecorator, asyncDecorator} from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst test = (fn, ...args) => {\n  try {\n    return !!fn(...args);\n  } catch (e) {\n    return false\n  }\n}\n\nconst supportsRequestStream = isReadableStreamSupported && test(() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n});\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported &&\n  test(() => utils.isReadableStream(new Response('').body));\n\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      })\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils.isSpecCompliantForm(body)) {\n    const _request = new Request(platform.origin, {\n      method: 'POST',\n      body,\n    });\n    return (await _request.arrayBuffer()).byteLength;\n  }\n\n  if(utils.isArrayBufferView(body) || utils.isArrayBuffer(body)) {\n    return body.byteLength;\n  }\n\n  if(utils.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n}\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n}\n\nexport default isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n\n  let request;\n\n  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {\n      composedSignal.unsubscribe();\n  });\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader)\n      }\n\n      if (_request.body) {\n        const [onProgress, flush] = progressEventDecorator(\n          requestContentLength,\n          progressEventReducer(asyncDecorator(onUploadProgress))\n        );\n\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n      }\n    }\n\n    if (!utils.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'include' : 'omit';\n    }\n\n    // Cloudflare Workers throws when credentials are defined\n    // see https://github.com/cloudflare/workerd/issues/902\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      credentials: isCredentialsSupported ? withCredentials : undefined\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || (isStreamResponse && unsubscribe))) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n\n      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(\n        responseContentLength,\n        progressEventReducer(asyncDecorator(onDownloadProgress), true)\n      ) || [];\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {\n          flush && flush();\n          unsubscribe && unsubscribe();\n        }),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && unsubscribe && unsubscribe();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      })\n    })\n  } catch (err) {\n    unsubscribe && unsubscribe();\n\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\n\n","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport fetchAdapter from './fetch.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","export const VERSION = \"1.7.7\";","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  toAbortSignal() {\n    const controller = new AbortController();\n\n    const abort = (err) => {\n      controller.abort(err);\n    };\n\n    this.subscribe(abort);\n\n    controller.signal.unsubscribe = () => this.unsubscribe(abort);\n\n    return controller.signal;\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://sensors.bgs.ac.uk/FROST-Server\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Datastream\n */\nexport interface Datastream {\n    /**\n     * The Id of the datastream\n     * @type {number}\n     * @memberof Datastream\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Datastream\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Datastream\n     */\n    'Observations'?: Array<Observation>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastream\n     */\n    'Observations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Observations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {ObservedProperty}\n     * @memberof Datastream\n     */\n    'ObservedProperty'?: ObservedProperty;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'ObservedProperty@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Sensor}\n     * @memberof Datastream\n     */\n    'Sensor'?: Sensor;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Sensor@iot.navigationLink'?: string;\n    /**\n     * \n     * @type {Thing}\n     * @memberof Datastream\n     */\n    'Thing'?: Thing;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Datastream\n     */\n    'Thing@iot.navigationLink'?: string;\n    /**\n     * A description of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'description'?: string;\n    /**\n     * The label or name of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'name'?: string;\n    /**\n     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observationType'?: string;\n    /**\n     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observedArea'?: string;\n    /**\n     * The range of phenomenon times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'phenomenonTime'?: string;\n    /**\n     * \n     * @type {DatastreamProperties}\n     * @memberof Datastream\n     */\n    'properties'?: DatastreamProperties;\n    /**\n     * The range of result times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'resultTime'?: string;\n    /**\n     * \n     * @type {DatastreamUnitOfMeasurement}\n     * @memberof Datastream\n     */\n    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;\n}\n/**\n * \n * @export\n * @interface DatastreamProperties\n */\nexport interface DatastreamProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface DatastreamUnitOfMeasurement\n */\nexport interface DatastreamUnitOfMeasurement {\n    /**\n     * The full name of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'name'?: string;\n    /**\n     * The symbol of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'symbol'?: string;\n    /**\n     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'defintion'?: string;\n}\n/**\n * \n * @export\n * @interface Datastreams\n */\nexport interface Datastreams {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastreams\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastreams\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Datastreams\n     */\n    'value'?: Array<Datastream>;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterest\n */\nexport interface FeatureOfInterest {\n    /**\n     * The Id of the feature of interest\n     * @type {number}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'feature\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'encodingType'?: string;\n    /**\n     * The detailed description of the feature of interest, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'feature'?: string;\n    /**\n     * The label or name of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {FeatureOfInterestProperties}\n     * @memberof FeatureOfInterest\n     */\n    'properties'?: FeatureOfInterestProperties;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterestProperties\n */\nexport interface FeatureOfInterestProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the feature of interest type, set to \\'SEN_LOC\\' (Sensor Location) or \\'BOREHOLE\\'\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'type'?: string;\n    /**\n     * The elevation (Z) of the sensor location (type \\'SEN_LOC\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the sensor location is effective (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'to_date'?: string;\n    /**\n     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sobi_bgs_id'?: number;\n    /**\n     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'borehole_id'?: number;\n    /**\n     * The drilled length of the borehole in metres (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'drilled_length'?: number;\n    /**\n     * An alternative name by which the borehole is known (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference'?: string;\n    /**\n     * Indicates the source of the \\'reference\\' property (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference_type'?: string;\n    /**\n     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'publish_yn'?: string;\n}\n/**\n * \n * @export\n * @interface FeaturesOfInterest\n */\nexport interface FeaturesOfInterest {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<FeatureOfInterest>}\n     * @memberof FeaturesOfInterest\n     */\n    'value'?: Array<FeatureOfInterest>;\n}\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * The Id of the location\n     * @type {number}\n     * @memberof Location\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Location\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Location\n     */\n    'Things'?: Array<Thing>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Location\n     */\n    'Things@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Location\n     */\n    'Things@iot.nextLink'?: string;\n    /**\n     * A description of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'location\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'encodingType'?: string;\n    /**\n     * The location, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'location'?: string;\n    /**\n     * The label or name of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {LocationProperties}\n     * @memberof Location\n     */\n    'properties'?: LocationProperties;\n}\n/**\n * \n * @export\n * @interface LocationProperties\n */\nexport interface LocationProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The name of the site to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'site'?: string;\n    /**\n     * The name of the observatory to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'observatory'?: string;\n    /**\n     * The elevation (Z) of the location\n     * @type {number}\n     * @memberof LocationProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the location is effective\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the location is no longer effective, where it is not set the location is still active\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'to_date'?: string;\n    /**\n     * Any additional information about the location where available\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'comments'?: string;\n    /**\n     * A flag to indicate whether the location is the active location for a thing (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this location can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Locations\n */\nexport interface Locations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Locations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Locations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Locations\n     */\n    'value'?: Array<Location>;\n}\n/**\n * \n * @export\n * @interface Observation\n */\nexport interface Observation {\n    /**\n     * The Id of the observation\n     * @type {number}\n     * @memberof Observation\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Observation\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {ObservationParameters}\n     * @memberof Observation\n     */\n    'parameters'?: ObservationParameters;\n    /**\n     * The time when the observation happened\n     * @type {string}\n     * @memberof Observation\n     */\n    'phenomenonTime'?: string;\n    /**\n     * The estimated value of the observed property\n     * @type {string}\n     * @memberof Observation\n     */\n    'result'?: string;\n    /**\n     * A description of the quality of the result\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultQuality'?: string;\n    /**\n     * The time the result was generated\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultTime'?: string;\n    /**\n     * The time period during which the result can be used\n     * @type {string}\n     * @memberof Observation\n     */\n    'validTime'?: string;\n}\n/**\n * \n * @export\n * @interface ObservationParameters\n */\nexport interface ObservationParameters {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Observations\n */\nexport interface Observations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Observations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Observations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Observations\n     */\n    'value'?: Array<Observation>;\n}\n/**\n * \n * @export\n * @interface ObservedProperties\n */\nexport interface ObservedProperties {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof ObservedProperties\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof ObservedProperties\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<ObservedProperty>}\n     * @memberof ObservedProperties\n     */\n    'value'?: Array<ObservedProperty>;\n}\n/**\n * \n * @export\n * @interface ObservedProperty\n */\nexport interface ObservedProperty {\n    /**\n     * The Id of the observed property\n     * @type {number}\n     * @memberof ObservedProperty\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'definition'?: string;\n    /**\n     * A description of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'description'?: string;\n    /**\n     * The label or name of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ObservedPropertyProperties}\n     * @memberof ObservedProperty\n     */\n    'properties'?: ObservedPropertyProperties;\n}\n/**\n * \n * @export\n * @interface ObservedPropertyProperties\n */\nexport interface ObservedPropertyProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the observed property (Measured or Calculated)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of the formula used to derive values for the observed property (data type \\'Calculated\\' only)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'formula'?: string;\n    /**\n     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensor\n */\nexport interface Sensor {\n    /**\n     * The Id of the sensor type\n     * @type {number}\n     * @memberof Sensor\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Sensor\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'metadata\\' property\n     * @type {string}\n     * @memberof Sensor\n     */\n    'encodingType'?: string;\n    /**\n     * A detailed description of the sensor type (style based on \\'encodingType\\' property)\n     * @type {string}\n     * @memberof Sensor\n     */\n    'metadata'?: string;\n    /**\n     * The label or name of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {SensorProperties}\n     * @memberof Sensor\n     */\n    'properties'?: SensorProperties;\n}\n/**\n * \n * @export\n * @interface SensorProperties\n */\nexport interface SensorProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'complex_data_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensors\n */\nexport interface Sensors {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Sensors\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Sensors\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Sensor>}\n     * @memberof Sensors\n     */\n    'value'?: Array<Sensor>;\n}\n/**\n * \n * @export\n * @interface Thing\n */\nexport interface Thing {\n    /**\n     * The Id of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.id'?: string;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Thing\n     */\n    'Datastreams'?: Array<Datastream>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Datastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Datastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'HistoricalLocations@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Thing\n     */\n    'Locations'?: Array<Location>;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'Locations@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'Locations@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'MultiDatastreams@iot.nextLink'?: string;\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.count'?: number;\n    /**\n     * A link to a related entity or entity set\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.navigationLink'?: string;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Thing\n     */\n    'TaskingCapabilities@iot.nextLink'?: string;\n    /**\n     * A description of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'description'?: string;\n    /**\n     * The label or name of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ThingProperties}\n     * @memberof Thing\n     */\n    'properties'?: ThingProperties;\n}\n/**\n * \n * @export\n * @interface ThingProperties\n */\nexport interface ThingProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the type of thing, set to \\'SENSOR\\'\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'type'?: string;\n    /**\n     * The serial number of the physical sensor currently installed if known\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'serial_no'?: string;\n    /**\n     * Indicates how data from the thing is captured (Telemetered, Manual)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_capture'?: string;\n    /**\n     * The earliest observation date for which data from the thing will be available in the API\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'observation_start_date'?: string;\n    /**\n     * The elevation (Z) of the thing\\'s datum\n     * @type {number}\n     * @memberof ThingProperties\n     */\n    'datum_z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the \\'datum_z\\' value\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_z_crs'?: string;\n    /**\n     * The label or name for the thing\\'s datum\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_name'?: string;\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'borehole_reference'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Things\n */\nexport interface Things {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Things\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Things\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Things\n     */\n    'value'?: Array<Thing>;\n}\n\n/**\n * DatastreamsApi - axios parameter creator\n * @export\n */\nexport const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Datastreams`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DatastreamsApi - functional programming interface\n * @export\n */\nexport const DatastreamsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DatastreamsApi - factory interface\n * @export\n */\nexport const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DatastreamsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DatastreamsApi - interface\n * @export\n * @interface DatastreamsApi\n */\nexport interface DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n}\n\n/**\n * DatastreamsApi - object-oriented interface\n * @export\n * @class DatastreamsApi\n * @extends {BaseAPI}\n */\nexport class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * FeaturesOfInterestApi - axios parameter creator\n * @export\n */\nexport const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/FeaturesOfInterest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - functional programming interface\n * @export\n */\nexport const FeaturesOfInterestApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - factory interface\n * @export\n */\nexport const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = FeaturesOfInterestApiFp(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {\n            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeaturesOfInterestApi - interface\n * @export\n * @interface FeaturesOfInterestApi\n */\nexport interface FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;\n\n}\n\n/**\n * FeaturesOfInterestApi - object-oriented interface\n * @export\n * @class FeaturesOfInterestApi\n * @extends {BaseAPI}\n */\nexport class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LocationsApi - axios parameter creator\n * @export\n */\nexport const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})/Things`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Locations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LocationsApi - functional programming interface\n * @export\n */\nexport const LocationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LocationsApi - factory interface\n * @export\n */\nexport const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LocationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {\n            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LocationsApi - interface\n * @export\n * @interface LocationsApi\n */\nexport interface LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n}\n\n/**\n * LocationsApi - object-oriented interface\n * @export\n * @class LocationsApi\n * @extends {BaseAPI}\n */\nexport class LocationsApi extends BaseAPI implements LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdThingsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservationsApi - axios parameter creator\n * @export\n */\nexport const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Observations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservationsApi - functional programming interface\n * @export\n */\nexport const ObservationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservationsApi - factory interface\n * @export\n */\nexport const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {\n            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservationsApi - interface\n * @export\n * @interface ObservationsApi\n */\nexport interface ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n}\n\n/**\n * ObservationsApi - object-oriented interface\n * @export\n * @class ObservationsApi\n * @extends {BaseAPI}\n */\nexport class ObservationsApi extends BaseAPI implements ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservedPropertiesApi - axios parameter creator\n * @export\n */\nexport const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/ObservedProperties`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - functional programming interface\n * @export\n */\nexport const ObservedPropertiesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - factory interface\n * @export\n */\nexport const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservedPropertiesApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {\n            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservedPropertiesApi - interface\n * @export\n * @interface ObservedPropertiesApi\n */\nexport interface ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;\n\n}\n\n/**\n * ObservedPropertiesApi - object-oriented interface\n * @export\n * @class ObservedPropertiesApi\n * @extends {BaseAPI}\n */\nexport class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SensorsApi - axios parameter creator\n * @export\n */\nexport const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Sensors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SensorsApi - functional programming interface\n * @export\n */\nexport const SensorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SensorsApi - factory interface\n * @export\n */\nexport const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SensorsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {\n            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SensorsApi - interface\n * @export\n * @interface SensorsApi\n */\nexport interface SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;\n\n}\n\n/**\n * SensorsApi - object-oriented interface\n * @export\n * @class SensorsApi\n * @extends {BaseAPI}\n */\nexport class SensorsApi extends BaseAPI implements SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ThingsApi - axios parameter creator\n * @export\n */\nexport const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet: async (entityId: string, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet: async (entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Things`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ThingsApi - functional programming interface\n * @export\n */\nexport const ThingsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ThingsApi - factory interface\n * @export\n */\nexport const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ThingsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {string} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {string} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ThingsApi - interface\n * @export\n * @interface ThingsApi\n */\nexport interface ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n}\n\n/**\n * ThingsApi - object-oriented interface\n * @export\n * @class ThingsApi\n * @extends {BaseAPI}\n */\nexport class ThingsApi extends BaseAPI implements ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdDatastreamsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {string} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdGet(entityId: string, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {string} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdLocationsGet(entityId: string, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/*********************************************************************\n * Copyright (c) 2023 Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\n\nconst config= {\n  //baseUrl:window.location.origin+'/sensinact/rest',\n  //baseUrl:'http://localhost:8080/sensinact/rest',\n  baseUrl:'https://5g.data-in-motion.biz/sensinact/rest',\n\n  //baseUrl:'http://192.168.178.12:8080/sensinact/rest',\n  //baseUrl: 'https://udp-5g-broker.nomad-dmz.jena.de/sensinact/rest'\n};\n\nexport default config;\nexport function setBaseUrl(url:string){\n  config.baseUrl = url;\n}\nexport function getBaseUrl(){\n  return config.baseUrl;\n}\n\n","import {Configuration, Observation, Observations, ObservationsApi} from \"../../openapi/client\";\nimport obserservation_karl from \"@/Mock/observation_karl.json\";\nimport {AxiosResponse} from \"axios\";\nimport {getBaseUrl} from \"@/config/base\";\nimport conf from '@/config/mqtt.json';\n\n\nlet points:any = [];\nconst state = {\n  obs: {} as any,\n};\nlet timer:number|null = null;\n\nconst setPoints = (apoints:any)=>{\n  points = apoints;\n}\n\nself.addEventListener(\"message\", evt => {\n  if(evt.data &&  evt.data.command == 'setPoints') setPoints(evt.data.payload);\n  if(evt.data &&  evt.data.command == 'start') start();\n  if(evt.data &&  evt.data.command == 'stop') stop();\n});\n\nconst getDataForPoints =async ()=>{\n  console.log('getData')\n  const proms:Promise<Observations>[] = []\n  points?.forEach((point:any)=> {\n\n    if (point[\"@iot.id\"] === 'karl') {\n      proms.push(new Promise((res,rej)=>{\n        res({\n          value: [\n            {\n              \"@iot.id\": \"karl\",\n              \"result\": obserservation_karl\n            }\n          ]\n        } as unknown as Observations);\n      }));\n    } else{\n\n      //@ts-ignore\n      proms.push(\n        new Promise(async (res, rej) => {\n          try {\n            //@ts-ignore\n            const result: AxiosResponse<> = await new ObservationsApi(new Configuration({basePath: getBaseUrl()})).v11ObservationsEntityIdDatastreamObservationsGet(point[\"@iot.id\"]);\n            if (result.data && result.data.value && result.data.value[0]) {\n              //@ts-ignore\n              (result.data.value[0] as LocationsPlus)[\"@iot.id\"] = point[\"@iot.id\"];\n              /*if( point[\"@iot.id\"] == 'FelsenkellerRadAuto~conflict~conflict'){\n                result.data.value[0].result = true;\n              }*/\n              res(result.data);\n            }\n            else{\n              //res( {value:[{result:true,\"@iot.id\":point[\"@iot.id\"]}]}as Observations);\n              rej(null)\n            }\n\n          } catch (e) {\n            rej(e)\n          }\n        }));\n    }\n  })\n  const promsSettled = await Promise.allSettled(proms);\n  //this.obs= new Map();\n  promsSettled.forEach((obj:any) => {\n    if(obj.value  && obj.value.value && obj.value.value[0]){\n      const value:string = obj.value.value[0][\"@iot.id\"] as string\n      state.obs[value]= obj.value.value[0];\n    }\n\n  });\n  postMessage(state);\n\n\n}\nconst start = ()=>{\n  if(!timer){\n    timer = self.setInterval(()=>getDataForPoints(),conf.obsRefreshIntervall)\n  }\n}\nconst stop = ()=>{\n  if(timer) {\n    clearInterval(timer)\n    timer = null;\n  }\n}\n"],"names":["isCallable","tryToString","$TypeError","TypeError","module","exports","argument","isObject","$String","String","toIndexedObject","toAbsoluteIndex","lengthOfArrayLike","createMethod","IS_INCLUDES","$this","el","fromIndex","O","length","value","index","includes","indexOf","DESCRIPTORS","isArray","getOwnPropertyDescriptor","Object","SILENT_ON_NON_WRITABLE_LENGTH_SET","undefined","this","defineProperty","writable","error","uncurryThis","toString","stringSlice","slice","it","TO_STRING_TAG_SUPPORT","classofRaw","wellKnownSymbol","TO_STRING_TAG","$Object","CORRECT_ARGUMENTS","arguments","tryGet","key","tag","result","callee","hasOwn","ownKeys","getOwnPropertyDescriptorModule","definePropertyModule","target","source","exceptions","keys","f","i","createPropertyDescriptor","object","bitmap","enumerable","configurable","makeBuiltIn","name","descriptor","get","getter","set","setter","defineGlobalProperty","options","simple","global","unsafe","nonConfigurable","nonWritable","globalThis","fails","document","EXISTS","createElement","MAX_SAFE_INTEGER","navigator","userAgent","match","version","process","Deno","versions","v8","split","createNonEnumerableProperty","defineBuiltIn","copyConstructorProperties","isForced","FORCED","targetProperty","sourceProperty","TARGET","GLOBAL","STATIC","stat","prototype","dontCallGetSet","forced","sham","exec","test","bind","hasOwnProperty","NATIVE_BIND","call","Function","apply","FunctionPrototype","getDescriptor","PROPER","CONFIGURABLE","uncurryThisWithBind","fn","aFunction","namespace","method","aCallable","isNullOrUndefined","V","P","func","check","Math","window","self","g","toObject","a","classof","propertyIsEnumerable","store","functionToString","inspectSource","has","NATIVE_WEAK_MAP","shared","sharedKey","hiddenKeys","OBJECT_ALREADY_INITIALIZED","WeakMap","enforce","getterFor","TYPE","state","type","metadata","facade","STATE","Array","documentAll","all","replacement","feature","detection","data","normalize","POLYFILL","NATIVE","string","replace","toLowerCase","getBuiltIn","isPrototypeOf","USE_SYMBOL_AS_UID","$Symbol","toLength","obj","CONFIGURABLE_FUNCTION_NAME","InternalStateModule","enforceInternalState","getInternalState","join","CONFIGURABLE_LENGTH","TEMPLATE","arity","constructor","ceil","floor","trunc","x","n","IE8_DOM_DEFINE","V8_PROTOTYPE_DEFINE_BUG","anObject","toPropertyKey","$defineProperty","$getOwnPropertyDescriptor","ENUMERABLE","WRITABLE","Attributes","current","propertyIsEnumerableModule","internalObjectKeys","enumBugKeys","concat","getOwnPropertyNames","getOwnPropertySymbols","push","names","$propertyIsEnumerable","NASHORN_BUG","input","pref","val","valueOf","getOwnPropertyNamesModule","getOwnPropertySymbolsModule","uid","IS_PURE","SHARED","mode","copyright","license","V8_VERSION","symbol","Symbol","toIntegerOrInfinity","max","min","integer","IndexedObject","requireObjectCoercible","number","len","isSymbol","getMethod","ordinaryToPrimitive","TO_PRIMITIVE","exoticToPrim","toPrimitive","id","postfix","random","NATIVE_SYMBOL","iterator","passed","required","WellKnownSymbolsStore","createWellKnownSymbol","withoutSetter","$","setArrayLength","doesNotExceedSafeInteger","INCORRECT_TO_LENGTH","properErrorOnNonWritableLength","proto","item","argCount","validateArgumentsLength","$URLSearchParams","URLSearchParams","URLSearchParamsPrototype","append","$delete","forEach","params","$value","entries","v","k","entry","dindex","found","entriesLength","getAll","$has","values","defineBuiltInAccessor","count","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","e","prop","r","toStringTag","thisArg","getPrototypeOf","kindOf","cache","thing","str","create","kindOfTest","typeOfTest","isUndefined","isBuffer","isFunction","isArrayBuffer","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isBoolean","isPlainObject","isDate","isFile","isBlob","isFileList","isStream","pipe","isFormData","kind","FormData","isURLSearchParams","isReadableStream","isRequest","isResponse","isHeaders","map","trim","allOwnKeys","l","findKey","_key","_global","isContextDefined","context","merge","caseless","assignValue","targetKey","extend","b","stripBOM","content","charCodeAt","inherits","superConstructor","props","descriptors","assign","toFlatObject","sourceObj","destObj","filter","propFilter","merged","endsWith","searchString","position","lastIndex","toArray","arr","isTypedArray","TypedArray","Uint8Array","forEachEntry","generator","next","done","pair","matchAll","regExp","matches","isHTMLForm","toCamelCase","m","p1","p2","toUpperCase","isRegExp","reduceDescriptors","reducer","getOwnPropertyDescriptors","reducedDescriptors","ret","defineProperties","freezeMethods","Error","toObjectSet","arrayOrString","delimiter","define","noop","toFiniteNumber","defaultValue","Number","isFinite","ALPHA","DIGIT","ALPHABET","ALPHA_DIGIT","generateString","size","alphabet","isSpecCompliantForm","toJSONObject","stack","visit","reducedValue","isAsyncFn","isThenable","then","catch","_setImmediate","setImmediateSupported","postMessageSupported","setImmediate","token","callbacks","addEventListener","shift","cb","postMessage","setTimeout","asap","queueMicrotask","nextTick","hasOwnProp","AxiosError","message","code","config","request","response","captureStackTrace","status","utils","toJSON","description","fileName","lineNumber","columnNumber","from","customProps","axiosError","cause","isVisitable","removeBrackets","renderKey","path","dots","isFlatArray","some","predicates","toFormData","formData","metaTokens","indexes","option","visitor","defaultVisitor","_Blob","Blob","useBlob","convertValue","toISOString","Buffer","JSON","stringify","exposedHelpers","build","pop","encode","charMap","encodeURIComponent","AxiosURLSearchParams","_pairs","encoder","_encode","buildURL","url","serializeFn","serialize","serializedParams","hashmarkIndex","InterceptorManager","handlers","use","fulfilled","rejected","synchronous","runWhen","eject","clear","h","silentJSONParsing","forcedJSONParsing","clarifyTimeoutError","isBrowser","classes","protocols","hasBrowserEnv","_navigator","hasStandardBrowserEnv","product","hasStandardBrowserWebWorkerEnv","WorkerGlobalScope","importScripts","origin","location","href","toURLEncodedForm","platform","helpers","isNode","parsePropPath","arrayToObject","formDataToJSON","buildPath","isNumericKey","isLast","stringifySafely","rawValue","parser","parse","defaults","transitional","adapter","transformRequest","headers","contentType","getContentType","hasJSONContentType","isObjectPayload","setContentType","formSerializer","_FormData","env","transformResponse","JSONRequested","responseType","strictJSONParsing","ERR_BAD_RESPONSE","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","common","ignoreDuplicateOf","rawHeaders","parsed","line","substring","$internals","normalizeHeader","header","normalizeValue","parseTokens","tokens","tokensRE","isValidHeaderName","matchHeaderValue","isHeaderNameFilter","formatHeader","w","char","buildAccessors","accessorName","methodName","arg1","arg2","arg3","AxiosHeaders","valueOrRewrite","rewrite","setHeader","_value","_header","_rewrite","lHeader","setHeaders","parseHeaders","matcher","deleted","deleteHeader","format","normalized","targets","asStrings","first","computed","accessor","internals","accessors","defineAccessor","mapped","headerValue","transformData","fns","isCancel","__CANCEL__","CanceledError","ERR_CANCELED","settle","resolve","reject","ERR_BAD_REQUEST","parseProtocol","speedometer","samplesCount","bytes","timestamps","firstSampleTS","head","tail","chunkLength","now","Date","startedAt","bytesCount","round","throttle","freq","lastArgs","timer","timestamp","threshold","invoke","args","clearTimeout","throttled","flush","progressEventReducer","listener","isDownloadStream","bytesNotified","_speedometer","loaded","total","lengthComputable","progressBytes","rate","inRange","progress","estimated","event","progressEventDecorator","asyncDecorator","msie","urlParsingNode","originURL","resolveURL","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","requestURL","write","expires","domain","secure","cookie","toGMTString","read","RegExp","decodeURIComponent","remove","isAbsoluteURL","combineURLs","baseURL","relativeURL","buildFullPath","requestedURL","headersToObject","mergeConfig","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","paramsSerializer","timeoutMessage","withCredentials","withXSRFToken","onUploadProgress","onDownloadProgress","decompress","beforeRedirect","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding","configValue","newConfig","auth","btoa","username","password","unescape","Boolean","isURLSameOrigin","xsrfValue","cookies","isXHRAdapterSupported","XMLHttpRequest","Promise","_config","resolveConfig","requestData","requestHeaders","onCanceled","uploadThrottled","downloadThrottled","flushUpload","flushDownload","unsubscribe","signal","removeEventListener","onloadend","responseHeaders","getAllResponseHeaders","responseData","responseText","statusText","err","open","onreadystatechange","readyState","responseURL","onabort","ECONNABORTED","onerror","ERR_NETWORK","ontimeout","timeoutErrorMessage","ETIMEDOUT","setRequestHeader","upload","cancel","abort","subscribe","aborted","send","composeSignals","signals","controller","AbortController","reason","streamChunk","chunk","chunkSize","byteLength","end","pos","readBytes","async","iterable","readStream","stream","asyncIterator","reader","getReader","trackStream","onProgress","onFinish","_onFinish","ReadableStream","pull","close","loadedBytes","enqueue","return","highWaterMark","isFetchSupported","fetch","Request","Response","isReadableStreamSupported","encodeText","TextEncoder","arrayBuffer","supportsRequestStream","duplexAccessed","hasContentType","body","duplex","DEFAULT_CHUNK_SIZE","supportsResponseStream","resolvers","res","_","ERR_NOT_SUPPORT","getBodyLength","_request","resolveBodyLength","getContentLength","fetchOptions","composedSignal","toAbortSignal","requestContentLength","contentTypeHeader","isCredentialsSupported","credentials","isStreamResponse","responseContentLength","knownAdapters","http","xhr","renderReason","isResolvedHandle","getAdapter","adapters","nameOrAdapter","rejectedReasons","reasons","s","throwIfCancellationRequested","throwIfRequested","dispatchRequest","VERSION","validators","deprecatedWarnings","assertOptions","schema","allowUnknown","ERR_BAD_OPTION_VALUE","opt","validator","ERR_BAD_OPTION","formatMessage","desc","opts","ERR_DEPRECATED","console","warn","Axios","instanceConfig","interceptors","configOrUrl","dummy","boolean","function","contextHeaders","requestInterceptorChain","synchronousRequestInterceptors","interceptor","unshift","responseInterceptorChain","promise","chain","onFulfilled","onRejected","getUri","fullPath","generateHTTPMethod","isForm","CancelToken","executor","resolvePromise","_listeners","onfulfilled","_resolve","splice","c","spread","callback","isAxiosError","payload","HttpStatusCode","Continue","SwitchingProtocols","Processing","EarlyHints","Ok","Created","Accepted","NonAuthoritativeInformation","NoContent","ResetContent","PartialContent","MultiStatus","AlreadyReported","ImUsed","MultipleChoices","MovedPermanently","Found","SeeOther","NotModified","UseProxy","Unused","TemporaryRedirect","PermanentRedirect","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","PayloadTooLarge","UriTooLong","UnsupportedMediaType","RangeNotSatisfiable","ExpectationFailed","ImATeapot","MisdirectedRequest","UnprocessableEntity","Locked","FailedDependency","TooEarly","UpgradeRequired","PreconditionRequired","TooManyRequests","RequestHeaderFieldsTooLarge","UnavailableForLegalReasons","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","VariantAlsoNegotiates","InsufficientStorage","LoopDetected","NotExtended","NetworkAuthenticationRequired","createInstance","defaultConfig","instance","axios","Cancel","promises","formToJSON","default","_typeof","t","_defineProperty","BASE_PATH","BaseAPI","configuration","basePath","globalAxios","RequiredError","field","msg","super","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setFlattenedQueryParams","urlSearchParams","parameter","currentKey","setSearchParams","objects","searchParams","toPathString","createRequestFunction","axiosArgs","axiosRequestArgs","ObservationsApiAxiosParamCreator","v11ObservationsEntityIdDatastreamGet","entityId","$select","$expand","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","v11ObservationsEntityIdDatastreamObservationsGet","$skip","$top","$count","$filter","v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet","v11ObservationsEntityIdDatastreamObservedPropertyGet","v11ObservationsEntityIdDatastreamSensorDatastreamsGet","v11ObservationsEntityIdDatastreamSensorGet","v11ObservationsEntityIdDatastreamThingDatastreamsGet","v11ObservationsEntityIdDatastreamThingGet","v11ObservationsEntityIdDatastreamThingLocationsGet","v11ObservationsEntityIdFeatureOfInterestGet","v11ObservationsEntityIdFeatureOfInterestObservationsGet","v11ObservationsEntityIdGet","v11ObservationsGet","ObservationsApiFp","localVarAxiosParamCreator","localVarAxiosArgs","ObservationsApi","Configuration","param","apiKey","accessToken","formDataCtor","isJsonMime","mime","jsonMime","baseUrl","getBaseUrl","points","obs","setPoints","apoints","evt","command","start","stop","getDataForPoints","log","proms","point","rej","obserservation_karl","promsSettled","allSettled","setInterval","conf","clearInterval"],"sourceRoot":""}