// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    EClass,
    EClassifierExt,
    EDataType,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage
} from "./internal.js"

export class EDataTypeImpl extends EClassifierExt implements EDataType {
    protected _isSerializable: boolean

    constructor() {
        super()
        this._isSerializable = true
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEDataType()
    }

    // get the value of isSerializable
    get isSerializable(): boolean {
        return this._isSerializable
    }

    // set the value of isSerializable
    set isSerializable(newIsSerializable: boolean) {
        let oldIsSerializable = this._isSerializable
        this._isSerializable = newIsSerializable
        if (this.eNotificationRequired) {
            this.eNotify(
                new Notification(
                    this,
                    EventType.SET,
                    EcoreConstants.EDATA_TYPE__SERIALIZABLE,
                    oldIsSerializable,
                    newIsSerializable
                )
            )
        }
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.EDATA_TYPE__SERIALIZABLE: {
                return this.isSerializable
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.EDATA_TYPE__SERIALIZABLE: {
                this.isSerializable = newValue as boolean
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.EDATA_TYPE__SERIALIZABLE: {
                this.isSerializable = true
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.EDATA_TYPE__SERIALIZABLE: {
                return this._isSerializable != true
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }
}
