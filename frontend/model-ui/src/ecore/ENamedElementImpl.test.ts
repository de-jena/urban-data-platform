// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { anything, capture, instance, mock, verify } from "ts-mockito"
import { describe, expect, test } from "vitest"
import { EAdapter, ENamedElementImpl, EcoreConstants, getEcorePackage } from "./internal.js"

describe("ENamedElementImpl", () => {
    test("eStaticClass", () => {
        let o = new ENamedElementImpl()
        expect(o.eStaticClass()).toBe(getEcorePackage().getENamedElement())
    })

    test("getName", () => {
        let o = new ENamedElementImpl()
        // get default value
        expect(o.name).toBe("")
    })

    test("setName", () => {
        let o = new ENamedElementImpl()
        let value = "Test String"

        // add listener
        let mockAdapter = mock<EAdapter>()
        let adapter = instance(mockAdapter)
        o.eAdapters.add(adapter)

        // set value
        o.name = value

        // checks
        verify(mockAdapter.notifyChanged(anything())).once()
        const [notification] = capture(mockAdapter.notifyChanged).last()
        expect(notification.notifier).toBe(o)
        expect(notification.oldValue).toBe("")
        expect(notification.newValue).toBe(value)
        expect(notification.position).toBe(-1)
    })

    test("eGetFromID", () => {
        let o = new ENamedElementImpl()
        expect(() => o.eGetFromID(-1, true)).toThrow(Error)
        expect(o.eGetFromID(EcoreConstants.ENAMED_ELEMENT__NAME, true)).toStrictEqual(o.name)
    })

    test("eSetFromID", () => {
        let o = new ENamedElementImpl()
        expect(() => o.eSetFromID(-1, null)).toThrow(Error)
        {
            let value = "Test String"
            o.eSetFromID(EcoreConstants.ENAMED_ELEMENT__NAME, value)
            expect(o.eGetFromID(EcoreConstants.ENAMED_ELEMENT__NAME, false)).toBe(value)
        }
    })

    test("eIsSetFromID", () => {
        let o = new ENamedElementImpl()
        expect(() => o.eIsSetFromID(-1)).toThrow(Error)
        expect(o.eIsSetFromID(EcoreConstants.ENAMED_ELEMENT__NAME)).toBeFalsy()
    })

    test("eUnsetFromID", () => {
        let o = new ENamedElementImpl()
        expect(() => o.eUnsetFromID(-1)).toThrow(Error)
        {
            o.eUnsetFromID(EcoreConstants.ENAMED_ELEMENT__NAME)
            let v = o.eGetFromID(EcoreConstants.ENAMED_ELEMENT__NAME, false)
            expect(v).toBe("")
        }
    })
})
