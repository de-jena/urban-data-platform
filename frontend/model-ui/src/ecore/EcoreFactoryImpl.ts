// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    EAnnotation,
    EAnnotationImpl,
    EAttribute,
    EAttributeExt,
    EClass,
    EClassExt,
    EDataType,
    EDataTypeExt,
    EEnum,
    EEnumExt,
    EEnumLiteral,
    EEnumLiteralExt,
    EFactory,
    EFactoryExt,
    EGenericType,
    EGenericTypeImpl,
    EModelElement,
    EObject,
    EObjectImpl,
    EOperation,
    EOperationExt,
    EPackage,
    EPackageExt,
    EParameter,
    EParameterImpl,
    EReference,
    EReferenceExt,
    EStringToStringMapEntry,
    EStringToStringMapEntryImpl,
    ETypeParameter,
    ETypeParameterImpl,
    EcoreConstants,
    EcoreFactory
} from "./internal.js"

export class EcoreFactoryImpl extends EFactoryExt implements EcoreFactory {
    private static _instance: EcoreFactoryImpl = null

    public static getInstance(): EcoreFactoryImpl {
        if (!this._instance) {
            this._instance = new EcoreFactoryImpl()
        }
        return this._instance
    }

    protected constructor() {
        super()
    }

    create(eClass: EClass): EObject {
        switch (eClass.classifierID) {
            case EcoreConstants.EATTRIBUTE:
                return this.createEAttribute()
            case EcoreConstants.EANNOTATION:
                return this.createEAnnotation()
            case EcoreConstants.ECLASS:
                return this.createEClass()
            case EcoreConstants.EDATA_TYPE:
                return this.createEDataType()
            case EcoreConstants.EENUM:
                return this.createEEnum()
            case EcoreConstants.EENUM_LITERAL:
                return this.createEEnumLiteral()
            case EcoreConstants.EFACTORY:
                return this.createEFactory()
            case EcoreConstants.EOBJECT:
                return this.createEObject()
            case EcoreConstants.EOPERATION:
                return this.createEOperation()
            case EcoreConstants.EPACKAGE:
                return this.createEPackage()
            case EcoreConstants.EPARAMETER:
                return this.createEParameter()
            case EcoreConstants.EREFERENCE:
                return this.createEReference()
            case EcoreConstants.ESTRING_TO_STRING_MAP_ENTRY:
                return this.createEStringToStringMapEntry()
            case EcoreConstants.EGENERIC_TYPE:
                return this.createEGenericType()
            case EcoreConstants.ETYPE_PARAMETER:
                return this.createETypeParameter()
            default:
                throw new Error("create: " + eClass.classifierID + " not found")
        }
    }

    createEAttribute(): EAttribute {
        return new EAttributeExt()
    }

    createEAttributeFromContainer(eContainer: EClass): EAttribute {
        let element = new EAttributeExt()
        if (eContainer != null) {
            eContainer.eStructuralFeatures.add(element)
        }
        return element
    }

    createEAttributeFromContainerAndClassID(eContainer: EClass, classID: number): EAttribute {
        let element = new EAttributeExt()
        element.featureID = classID
        if (eContainer != null) {
            eContainer.eStructuralFeatures.add(element)
        }
        return element
    }

    createEAnnotation(): EAnnotation {
        return new EAnnotationImpl()
    }

    createEAnnotationFromContainer(eContainer: EModelElement): EAnnotation {
        let element = new EAnnotationImpl()
        if (eContainer != null) {
            eContainer.eAnnotations.add(element)
        }
        return element
    }

    createEClass(): EClass {
        return new EClassExt()
    }

    createEClassFromContainer(eContainer: EPackage): EClass {
        let element = new EClassExt()
        if (eContainer != null) {
            eContainer.eClassifiers.add(element)
        }
        return element
    }

    createEClassFromContainerAndClassID(eContainer: EPackage, classID: number): EClass {
        let element = new EClassExt()
        element.classifierID = classID
        if (eContainer != null) {
            eContainer.eClassifiers.add(element)
        }
        return element
    }

    createEDataType(): EDataType {
        return new EDataTypeExt()
    }

    createEDataTypeFromContainer(eContainer: EPackage): EDataType {
        let element = new EDataTypeExt()
        if (eContainer != null) {
            eContainer.eClassifiers.add(element)
        }
        return element
    }

    createEDataTypeFromContainerAndClassID(eContainer: EPackage, classID: number): EDataType {
        let element = new EDataTypeExt()
        element.classifierID = classID
        if (eContainer != null) {
            eContainer.eClassifiers.add(element)
        }
        return element
    }

    createEEnum(): EEnum {
        return new EEnumExt()
    }

    createEEnumFromContainer(eContainer: EPackage): EEnum {
        let element = new EEnumExt()
        if (eContainer != null) {
            eContainer.eClassifiers.add(element)
        }
        return element
    }

    createEEnumFromContainerAndClassID(eContainer: EPackage, classID: number): EEnum {
        let element = new EEnumExt()
        element.classifierID = classID
        if (eContainer != null) {
            eContainer.eClassifiers.add(element)
        }
        return element
    }

    createEEnumLiteral(): EEnumLiteral {
        return new EEnumLiteralExt()
    }

    createEEnumLiteralFromContainer(eContainer: EEnum): EEnumLiteral {
        let element = new EEnumLiteralExt()
        if (eContainer != null) {
            eContainer.eLiterals.add(element)
        }
        return element
    }

    createEFactory(): EFactory {
        return new EFactoryExt()
    }

    createEFactoryFromContainer(eContainer: EPackage): EFactory {
        let element = new EFactoryExt()
        if (eContainer != null) {
            eContainer.eFactoryInstance = element
        }
        return element
    }

    createEObject(): EObject {
        return new EObjectImpl()
    }

    createEOperation(): EOperation {
        return new EOperationExt()
    }

    createEOperationFromContainer(eContainer: EClass): EOperation {
        let element = new EOperationExt()
        if (eContainer != null) {
            eContainer.eOperations.add(element)
        }
        return element
    }

    createEOperationFromContainerAndClassID(eContainer: EClass, classID: number): EOperation {
        let element = new EOperationExt()
        element.operationID = classID
        if (eContainer != null) {
            eContainer.eOperations.add(element)
        }
        return element
    }

    createEPackage(): EPackage {
        return new EPackageExt()
    }

    createEPackageFromContainer(eContainer: EPackage): EPackage {
        let element = new EPackageExt()
        if (eContainer != null) {
            eContainer.eSubPackages.add(element)
        }
        return element
    }

    createEParameter(): EParameter {
        return new EParameterImpl()
    }

    createEParameterFromContainer(eContainer: EOperation): EParameter {
        let element = new EParameterImpl()
        if (eContainer != null) {
            eContainer.eParameters.add(element)
        }
        return element
    }

    createEReference(): EReference {
        return new EReferenceExt()
    }

    createEReferenceFromContainer(eContainer: EClass): EReference {
        let element = new EReferenceExt()
        if (eContainer != null) {
            eContainer.eStructuralFeatures.add(element)
        }
        return element
    }

    createEReferenceFromContainerAndClassID(eContainer: EClass, classID: number): EReference {
        let element = new EReferenceExt()
        element.featureID = classID
        if (eContainer != null) {
            eContainer.eStructuralFeatures.add(element)
        }
        return element
    }

    createEStringToStringMapEntry(): EStringToStringMapEntry {
        return new EStringToStringMapEntryImpl()
    }

    createEGenericType(): EGenericType {
        return new EGenericTypeImpl()
    }

    createETypeParameter(): ETypeParameter {
        return new ETypeParameterImpl()
    }

    createFromString(eDataType: EDataType, literalValue: string): any {
        switch (eDataType.classifierID) {
            case EcoreConstants.EBIG_DECIMAL:
                return this.createEBigDecimalFromString(eDataType, literalValue)
            case EcoreConstants.EBIG_INTEGER:
                return this.createEBigIntegerFromString(eDataType, literalValue)
            case EcoreConstants.EBOOLEAN:
                return this.createEBooleanFromString(eDataType, literalValue)
            case EcoreConstants.EBOOLEAN_OBJECT:
                return this.createEBooleanObjectFromString(eDataType, literalValue)
            case EcoreConstants.EBYTE:
                return this.createEByteFromString(eDataType, literalValue)
            case EcoreConstants.EBYTE_ARRAY:
                return this.createEByteArrayFromString(eDataType, literalValue)
            case EcoreConstants.EBYTE_OBJECT:
                return this.createEByteObjectFromString(eDataType, literalValue)
            case EcoreConstants.ECHAR:
                return this.createECharFromString(eDataType, literalValue)
            case EcoreConstants.ECHARACTER_OBJECT:
                return this.createECharacterObjectFromString(eDataType, literalValue)
            case EcoreConstants.EDATE:
                return this.createEDateFromString(eDataType, literalValue)
            case EcoreConstants.EDOUBLE:
                return this.createEDoubleFromString(eDataType, literalValue)
            case EcoreConstants.EDOUBLE_OBJECT:
                return this.createEDoubleObjectFromString(eDataType, literalValue)
            case EcoreConstants.EFLOAT:
                return this.createEFloatFromString(eDataType, literalValue)
            case EcoreConstants.EFLOAT_OBJECT:
                return this.createEFloatObjectFromString(eDataType, literalValue)
            case EcoreConstants.EINT:
                return this.createEIntFromString(eDataType, literalValue)
            case EcoreConstants.EINTEGER_OBJECT:
                return this.createEIntegerObjectFromString(eDataType, literalValue)
            case EcoreConstants.EJAVA_CLASS:
                return this.createEJavaClassFromString(eDataType, literalValue)
            case EcoreConstants.EJAVA_OBJECT:
                return this.createEJavaObjectFromString(eDataType, literalValue)
            case EcoreConstants.ELONG:
                return this.createELongFromString(eDataType, literalValue)
            case EcoreConstants.ELONG_OBJECT:
                return this.createELongObjectFromString(eDataType, literalValue)
            case EcoreConstants.ESHORT:
                return this.createEShortFromString(eDataType, literalValue)
            case EcoreConstants.ESHORT_OBJECT:
                return this.createEShortObjectFromString(eDataType, literalValue)
            case EcoreConstants.ESTRING:
                return this.createEStringFromString(eDataType, literalValue)
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier")
        }
    }

    convertToString(eDataType: EDataType, instanceValue: any): string {
        switch (eDataType.classifierID) {
            case EcoreConstants.EBIG_DECIMAL:
                return this.convertEBigDecimalToString(eDataType, instanceValue)
            case EcoreConstants.EBIG_INTEGER:
                return this.convertEBigIntegerToString(eDataType, instanceValue)
            case EcoreConstants.EBOOLEAN:
                return this.convertEBooleanToString(eDataType, instanceValue)
            case EcoreConstants.EBOOLEAN_OBJECT:
                return this.convertEBooleanObjectToString(eDataType, instanceValue)
            case EcoreConstants.EBYTE:
                return this.convertEByteToString(eDataType, instanceValue)
            case EcoreConstants.EBYTE_ARRAY:
                return this.convertEByteArrayToString(eDataType, instanceValue)
            case EcoreConstants.EBYTE_OBJECT:
                return this.convertEByteObjectToString(eDataType, instanceValue)
            case EcoreConstants.ECHAR:
                return this.convertECharToString(eDataType, instanceValue)
            case EcoreConstants.ECHARACTER_OBJECT:
                return this.convertECharacterObjectToString(eDataType, instanceValue)
            case EcoreConstants.EDATE:
                return this.convertEDateToString(eDataType, instanceValue)
            case EcoreConstants.EDOUBLE:
                return this.convertEDoubleToString(eDataType, instanceValue)
            case EcoreConstants.EDOUBLE_OBJECT:
                return this.convertEDoubleObjectToString(eDataType, instanceValue)
            case EcoreConstants.EFLOAT:
                return this.convertEFloatToString(eDataType, instanceValue)
            case EcoreConstants.EFLOAT_OBJECT:
                return this.convertEFloatObjectToString(eDataType, instanceValue)
            case EcoreConstants.EINT:
                return this.convertEIntToString(eDataType, instanceValue)
            case EcoreConstants.EINTEGER_OBJECT:
                return this.convertEIntegerObjectToString(eDataType, instanceValue)
            case EcoreConstants.EJAVA_CLASS:
                return this.convertEJavaClassToString(eDataType, instanceValue)
            case EcoreConstants.EJAVA_OBJECT:
                return this.convertEJavaObjectToString(eDataType, instanceValue)
            case EcoreConstants.ELONG:
                return this.convertELongToString(eDataType, instanceValue)
            case EcoreConstants.ELONG_OBJECT:
                return this.convertELongObjectToString(eDataType, instanceValue)
            case EcoreConstants.ESHORT:
                return this.convertEShortToString(eDataType, instanceValue)
            case EcoreConstants.ESHORT_OBJECT:
                return this.convertEShortObjectToString(eDataType, instanceValue)
            case EcoreConstants.ESTRING:
                return this.convertEStringToString(eDataType, instanceValue)
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier")
        }
    }

    createEBigDecimalFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEBigDecimalToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEBigIntegerFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEBigIntegerToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEBooleanFromString(eDataType: EDataType, literalValue: string): any {
        return literalValue.toLowerCase() === "true"
    }

    convertEBooleanToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEBooleanObjectFromString(eDataType: EDataType, literalValue: string): any {
        return literalValue.toLowerCase() === "true"
    }

    convertEBooleanObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEByteFromString(eDataType: EDataType, literalValue: string): any {
        if (literalValue.length == 0) {
            return 0
        } else {
            return literalValue.charCodeAt(0)
        }
    }

    convertEByteToString(eDataType: EDataType, instanceValue: any): string {
        return String.fromCharCode(instanceValue as number)
    }

    createEByteArrayFromString(eDataType: EDataType, literalValue: string): any {
        return new TextEncoder().encode(literalValue)
    }

    convertEByteArrayToString(eDataType: EDataType, instanceValue: any): string {
        return new TextDecoder().decode(instanceValue as Uint8Array)
    }

    createEByteObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEByteObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createECharFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertECharToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createECharacterObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertECharacterObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEDateFromString(eDataType: EDataType, literalValue: string): any {
        return new Date(literalValue)
    }

    convertEDateToString(eDataType: EDataType, instanceValue: any): string {
        return (instanceValue as Date).toISOString()
    }

    createEDoubleFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEDoubleToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEDoubleObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEDoubleObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEFloatFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEFloatToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEFloatObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEFloatObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEIntFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEIntToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEIntegerObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEIntegerObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEJavaClassFromString(eDataType: EDataType, literalValue: string): any {
        throw new Error("NotImplementedException")
    }

    convertEJavaClassToString(eDataType: EDataType, instanceValue: any): string {
        throw new Error("NotImplementedException")
    }

    createEJavaObjectFromString(eDataType: EDataType, literalValue: string): any {
        throw new Error("NotImplementedException")
    }

    convertEJavaObjectToString(eDataType: EDataType, instanceValue: any): string {
        throw new Error("NotImplementedException")
    }

    createELongFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertELongToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createELongObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertELongObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEShortFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEShortToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEShortObjectFromString(eDataType: EDataType, literalValue: string): any {
        return Number(literalValue)
    }

    convertEShortObjectToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue.toString()
    }

    createEStringFromString(eDataType: EDataType, literalValue: string): any {
        return literalValue
    }

    convertEStringToString(eDataType: EDataType, instanceValue: any): string {
        return instanceValue as string
    }
}
