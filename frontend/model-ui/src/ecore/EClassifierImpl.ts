// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    EClass,
    EClassifier,
    EList,
    ENamedElementImpl,
    ENotificationChain,
    EObject,
    EPackage,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage
} from "./internal.js"

export class EClassifierImpl extends ENamedElementImpl implements EClassifier {
    protected _classifierID: number
    protected _instanceClassName: string
    protected _instanceClass: any

    constructor() {
        super()
        this._classifierID = -1
        this._instanceClass = null
        this._instanceClassName = ""
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEClassifierClass()
    }

    // get the value of classifierID
    get classifierID(): number {
        if (this._classifierID == -1) {
            this._classifierID = this.initClassifierID()
        }
        return this._classifierID
    }

    // set the value of classifierID
    set classifierID(newClassifierID: number) {
        let oldClassifierID = this._classifierID
        this._classifierID = newClassifierID
        if (this.eNotificationRequired) {
            this.eNotify(
                new Notification(
                    this,
                    EventType.SET,
                    EcoreConstants.ECLASSIFIER__CLASSIFIER_ID,
                    oldClassifierID,
                    newClassifierID
                )
            )
        }
    }

    // get the value of defaultValue
    get defaultValue(): any {
        throw new Error("get defaultValue not implemented")
    }

    // get the value of ePackage
    get ePackage(): EPackage {
        if (this.eContainerFeatureID() == EcoreConstants.ECLASSIFIER__EPACKAGE) {
            return this.eContainer() as EPackage
        }
        return null
    }

    // get the value of instanceClass
    get instanceClass(): any {
        return this._instanceClass
    }

    // set the value of instanceClass
    set instanceClass(newInstanceClass: any) {
        let oldInstanceClass = this._instanceClass
        this._instanceClass = newInstanceClass
        if (this.eNotificationRequired) {
            this.eNotify(
                new Notification(
                    this,
                    EventType.SET,
                    EcoreConstants.ECLASSIFIER__INSTANCE_CLASS,
                    oldInstanceClass,
                    newInstanceClass
                )
            )
        }
    }

    // get the value of instanceClassName
    get instanceClassName(): string {
        return this._instanceClassName
    }

    // set the value of instanceClassName
    set instanceClassName(newInstanceClassName: string) {
        let oldInstanceClassName = this._instanceClassName
        this._instanceClassName = newInstanceClassName
        if (this.eNotificationRequired) {
            this.eNotify(
                new Notification(
                    this,
                    EventType.SET,
                    EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME,
                    oldInstanceClassName,
                    newInstanceClassName
                )
            )
        }
    }

    // get the value of instanceTypeName
    get instanceTypeName(): string {
        throw new Error("get instanceTypeName not implemented")
    }

    // set the value of instanceTypeName
    set instanceTypeName(newInstanceTypeName: string) {
        throw new Error("set instanceTypeName not implemented")
    }

    // isInstance default implementation
    isInstance(object: any): boolean {
        throw new Error("isInstance not implemented")
    }

    protected initClassifierID(): number {
        return -1
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
                return this.classifierID
            }
            case EcoreConstants.ECLASSIFIER__DEFAULT_VALUE: {
                return this.defaultValue
            }
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                return this.ePackage
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
                return this.instanceClass
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
                return this.instanceClassName
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
                return this.instanceTypeName
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
                this.classifierID = newValue as number
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
                this.instanceClass = newValue as any
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
                this.instanceClassName = newValue as string
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
                this.instanceTypeName = newValue as string
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
                this.classifierID = -1
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
                this.instanceClass = null
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
                this.instanceClassName = ""
                break
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
                this.instanceTypeName = ""
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__CLASSIFIER_ID: {
                return this._classifierID != -1
            }
            case EcoreConstants.ECLASSIFIER__DEFAULT_VALUE: {
                return this.defaultValue != null
            }
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                return this.ePackage != null
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS: {
                return this._instanceClass != null
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_CLASS_NAME: {
                return this._instanceClassName != ""
            }
            case EcoreConstants.ECLASSIFIER__INSTANCE_TYPE_NAME: {
                return this.instanceTypeName != ""
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eInvokeFromID(operationID: number, args: EList<any>): any {
        switch (operationID) {
            case EcoreConstants.ECLASSIFIER__IS_INSTANCE_EJAVAOBJECT: {
                return this.isInstance(args.get(0))
            }
            default: {
                return super.eInvokeFromID(operationID, args)
            }
        }
    }

    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.eBasicSetContainer(otherEnd, EcoreConstants.ECLASSIFIER__EPACKAGE, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASSIFIER__EPACKAGE: {
                return this.eBasicSetContainer(null, EcoreConstants.ECLASSIFIER__EPACKAGE, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
