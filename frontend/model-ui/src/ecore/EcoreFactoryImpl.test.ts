// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import { anything, instance, mock, when } from "ts-mockito"
import { describe, expect, test } from "vitest"
import {
    EAnnotation,
    EClass,
    EClassifier,
    EDataType,
    EEnum,
    EEnumLiteral,
    EList,
    EModelElement,
    EOperation,
    EPackage,
    EParameter,
    EStructuralFeature,
    EcoreConstants,
    EcoreFactoryImpl
} from "./internal.js"

describe("EcoreFactoryImpl", () => {
    test("createFromEClass", () => {
        let factory = EcoreFactoryImpl.getInstance()
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(-1)
            expect(() => factory.create(eClass)).toThrow(Error)
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EANNOTATION)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EATTRIBUTE)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.ECLASS)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EDATA_TYPE)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EENUM)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EENUM_LITERAL)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EFACTORY)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EGENERIC_TYPE)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EOBJECT)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EOPERATION)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EPACKAGE)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EPARAMETER)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.EREFERENCE)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.ESTRING_TO_STRING_MAP_ENTRY)
            expect(factory.create(eClass)).not.toBeNull()
        }
        {
            let mockEClass = mock<EClass>()
            let eClass = instance(mockEClass)
            when(mockEClass.classifierID).thenReturn(EcoreConstants.ETYPE_PARAMETER)
            expect(factory.create(eClass)).not.toBeNull()
        }
    })

    test("createEAnnotation", () => {
        expect(EcoreFactoryImpl.getInstance().createEAnnotation()).not.toBeNull()
    })

    test("createEAnnotationFromContainer", () => {
        let mockContainer = mock<EModelElement>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EAnnotation>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eAnnotations).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEAnnotationFromContainer(container)).not.toBeNull()
    })

    test("createEAttribute", () => {
        expect(EcoreFactoryImpl.getInstance().createEAttribute()).not.toBeNull()
    })

    test("createEAttributeFromContainer", () => {
        let mockContainer = mock<EClass>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EStructuralFeature>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eStructuralFeatures).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEAttributeFromContainer(container)).not.toBeNull()
    })

    test("createEAttributeFromContainerAndClassID", () => {
        let mockContainer = mock<EClass>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EStructuralFeature>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eStructuralFeatures).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEAttributeFromContainerAndClassID(container, 0)).not.toBeNull()
    })
    test("createEClass", () => {
        expect(EcoreFactoryImpl.getInstance().createEClass()).not.toBeNull()
    })

    test("createEClassFromContainer", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EClassifier>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eClassifiers).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEClassFromContainer(container)).not.toBeNull()
    })

    test("createEClassFromContainerAndClassID", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EClassifier>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eClassifiers).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEClassFromContainerAndClassID(container, 0)).not.toBeNull()
    })
    test("createEDataType", () => {
        expect(EcoreFactoryImpl.getInstance().createEDataType()).not.toBeNull()
    })

    test("createEDataTypeFromContainer", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EClassifier>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eClassifiers).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEDataTypeFromContainer(container)).not.toBeNull()
    })

    test("createEDataTypeFromContainerAndClassID", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EClassifier>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eClassifiers).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEDataTypeFromContainerAndClassID(container, 0)).not.toBeNull()
    })
    test("createEEnum", () => {
        expect(EcoreFactoryImpl.getInstance().createEEnum()).not.toBeNull()
    })

    test("createEEnumFromContainer", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EClassifier>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eClassifiers).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEEnumFromContainer(container)).not.toBeNull()
    })

    test("createEEnumFromContainerAndClassID", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EClassifier>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eClassifiers).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEEnumFromContainerAndClassID(container, 0)).not.toBeNull()
    })
    test("createEEnumLiteral", () => {
        expect(EcoreFactoryImpl.getInstance().createEEnumLiteral()).not.toBeNull()
    })

    test("createEEnumLiteralFromContainer", () => {
        let mockContainer = mock<EEnum>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EEnumLiteral>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eLiterals).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEEnumLiteralFromContainer(container)).not.toBeNull()
    })

    test("createEFactory", () => {
        expect(EcoreFactoryImpl.getInstance().createEFactory()).not.toBeNull()
    })

    test("createEFactoryFromContainer", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        expect(EcoreFactoryImpl.getInstance().createEFactoryFromContainer(container)).not.toBeNull()
    })

    test("createEGenericType", () => {
        expect(EcoreFactoryImpl.getInstance().createEGenericType()).not.toBeNull()
    })

    test("createEObject", () => {
        expect(EcoreFactoryImpl.getInstance().createEObject()).not.toBeNull()
    })

    test("createEOperation", () => {
        expect(EcoreFactoryImpl.getInstance().createEOperation()).not.toBeNull()
    })

    test("createEOperationFromContainer", () => {
        let mockContainer = mock<EClass>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EOperation>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eOperations).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEOperationFromContainer(container)).not.toBeNull()
    })

    test("createEOperationFromContainerAndClassID", () => {
        let mockContainer = mock<EClass>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EOperation>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eOperations).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEOperationFromContainerAndClassID(container, 0)).not.toBeNull()
    })
    test("createEPackage", () => {
        expect(EcoreFactoryImpl.getInstance().createEPackage()).not.toBeNull()
    })

    test("createEPackageFromContainer", () => {
        let mockContainer = mock<EPackage>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EPackage>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eSubPackages).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEPackageFromContainer(container)).not.toBeNull()
    })

    test("createEParameter", () => {
        expect(EcoreFactoryImpl.getInstance().createEParameter()).not.toBeNull()
    })

    test("createEParameterFromContainer", () => {
        let mockContainer = mock<EOperation>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EParameter>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eParameters).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEParameterFromContainer(container)).not.toBeNull()
    })

    test("createEReference", () => {
        expect(EcoreFactoryImpl.getInstance().createEReference()).not.toBeNull()
    })

    test("createEReferenceFromContainer", () => {
        let mockContainer = mock<EClass>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EStructuralFeature>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eStructuralFeatures).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEReferenceFromContainer(container)).not.toBeNull()
    })

    test("createEReferenceFromContainerAndClassID", () => {
        let mockContainer = mock<EClass>()
        let container = instance(mockContainer)
        let mockList = mock<EList<EStructuralFeature>>()
        let list = instance(mockList)
        when(mockList.add(anything())).thenReturn(true)
        when(mockContainer.eStructuralFeatures).thenReturn(list)
        expect(EcoreFactoryImpl.getInstance().createEReferenceFromContainerAndClassID(container, 0)).not.toBeNull()
    })
    test("createEStringToStringMapEntry", () => {
        expect(EcoreFactoryImpl.getInstance().createEStringToStringMapEntry()).not.toBeNull()
    })

    test("createETypeParameter", () => {
        expect(EcoreFactoryImpl.getInstance().createETypeParameter()).not.toBeNull()
    })

    test("createFromStringInvalid", () => {
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(-1)
        expect(() => EcoreFactoryImpl.getInstance().createFromString(eDataType, "")).toThrow(Error)
    })
    test("convertToStringInvalid", () => {
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(-1)
        expect(() => EcoreFactoryImpl.getInstance().convertToString(eDataType, null)).toThrow(Error)
    })
    test("createEBigDecimalFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBIG_DECIMAL)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEBigDecimalToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBIG_DECIMAL)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEBigIntegerFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBIG_INTEGER)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEBigIntegerToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBIG_INTEGER)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEBooleanFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBOOLEAN)
        expect(factory.createFromString(eDataType, "true")).toBeTruthy()
        expect(factory.createFromString(eDataType, "false")).toBeFalsy()
    })
    test("convertEBooleanToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBOOLEAN)
        expect(factory.convertToString(eDataType, true)).toStrictEqual("true")
        expect(factory.convertToString(eDataType, false)).toStrictEqual("false")
    })
    test("createEBooleanObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBOOLEAN_OBJECT)
        expect(factory.createFromString(eDataType, "true")).toBeTruthy()
        expect(factory.createFromString(eDataType, "false")).toBeFalsy()
    })
    test("convertEBooleanObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBOOLEAN_OBJECT)
        expect(factory.convertToString(eDataType, true)).toStrictEqual("true")
        expect(factory.convertToString(eDataType, false)).toStrictEqual("false")
    })
    test("createEByteFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBYTE)
        expect(factory.createFromString(eDataType, "")).toStrictEqual(0)
        expect(factory.createFromString(eDataType, "a")).toStrictEqual(97)
    })
    test("convertEByteToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBYTE)
        expect(factory.convertToString(eDataType, 97)).toStrictEqual("a")
    })
    test("createEByteArrayFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBYTE_ARRAY)
        expect(factory.createFromString(eDataType, "ab")).toStrictEqual(Uint8Array.from([97, 98]))
    })
    test("convertEByteArrayToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBYTE_ARRAY)
        expect(factory.convertToString(eDataType, Uint8Array.from([97, 98]))).toStrictEqual("ab")
    })
    test("createEByteObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBYTE_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEByteObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EBYTE_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createECharFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ECHAR)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertECharToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ECHAR)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createECharacterObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ECHARACTER_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertECharacterObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ECHARACTER_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEDateFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EDATE)
        expect(factory.createFromString(eDataType, "2020-05-12T17:33:10.770Z")).toEqual(
            new Date(Date.UTC(2020, 4, 12, 17, 33, 10, 770))
        )
    })
    test("convertEDateToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EDATE)
        expect(factory.convertToString(eDataType, new Date(Date.UTC(2020, 4, 12, 17, 33, 10, 770)))).toStrictEqual(
            "2020-05-12T17:33:10.770Z"
        )
    })
    test("createEDoubleFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EDOUBLE)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEDoubleToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EDOUBLE)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEDoubleObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EDOUBLE_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEDoubleObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EDOUBLE_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEFloatFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EFLOAT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEFloatToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EFLOAT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEFloatObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EFLOAT_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEFloatObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EFLOAT_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEIntFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EINT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEIntToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EINT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEIntegerObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EINTEGER_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEIntegerObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EINTEGER_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEJavaClassFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EJAVA_CLASS)
        expect(() => factory.createFromString(eDataType, "")).toThrow(Error)
    })
    test("convertEJavaClassToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EJAVA_CLASS)
        expect(() => factory.convertToString(eDataType, "")).toThrow(Error)
    })
    test("createEJavaObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EJAVA_OBJECT)
        expect(() => factory.createFromString(eDataType, "")).toThrow(Error)
    })
    test("convertEJavaObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.EJAVA_OBJECT)
        expect(() => factory.convertToString(eDataType, "")).toThrow(Error)
    })
    test("createELongFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ELONG)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertELongToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ELONG)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createELongObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ELONG_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertELongObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ELONG_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEShortFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ESHORT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEShortToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ESHORT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEShortObjectFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ESHORT_OBJECT)
        expect(factory.createFromString(eDataType, "3")).toStrictEqual(3)
    })
    test("convertEShortObjectToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ESHORT_OBJECT)
        expect(factory.convertToString(eDataType, 3)).toStrictEqual("3")
    })
    test("createEStringFromString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ESTRING)
        expect(factory.createFromString(eDataType, "test")).toStrictEqual("test")
    })
    test("convertEStringToString", () => {
        let factory = EcoreFactoryImpl.getInstance()
        let mockDataType = mock<EDataType>()
        let eDataType = instance(mockDataType)
        when(mockDataType.classifierID).thenReturn(EcoreConstants.ESTRING)
        expect(factory.convertToString(eDataType, "test")).toStrictEqual("test")
    })
})
