// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    EClass,
    ENotificationChain,
    EObject,
    EOperation,
    EParameter,
    ETypedElementExt,
    EcoreConstants,
    getEcorePackage
} from "./internal.js"

export class EParameterImpl extends ETypedElementExt implements EParameter {
    constructor() {
        super()
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEParameter()
    }

    // get the value of eOperation
    get eOperation(): EOperation {
        if (this.eContainerFeatureID() == EcoreConstants.EPARAMETER__EOPERATION) {
            return this.eContainer() as EOperation
        }
        return null
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.EPARAMETER__EOPERATION: {
                return this.eOperation
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.EPARAMETER__EOPERATION: {
                return this.eOperation != null
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EPARAMETER__EOPERATION: {
                let msgs = notifications
                if (this.eContainer() != null) {
                    msgs = this.eBasicRemoveFromContainer(msgs)
                }
                return this.eBasicSetContainer(otherEnd, EcoreConstants.EPARAMETER__EOPERATION, msgs)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.EPARAMETER__EOPERATION: {
                return this.eBasicSetContainer(null, EcoreConstants.EPARAMETER__EOPERATION, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
