// Code generated by soft.generator.ts. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2024 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

import {
    BasicEObjectList,
    EAttribute,
    EClass,
    EClassifier,
    EClassifierExt,
    EList,
    ENotificationChain,
    ENotifyingList,
    EObject,
    EOperation,
    EReference,
    EStructuralFeature,
    EcoreConstants,
    EventType,
    Notification,
    getEcorePackage,
    isEObjectList
} from "./internal.js"

export class EClassImpl extends EClassifierExt implements EClass {
    protected _eReferences: EList<EReference>
    protected _eAllOperations: EList<EOperation>
    protected _eOperations: EList<EOperation>
    protected _eContainmentFeatures: EList<EStructuralFeature>
    protected _eCrossReferenceFeatures: EList<EStructuralFeature>
    protected _eAllStructuralFeatures: EList<EStructuralFeature>
    protected _eAttributes: EList<EAttribute>
    protected _eAllReferences: EList<EReference>
    protected _isAbstract: boolean
    protected _eIDAttribute: EAttribute
    protected _eAllSuperTypes: EList<EClass>
    protected _eStructuralFeatures: EList<EStructuralFeature>
    protected _isInterface: boolean
    protected _eAllAttributes: EList<EAttribute>
    protected _eAllContainments: EList<EReference>
    protected _eAllCrossReferences: EList<EReference>
    protected _eSuperTypes: EList<EClass>

    constructor() {
        super()
        this._eAllAttributes = null
        this._eAllContainments = null
        this._eAllCrossReferences = null
        this._eAllOperations = null
        this._eAllReferences = null
        this._eAllStructuralFeatures = null
        this._eAllSuperTypes = null
        this._eAttributes = null
        this._eContainmentFeatures = null
        this._eCrossReferenceFeatures = null
        this._eIDAttribute = null
        this._eOperations = null
        this._eReferences = null
        this._eStructuralFeatures = null
        this._eSuperTypes = null
        this._isAbstract = false
        this._isInterface = false
    }

    eStaticClass(): EClass {
        return getEcorePackage().getEClass()
    }

    // get the value of eAllAttributes
    get eAllAttributes(): EList<EAttribute> {
        this.initEAllAttributes()
        return this._eAllAttributes
    }

    // get the value of eAllContainments
    get eAllContainments(): EList<EReference> {
        this.initEAllContainments()
        return this._eAllContainments
    }

    // get the value of eAllCrossReferences
    get eAllCrossReferences(): EList<EReference> {
        this.initEAllCrossReferences()
        return this._eAllCrossReferences
    }

    // get the value of eAllOperations
    get eAllOperations(): EList<EOperation> {
        this.initEAllOperations()
        return this._eAllOperations
    }

    // get the value of eAllReferences
    get eAllReferences(): EList<EReference> {
        this.initEAllReferences()
        return this._eAllReferences
    }

    // get the value of eAllStructuralFeatures
    get eAllStructuralFeatures(): EList<EStructuralFeature> {
        this.initEAllStructuralFeatures()
        return this._eAllStructuralFeatures
    }

    // get the value of eAllSuperTypes
    get eAllSuperTypes(): EList<EClass> {
        this.initEAllSuperTypes()
        return this._eAllSuperTypes
    }

    // get the value of eAttributes
    get eAttributes(): EList<EAttribute> {
        this.initEAttributes()
        return this._eAttributes
    }

    // get the value of eContainmentFeatures
    get eContainmentFeatures(): EList<EStructuralFeature> {
        this.initEContainmentFeatures()
        return this._eContainmentFeatures
    }

    // get the value of eCrossReferenceFeatures
    get eCrossReferenceFeatures(): EList<EStructuralFeature> {
        this.initECrossReferenceFeatures()
        return this._eCrossReferenceFeatures
    }

    // get the value of eIDAttribute
    get eIDAttribute(): EAttribute {
        this.initEIDAttribute()
        return this._eIDAttribute
    }

    /** @internal */
    set eIDAttribute(newEIDAttribute: EAttribute) {
        this._eIDAttribute = newEIDAttribute
    }

    // get the value of eOperations
    get eOperations(): EList<EOperation> {
        if (this._eOperations == null) {
            this._eOperations = this.initEOperations()
        }
        return this._eOperations
    }

    // get the value of eReferences
    get eReferences(): EList<EReference> {
        this.initEReferences()
        return this._eReferences
    }

    // get the value of eStructuralFeatures
    get eStructuralFeatures(): EList<EStructuralFeature> {
        if (this._eStructuralFeatures == null) {
            this._eStructuralFeatures = this.initEStructuralFeatures()
        }
        return this._eStructuralFeatures
    }

    // get the value of eSuperTypes
    get eSuperTypes(): EList<EClass> {
        if (this._eSuperTypes == null) {
            this._eSuperTypes = this.initESuperTypes()
        }
        return this._eSuperTypes
    }

    // get the value of isAbstract
    get isAbstract(): boolean {
        return this._isAbstract
    }

    // set the value of isAbstract
    set isAbstract(newIsAbstract: boolean) {
        let oldIsAbstract = this._isAbstract
        this._isAbstract = newIsAbstract
        if (this.eNotificationRequired) {
            this.eNotify(
                new Notification(this, EventType.SET, EcoreConstants.ECLASS__ABSTRACT, oldIsAbstract, newIsAbstract)
            )
        }
    }

    // get the value of isInterface
    get isInterface(): boolean {
        return this._isInterface
    }

    // set the value of isInterface
    set isInterface(newIsInterface: boolean) {
        let oldIsInterface = this._isInterface
        this._isInterface = newIsInterface
        if (this.eNotificationRequired) {
            this.eNotify(
                new Notification(this, EventType.SET, EcoreConstants.ECLASS__INTERFACE, oldIsInterface, newIsInterface)
            )
        }
    }

    // getEOperation default implementation
    getEOperation(operationID: number): EOperation {
        throw new Error("getEOperation not implemented")
    }

    // getEStructuralFeature default implementation
    getEStructuralFeature(featureID: number): EStructuralFeature {
        throw new Error("getEStructuralFeature not implemented")
    }

    // getEStructuralFeatureFromName default implementation
    getEStructuralFeatureFromName(featureName: string): EStructuralFeature {
        throw new Error("getEStructuralFeatureFromName not implemented")
    }

    // getFeatureCount default implementation
    getFeatureCount(): number {
        throw new Error("getFeatureCount not implemented")
    }

    // getFeatureID default implementation
    getFeatureID(feature: EStructuralFeature): number {
        throw new Error("getFeatureID not implemented")
    }

    // getFeatureType default implementation
    getFeatureType(feature: EStructuralFeature): EClassifier {
        throw new Error("getFeatureType not implemented")
    }

    // getOperationCount default implementation
    getOperationCount(): number {
        throw new Error("getOperationCount not implemented")
    }

    // getOperationID default implementation
    getOperationID(operation: EOperation): number {
        throw new Error("getOperationID not implemented")
    }

    // getOverride default implementation
    getOverride(operation: EOperation): EOperation {
        throw new Error("getOverride not implemented")
    }

    // isSuperTypeOf default implementation
    isSuperTypeOf(someClass: EClass): boolean {
        throw new Error("isSuperTypeOf not implemented")
    }

    protected initEAllAttributes(): void {
        this._eAllAttributes = new BasicEObjectList<EAttribute>(
            this,
            EcoreConstants.ECLASS__EALL_ATTRIBUTES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAllContainments(): void {
        this._eAllContainments = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EALL_CONTAINMENTS,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAllCrossReferences(): void {
        this._eAllCrossReferences = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EALL_CROSS_REFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAllOperations(): void {
        this._eAllOperations = new BasicEObjectList<EOperation>(
            this,
            EcoreConstants.ECLASS__EALL_OPERATIONS,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAllReferences(): void {
        this._eAllReferences = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EALL_REFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAllStructuralFeatures(): void {
        this._eAllStructuralFeatures = new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__EALL_STRUCTURAL_FEATURES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAllSuperTypes(): void {
        this._eAllSuperTypes = new BasicEObjectList<EClass>(
            this,
            EcoreConstants.ECLASS__EALL_SUPER_TYPES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEAttributes(): void {
        this._eAttributes = new BasicEObjectList<EAttribute>(
            this,
            EcoreConstants.ECLASS__EATTRIBUTES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEContainmentFeatures(): void {
        this._eContainmentFeatures = new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__ECONTAINMENT_FEATURES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initECrossReferenceFeatures(): void {
        this._eCrossReferenceFeatures = new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__ECROSS_REFERENCE_FEATURES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEIDAttribute(): void {
        throw new Error("initEIDAttribute not implemented")
    }

    protected initEOperations(): EList<EOperation> {
        return new BasicEObjectList<EOperation>(
            this,
            EcoreConstants.ECLASS__EOPERATIONS,
            EcoreConstants.EOPERATION__ECONTAINING_CLASS,
            true,
            true,
            true,
            false,
            false
        )
    }
    protected initEReferences(): void {
        this._eReferences = new BasicEObjectList<EReference>(
            this,
            EcoreConstants.ECLASS__EREFERENCES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    protected initEStructuralFeatures(): EList<EStructuralFeature> {
        return new BasicEObjectList<EStructuralFeature>(
            this,
            EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES,
            EcoreConstants.ESTRUCTURAL_FEATURE__ECONTAINING_CLASS,
            true,
            true,
            true,
            false,
            false
        )
    }
    protected initESuperTypes(): EList<EClass> {
        return new BasicEObjectList<EClass>(
            this,
            EcoreConstants.ECLASS__ESUPER_TYPES,
            -1,
            false,
            false,
            false,
            true,
            false
        )
    }

    eGetFromID(featureID: number, resolve: boolean): any {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                return this.isAbstract
            }
            case EcoreConstants.ECLASS__EALL_ATTRIBUTES: {
                return !resolve && isEObjectList(this.eAllAttributes)
                    ? this.eAllAttributes.getUnResolvedList()
                    : this.eAllAttributes
            }
            case EcoreConstants.ECLASS__EALL_CONTAINMENTS: {
                return !resolve && isEObjectList(this.eAllContainments)
                    ? this.eAllContainments.getUnResolvedList()
                    : this.eAllContainments
            }
            case EcoreConstants.ECLASS__EALL_CROSS_REFERENCES: {
                return !resolve && isEObjectList(this.eAllCrossReferences)
                    ? this.eAllCrossReferences.getUnResolvedList()
                    : this.eAllCrossReferences
            }
            case EcoreConstants.ECLASS__EALL_OPERATIONS: {
                return !resolve && isEObjectList(this.eAllOperations)
                    ? this.eAllOperations.getUnResolvedList()
                    : this.eAllOperations
            }
            case EcoreConstants.ECLASS__EALL_REFERENCES: {
                return !resolve && isEObjectList(this.eAllReferences)
                    ? this.eAllReferences.getUnResolvedList()
                    : this.eAllReferences
            }
            case EcoreConstants.ECLASS__EALL_STRUCTURAL_FEATURES: {
                return !resolve && isEObjectList(this.eAllStructuralFeatures)
                    ? this.eAllStructuralFeatures.getUnResolvedList()
                    : this.eAllStructuralFeatures
            }
            case EcoreConstants.ECLASS__EALL_SUPER_TYPES: {
                return !resolve && isEObjectList(this.eAllSuperTypes)
                    ? this.eAllSuperTypes.getUnResolvedList()
                    : this.eAllSuperTypes
            }
            case EcoreConstants.ECLASS__EATTRIBUTES: {
                return !resolve && isEObjectList(this.eAttributes)
                    ? this.eAttributes.getUnResolvedList()
                    : this.eAttributes
            }
            case EcoreConstants.ECLASS__ECONTAINMENT_FEATURES: {
                return !resolve && isEObjectList(this.eContainmentFeatures)
                    ? this.eContainmentFeatures.getUnResolvedList()
                    : this.eContainmentFeatures
            }
            case EcoreConstants.ECLASS__ECROSS_REFERENCE_FEATURES: {
                return !resolve && isEObjectList(this.eCrossReferenceFeatures)
                    ? this.eCrossReferenceFeatures.getUnResolvedList()
                    : this.eCrossReferenceFeatures
            }
            case EcoreConstants.ECLASS__EID_ATTRIBUTE: {
                return this.eIDAttribute
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                return this.eOperations
            }
            case EcoreConstants.ECLASS__EREFERENCES: {
                return !resolve && isEObjectList(this.eReferences)
                    ? this.eReferences.getUnResolvedList()
                    : this.eReferences
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                return this.eStructuralFeatures
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                return !resolve && isEObjectList(this.eSuperTypes)
                    ? this.eSuperTypes.getUnResolvedList()
                    : this.eSuperTypes
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                return this.isInterface
            }
            default: {
                return super.eGetFromID(featureID, resolve)
            }
        }
    }

    eSetFromID(featureID: number, newValue: any) {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                this.isAbstract = newValue as boolean
                break
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                this.eOperations.clear()
                this.eOperations.addAll(newValue as EList<EOperation>)
                break
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                this.eStructuralFeatures.clear()
                this.eStructuralFeatures.addAll(newValue as EList<EStructuralFeature>)
                break
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                this.eSuperTypes.clear()
                this.eSuperTypes.addAll(newValue as EList<EClass>)
                break
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                this.isInterface = newValue as boolean
                break
            }
            default: {
                super.eSetFromID(featureID, newValue)
            }
        }
    }

    eUnsetFromID(featureID: number) {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                this.isAbstract = false
                break
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                this.eOperations.clear()
                break
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                this.eStructuralFeatures.clear()
                break
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                this.eSuperTypes.clear()
                break
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                this.isInterface = false
                break
            }
            default: {
                super.eUnsetFromID(featureID)
            }
        }
    }

    eIsSetFromID(featureID: number): boolean {
        switch (featureID) {
            case EcoreConstants.ECLASS__ABSTRACT: {
                return this._isAbstract != false
            }
            case EcoreConstants.ECLASS__EALL_ATTRIBUTES: {
                return this.eAllAttributes != null && this.eAllAttributes.size() != 0
            }
            case EcoreConstants.ECLASS__EALL_CONTAINMENTS: {
                return this.eAllContainments != null && this.eAllContainments.size() != 0
            }
            case EcoreConstants.ECLASS__EALL_CROSS_REFERENCES: {
                return this.eAllCrossReferences != null && this.eAllCrossReferences.size() != 0
            }
            case EcoreConstants.ECLASS__EALL_OPERATIONS: {
                return this.eAllOperations != null && this.eAllOperations.size() != 0
            }
            case EcoreConstants.ECLASS__EALL_REFERENCES: {
                return this.eAllReferences != null && this.eAllReferences.size() != 0
            }
            case EcoreConstants.ECLASS__EALL_STRUCTURAL_FEATURES: {
                return this.eAllStructuralFeatures != null && this.eAllStructuralFeatures.size() != 0
            }
            case EcoreConstants.ECLASS__EALL_SUPER_TYPES: {
                return this.eAllSuperTypes != null && this.eAllSuperTypes.size() != 0
            }
            case EcoreConstants.ECLASS__EATTRIBUTES: {
                return this.eAttributes != null && this.eAttributes.size() != 0
            }
            case EcoreConstants.ECLASS__ECONTAINMENT_FEATURES: {
                return this.eContainmentFeatures != null && this.eContainmentFeatures.size() != 0
            }
            case EcoreConstants.ECLASS__ECROSS_REFERENCE_FEATURES: {
                return this.eCrossReferenceFeatures != null && this.eCrossReferenceFeatures.size() != 0
            }
            case EcoreConstants.ECLASS__EID_ATTRIBUTE: {
                return this._eIDAttribute != null
            }
            case EcoreConstants.ECLASS__EOPERATIONS: {
                return this.eOperations != null && this.eOperations.size() != 0
            }
            case EcoreConstants.ECLASS__EREFERENCES: {
                return this.eReferences != null && this.eReferences.size() != 0
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                return this.eStructuralFeatures != null && this.eStructuralFeatures.size() != 0
            }
            case EcoreConstants.ECLASS__ESUPER_TYPES: {
                return this.eSuperTypes != null && this.eSuperTypes.size() != 0
            }
            case EcoreConstants.ECLASS__INTERFACE: {
                return this._isInterface != false
            }
            default: {
                return super.eIsSetFromID(featureID)
            }
        }
    }

    eInvokeFromID(operationID: number, args: EList<any>): any {
        switch (operationID) {
            case EcoreConstants.ECLASS__GET_EOPERATION_EINT: {
                return this.getEOperation(args.get(0) as number)
            }
            case EcoreConstants.ECLASS__GET_ESTRUCTURAL_FEATURE_EINT: {
                return this.getEStructuralFeature(args.get(0) as number)
            }
            case EcoreConstants.ECLASS__GET_ESTRUCTURAL_FEATURE_ESTRING: {
                return this.getEStructuralFeatureFromName(args.get(0) as string)
            }
            case EcoreConstants.ECLASS__GET_FEATURE_COUNT: {
                return this.getFeatureCount()
            }
            case EcoreConstants.ECLASS__GET_FEATURE_ID_ESTRUCTURALFEATURE: {
                return this.getFeatureID(args.get(0) as EStructuralFeature)
            }
            case EcoreConstants.ECLASS__GET_FEATURE_TYPE_ESTRUCTURALFEATURE: {
                return this.getFeatureType(args.get(0) as EStructuralFeature)
            }
            case EcoreConstants.ECLASS__GET_OPERATION_COUNT: {
                return this.getOperationCount()
            }
            case EcoreConstants.ECLASS__GET_OPERATION_ID_EOPERATION: {
                return this.getOperationID(args.get(0) as EOperation)
            }
            case EcoreConstants.ECLASS__GET_OVERRIDE_EOPERATION: {
                return this.getOverride(args.get(0) as EOperation)
            }
            case EcoreConstants.ECLASS__IS_SUPER_TYPE_OF_ECLASS: {
                return this.isSuperTypeOf(args.get(0) as EClass)
            }
            default: {
                return super.eInvokeFromID(operationID, args)
            }
        }
    }

    eBasicInverseAdd(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASS__EOPERATIONS: {
                let list = this.eOperations as ENotifyingList<EOperation>
                let end = otherEnd as EOperation
                return list.addWithNotification(end, notifications)
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                let list = this.eStructuralFeatures as ENotifyingList<EStructuralFeature>
                let end = otherEnd as EStructuralFeature
                return list.addWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseAdd(otherEnd, featureID, notifications)
            }
        }
    }

    eBasicInverseRemove(otherEnd: EObject, featureID: number, notifications: ENotificationChain): ENotificationChain {
        switch (featureID) {
            case EcoreConstants.ECLASS__EOPERATIONS: {
                let list = this.eOperations as ENotifyingList<EOperation>
                let end = otherEnd as EOperation
                return list.removeWithNotification(end, notifications)
            }
            case EcoreConstants.ECLASS__ESTRUCTURAL_FEATURES: {
                let list = this.eStructuralFeatures as ENotifyingList<EStructuralFeature>
                let end = otherEnd as EStructuralFeature
                return list.removeWithNotification(end, notifications)
            }
            default: {
                return super.eBasicInverseRemove(otherEnd, featureID, notifications)
            }
        }
    }
}
