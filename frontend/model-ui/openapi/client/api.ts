/* tslint:disable */
/* eslint-disable */
/**
 * ModeluiApi
 * ModeluiApi
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EAnnotation
 */
export interface EAnnotation {
    /**
     * 
     * @type {object}
     * @memberof EAnnotation
     */
    'emodelElement'?: object;
    /**
     * 
     * @type {string}
     * @memberof EAnnotation
     */
    'source'?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof EAnnotation
     */
    'details'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof EAnnotation
     */
    'references'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof EAnnotation
     */
    'contents'?: Array<object>;
}
/**
 * 
 * @export
 * @interface EClassifier
 */
export interface EClassifier {
    /**
     * 
     * @type {string}
     * @memberof EClassifier
     */
    'instanceTypeName'?: string;
    /**
     * 
     * @type {EPackage}
     * @memberof EClassifier
     */
    'epackage'?: EPackage;
    /**
     * 
     * @type {Array<ETypeParameter>}
     * @memberof EClassifier
     */
    'etypeParameters'?: Array<ETypeParameter>;
    /**
     * 
     * @type {string}
     * @memberof EClassifier
     */
    'instanceClassName'?: string;
    /**
     * 
     * @type {number}
     * @memberof EClassifier
     */
    'classifierID'?: number;
    /**
     * 
     * @type {object}
     * @memberof EClassifier
     */
    'defaultValue'?: object;
    /**
     * 
     * @type {string}
     * @memberof EClassifier
     */
    'name'?: string;
    /**
     * 
     * @type {Array<EAnnotation>}
     * @memberof EClassifier
     */
    'eannotations'?: Array<EAnnotation>;
}
/**
 * 
 * @export
 * @interface EFactory
 */
export interface EFactory {
    /**
     * 
     * @type {EPackage}
     * @memberof EFactory
     */
    'epackage'?: EPackage;
    /**
     * 
     * @type {Array<EAnnotation>}
     * @memberof EFactory
     */
    'eannotations'?: Array<EAnnotation>;
}
/**
 * 
 * @export
 * @interface EGenericType
 */
export interface EGenericType {
    /**
     * 
     * @type {EClassifier}
     * @memberof EGenericType
     */
    'eclassifier'?: EClassifier;
    /**
     * 
     * @type {EGenericType}
     * @memberof EGenericType
     */
    'eupperBound'?: EGenericType;
    /**
     * 
     * @type {EClassifier}
     * @memberof EGenericType
     */
    'erawType'?: EClassifier;
    /**
     * 
     * @type {EGenericType}
     * @memberof EGenericType
     */
    'elowerBound'?: EGenericType;
    /**
     * 
     * @type {ETypeParameter}
     * @memberof EGenericType
     */
    'etypeParameter'?: ETypeParameter;
}
/**
 * 
 * @export
 * @interface EListEAnnotation
 */
export interface EListEAnnotation extends Array<EAnnotation> {
}
/**
 * 
 * @export
 * @interface EListEClassifier
 */
export interface EListEClassifier extends Array<EClassifier> {
}
/**
 * 
 * @export
 * @interface EListEGenericType
 */
export interface EListEGenericType extends Array<EGenericType> {
}
/**
 * 
 * @export
 * @interface EListEObject
 */
export interface EListEObject extends Array<object> {
}
/**
 * 
 * @export
 * @interface EListEPackage
 */
export interface EListEPackage extends Array<EPackage> {
}
/**
 * 
 * @export
 * @interface EListETypeParameter
 */
export interface EListETypeParameter extends Array<ETypeParameter> {
}
/**
 * 
 * @export
 * @interface EListString
 */
export interface EListString extends Array<string> {
}
/**
 * 
 * @export
 * @interface EMapStringString
 */
export interface EMapStringString extends Array<object> {
}
/**
 * 
 * @export
 * @interface EPackage
 */
export interface EPackage {
    /**
     * 
     * @type {string}
     * @memberof EPackage
     */
    'nsURI'?: string;
    /**
     * 
     * @type {string}
     * @memberof EPackage
     */
    'nsPrefix'?: string;
    /**
     * 
     * @type {EFactory}
     * @memberof EPackage
     */
    'efactoryInstance'?: EFactory;
    /**
     * 
     * @type {Array<EClassifier>}
     * @memberof EPackage
     */
    'eclassifiers'?: Array<EClassifier>;
    /**
     * 
     * @type {Array<EPackage>}
     * @memberof EPackage
     */
    'esubpackages'?: Array<EPackage>;
    /**
     * 
     * @type {EPackage}
     * @memberof EPackage
     */
    'esuperPackage'?: EPackage;
    /**
     * 
     * @type {string}
     * @memberof EPackage
     */
    'name'?: string;
    /**
     * 
     * @type {Array<EAnnotation>}
     * @memberof EPackage
     */
    'eannotations'?: Array<EAnnotation>;
}
/**
 * 
 * @export
 * @interface ETypeParameter
 */
export interface ETypeParameter {
    /**
     * 
     * @type {Array<EGenericType>}
     * @memberof ETypeParameter
     */
    'ebounds'?: Array<EGenericType>;
    /**
     * 
     * @type {string}
     * @memberof ETypeParameter
     */
    'name'?: string;
    /**
     * 
     * @type {Array<EAnnotation>}
     * @memberof ETypeParameter
     */
    'eannotations'?: Array<EAnnotation>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an EObject with an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, eClassUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/eobject/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eClassUri !== undefined) {
                localVarQueryParameter['eClassUri'] = eClassUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an ePackage with an specified ePackageUri.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (ePackageUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ePackageUri !== undefined) {
                localVarQueryParameter['ePackageUri'] = ePackageUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check existens of an EObject with an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists: async (id: string, eClassUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('exists', 'id', id)
            const localVarPath = `/eobject/exists{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eClassUri !== undefined) {
                localVarQueryParameter['eClassUri'] = eClassUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check existens of an EObject with an specified eClassUri and id.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists1: async (ePackageUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ePackageUri !== undefined) {
                localVarQueryParameter['ePackageUri'] = ePackageUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eobject/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Loads and returns an EObject for an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load: async (id: string, eClassUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('load', 'id', id)
            const localVarPath = `/eobject/load/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eClassUri !== undefined) {
                localVarQueryParameter['eClassUri'] = eClassUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Loads and returns an EPackage for an specified ePackageUri.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load1: async (ePackageUri?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ePackageUri !== undefined) {
                localVarQueryParameter['ePackageUri'] = ePackageUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Loads and returns a list of EObject for an specified eClassUri.
         * @param {string} [eClassUri] 
         * @param {Array<string>} [projection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAll: async (eClassUri?: string, projection?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eobject/loadall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eClassUri !== undefined) {
                localVarQueryParameter['eClassUri'] = eClassUri;
            }

            if (projection !== undefined) {
                for (const [key, value] of Object.entries(projection)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Loads and returns all EPackage for an specified ePackageUri.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAll1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/loadall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves an EObject.
         * @param {object} [eObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: async (eObject?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eobject/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eObject !== undefined) {
                for (const [key, value] of Object.entries(eObject)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves an EObject.
         * @param {EPackage} [ePackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1: async (ePackage?: EPackage, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ePackage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves a list of EObjects.
         * @param {Array<object>} [eObjects] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAll: async (eObjects?: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/eobject/saveall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eObjects !== undefined) {
                for (const [key, value] of Object.entries(eObjects)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Saves a list of Epackages.
         * @param {Array<EPackage>} [ePackages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAll1: async (ePackages?: Array<EPackage>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/epackage/saveall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ePackages !== undefined) {
                for (const [key, value] of Object.entries(ePackages)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes an EObject with an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, eClassUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, eClassUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an ePackage with an specified ePackageUri.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(ePackageUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(ePackageUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.delete1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check existens of an EObject with an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exists(id: string, eClassUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exists(id, eClassUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.exists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check existens of an EObject with an specified eClassUri and id.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exists1(ePackageUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exists1(ePackageUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.exists1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.hello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hello1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hello1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.hello1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Loads and returns an EObject for an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async load(id: string, eClassUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.load(id, eClassUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.load']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Loads and returns an EPackage for an specified ePackageUri.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async load1(ePackageUri?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EPackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.load1(ePackageUri, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.load1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Loads and returns a list of EObject for an specified eClassUri.
         * @param {string} [eClassUri] 
         * @param {Array<string>} [projection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadAll(eClassUri?: string, projection?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadAll(eClassUri, projection, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loadAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Loads and returns all EPackage for an specified ePackageUri.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadAll1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadAll1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loadAll1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves an EObject.
         * @param {object} [eObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save(eObject?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.save(eObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.save']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves an EObject.
         * @param {EPackage} [ePackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async save1(ePackage?: EPackage, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.save1(ePackage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.save1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves a list of EObjects.
         * @param {Array<object>} [eObjects] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAll(eObjects?: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAll(eObjects, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.saveAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Saves a list of Epackages.
         * @param {Array<EPackage>} [ePackages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAll1(ePackages?: Array<EPackage>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAll1(ePackages, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.saveAll1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Deletes an EObject with an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, eClassUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(id, eClassUri, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an ePackage with an specified ePackageUri.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(ePackageUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete1(ePackageUri, options).then((request) => request(axios, basePath));
        },
        /**
         * Check existens of an EObject with an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists(id: string, eClassUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exists(id, eClassUri, options).then((request) => request(axios, basePath));
        },
        /**
         * Check existens of an EObject with an specified eClassUri and id.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exists1(ePackageUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exists1(ePackageUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.hello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello1(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.hello1(options).then((request) => request(axios, basePath));
        },
        /**
         * Loads and returns an EObject for an specified eClassUri and id.
         * @param {string} id 
         * @param {string} [eClassUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load(id: string, eClassUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.load(id, eClassUri, options).then((request) => request(axios, basePath));
        },
        /**
         * Loads and returns an EPackage for an specified ePackageUri.
         * @param {string} [ePackageUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        load1(ePackageUri?: string, options?: RawAxiosRequestConfig): AxiosPromise<EPackage> {
            return localVarFp.load1(ePackageUri, options).then((request) => request(axios, basePath));
        },
        /**
         * Loads and returns a list of EObject for an specified eClassUri.
         * @param {string} [eClassUri] 
         * @param {Array<string>} [projection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAll(eClassUri?: string, projection?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<object>> {
            return localVarFp.loadAll(eClassUri, projection, options).then((request) => request(axios, basePath));
        },
        /**
         * Loads and returns all EPackage for an specified ePackageUri.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadAll1(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.loadAll1(options).then((request) => request(axios, basePath));
        },
        /**
         * Saves an EObject.
         * @param {object} [eObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(eObject?: object, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.save(eObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves an EObject.
         * @param {EPackage} [ePackage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1(ePackage?: EPackage, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.save1(ePackage, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves a list of EObjects.
         * @param {Array<object>} [eObjects] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAll(eObjects?: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<Array<object>> {
            return localVarFp.saveAll(eObjects, options).then((request) => request(axios, basePath));
        },
        /**
         * Saves a list of Epackages.
         * @param {Array<EPackage>} [ePackages] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAll1(ePackages?: Array<EPackage>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.saveAll1(ePackages, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Deletes an EObject with an specified eClassUri and id.
     * @param {string} id 
     * @param {string} [eClassUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public _delete(id: string, eClassUri?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration)._delete(id, eClassUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an ePackage with an specified ePackageUri.
     * @param {string} [ePackageUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete1(ePackageUri?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).delete1(ePackageUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check existens of an EObject with an specified eClassUri and id.
     * @param {string} id 
     * @param {string} [eClassUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exists(id: string, eClassUri?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).exists(id, eClassUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check existens of an EObject with an specified eClassUri and id.
     * @param {string} [ePackageUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exists1(ePackageUri?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).exists1(ePackageUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hello(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hello1(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hello1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Loads and returns an EObject for an specified eClassUri and id.
     * @param {string} id 
     * @param {string} [eClassUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public load(id: string, eClassUri?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).load(id, eClassUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Loads and returns an EPackage for an specified ePackageUri.
     * @param {string} [ePackageUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public load1(ePackageUri?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).load1(ePackageUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Loads and returns a list of EObject for an specified eClassUri.
     * @param {string} [eClassUri] 
     * @param {Array<string>} [projection] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loadAll(eClassUri?: string, projection?: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loadAll(eClassUri, projection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Loads and returns all EPackage for an specified ePackageUri.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loadAll1(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loadAll1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves an EObject.
     * @param {object} [eObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public save(eObject?: object, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).save(eObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves an EObject.
     * @param {EPackage} [ePackage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public save1(ePackage?: EPackage, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).save1(ePackage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves a list of EObjects.
     * @param {Array<object>} [eObjects] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveAll(eObjects?: Array<object>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveAll(eObjects, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Saves a list of Epackages.
     * @param {Array<EPackage>} [ePackages] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveAll1(ePackages?: Array<EPackage>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).saveAll1(ePackages, options).then((request) => request(this.axios, this.basePath));
    }
}



